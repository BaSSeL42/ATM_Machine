
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000547e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000282  00800060  0000547e  00005512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008002e2  008002e2  00005794  2**0
                  ALLOC
  3 .stab         00007b60  00000000  00000000  00005794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005054  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000126da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00014ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00015e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00017044  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00017204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000174fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__vector_1>
       8:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_12>
      34:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 29 	call	0x52da	; 0x52da <main>
      8a:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 29 	jmp	0x53be	; 0x53be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 29 	jmp	0x53be	; 0x53be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 29 	jmp	0x5396	; 0x5396 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 29 	jmp	0x53ce	; 0x53ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 29 	jmp	0x53a6	; 0x53a6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ef 29 	jmp	0x53de	; 0x53de <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cb 29 	jmp	0x5396	; 0x5396 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e7 29 	jmp	0x53ce	; 0x53ce <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 56       	subi	r30, 0x67	; 103
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_enuInit>:
 * Function Description : Initialize Timer1 to Fast PWM Mode
 * Arguments			: copy_enTmerMode  {TIMER1_OVF_MODE,TIMER1_FAST_PWM_MODE,..... }
 * Return 				: enu_timer1Status_t {TIMER1_OK or TIMER1_NOK}
 */
enu_timer1Status_t Timer1_enuInit (enu_timer1Mode_t copy_enTmerMode)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_enuInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <Timer1_enuInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	enu_timer1Status_t errorStatus = TIMER1_OK;
     e3c:	19 82       	std	Y+1, r1	; 0x01

	if(copy_enTmerMode < TIMER1_MODE_INVALID)
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	8f 30       	cpi	r24, 0x0F	; 15
     e42:	08 f0       	brcs	.+2      	; 0xe46 <Timer1_enuInit+0x18>
     e44:	27 c2       	rjmp	.+1102   	; 0x1294 <Timer1_enuInit+0x466>
	{
		switch (copy_enTmerMode)
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3c 83       	std	Y+4, r19	; 0x04
     e4e:	2b 83       	std	Y+3, r18	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	87 30       	cpi	r24, 0x07	; 7
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <Timer1_enuInit+0x2e>
     e5a:	2a c1       	rjmp	.+596    	; 0x10b0 <Timer1_enuInit+0x282>
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	3c 81       	ldd	r19, Y+4	; 0x04
     e60:	28 30       	cpi	r18, 0x08	; 8
     e62:	31 05       	cpc	r19, r1
     e64:	4c f5       	brge	.+82     	; 0xeb8 <Timer1_enuInit+0x8a>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <Timer1_enuInit+0x44>
     e70:	a5 c0       	rjmp	.+330    	; 0xfbc <Timer1_enuInit+0x18e>
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	24 30       	cpi	r18, 0x04	; 4
     e78:	31 05       	cpc	r19, r1
     e7a:	8c f4       	brge	.+34     	; 0xe9e <Timer1_enuInit+0x70>
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <Timer1_enuInit+0x5a>
     e86:	60 c0       	rjmp	.+192    	; 0xf48 <Timer1_enuInit+0x11a>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	0c f0       	brlt	.+2      	; 0xe94 <Timer1_enuInit+0x66>
     e92:	77 c0       	rjmp	.+238    	; 0xf82 <Timer1_enuInit+0x154>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	c9 f1       	breq	.+114    	; 0xf0e <Timer1_enuInit+0xe0>
     e9c:	f6 c1       	rjmp	.+1004   	; 0x128a <Timer1_enuInit+0x45c>
     e9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ea0:	3c 81       	ldd	r19, Y+4	; 0x04
     ea2:	25 30       	cpi	r18, 0x05	; 5
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <Timer1_enuInit+0x7c>
     ea8:	c3 c0       	rjmp	.+390    	; 0x1030 <Timer1_enuInit+0x202>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	86 30       	cpi	r24, 0x06	; 6
     eb0:	91 05       	cpc	r25, r1
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <Timer1_enuInit+0x88>
     eb4:	dd c0       	rjmp	.+442    	; 0x1070 <Timer1_enuInit+0x242>
     eb6:	9f c0       	rjmp	.+318    	; 0xff6 <Timer1_enuInit+0x1c8>
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	2b 30       	cpi	r18, 0x0B	; 11
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <Timer1_enuInit+0x96>
     ec2:	6d c1       	rjmp	.+730    	; 0x119e <Timer1_enuInit+0x370>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	8c 30       	cpi	r24, 0x0C	; 12
     eca:	91 05       	cpc	r25, r1
     ecc:	6c f4       	brge	.+26     	; 0xee8 <Timer1_enuInit+0xba>
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	29 30       	cpi	r18, 0x09	; 9
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <Timer1_enuInit+0xac>
     ed8:	28 c1       	rjmp	.+592    	; 0x112a <Timer1_enuInit+0x2fc>
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	8a 30       	cpi	r24, 0x0A	; 10
     ee0:	91 05       	cpc	r25, r1
     ee2:	0c f0       	brlt	.+2      	; 0xee6 <Timer1_enuInit+0xb8>
     ee4:	3f c1       	rjmp	.+638    	; 0x1164 <Timer1_enuInit+0x336>
     ee6:	04 c1       	rjmp	.+520    	; 0x10f0 <Timer1_enuInit+0x2c2>
     ee8:	2b 81       	ldd	r18, Y+3	; 0x03
     eea:	3c 81       	ldd	r19, Y+4	; 0x04
     eec:	2d 30       	cpi	r18, 0x0D	; 13
     eee:	31 05       	cpc	r19, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <Timer1_enuInit+0xc6>
     ef2:	8f c1       	rjmp	.+798    	; 0x1212 <Timer1_enuInit+0x3e4>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	8d 30       	cpi	r24, 0x0D	; 13
     efa:	91 05       	cpc	r25, r1
     efc:	0c f4       	brge	.+2      	; 0xf00 <Timer1_enuInit+0xd2>
     efe:	6c c1       	rjmp	.+728    	; 0x11d8 <Timer1_enuInit+0x3aa>
     f00:	2b 81       	ldd	r18, Y+3	; 0x03
     f02:	3c 81       	ldd	r19, Y+4	; 0x04
     f04:	2e 30       	cpi	r18, 0x0E	; 14
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <Timer1_enuInit+0xde>
     f0a:	a3 c1       	rjmp	.+838    	; 0x1252 <Timer1_enuInit+0x424>
     f0c:	be c1       	rjmp	.+892    	; 0x128a <Timer1_enuInit+0x45c>
		{
			case TIMER1_NORMAL_0xFFFF				: ClrBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
     f0e:	ae e4       	ldi	r26, 0x4E	; 78
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ee e4       	ldi	r30, 0x4E	; 78
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	8c 93       	st	X, r24
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	8c 93       	st	X, r24
     f2a:	af e4       	ldi	r26, 0x4F	; 79
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ef e4       	ldi	r30, 0x4F	; 79
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8d 7f       	andi	r24, 0xFD	; 253
     f36:	8c 93       	st	X, r24
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	8c 93       	st	X, r24
     f46:	a1 c1       	rjmp	.+834    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_CORRECT_8_0x00FF	: ClrBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); break;
     f48:	ae e4       	ldi	r26, 0x4E	; 78
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ee e4       	ldi	r30, 0x4E	; 78
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7e       	andi	r24, 0xEF	; 239
     f54:	8c 93       	st	X, r24
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	8c 93       	st	X, r24
     f64:	af e4       	ldi	r26, 0x4F	; 79
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ef e4       	ldi	r30, 0x4F	; 79
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	8c 93       	st	X, r24
     f72:	af e4       	ldi	r26, 0x4F	; 79
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ef e4       	ldi	r30, 0x4F	; 79
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	8c 93       	st	X, r24
     f80:	84 c1       	rjmp	.+776    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_CORRECT_9_0x01FF	: ClrBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
     f82:	ae e4       	ldi	r26, 0x4E	; 78
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ee e4       	ldi	r30, 0x4E	; 78
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	8c 93       	st	X, r24
     f90:	ae e4       	ldi	r26, 0x4E	; 78
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ee e4       	ldi	r30, 0x4E	; 78
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
     f9e:	af e4       	ldi	r26, 0x4F	; 79
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ef e4       	ldi	r30, 0x4F	; 79
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	82 60       	ori	r24, 0x02	; 2
     faa:	8c 93       	st	X, r24
     fac:	af e4       	ldi	r26, 0x4F	; 79
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ef e4       	ldi	r30, 0x4F	; 79
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	8c 93       	st	X, r24
     fba:	67 c1       	rjmp	.+718    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_CORRECT_10_0x03FF	: ClrBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); break;
     fbc:	ae e4       	ldi	r26, 0x4E	; 78
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ee e4       	ldi	r30, 0x4E	; 78
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7e       	andi	r24, 0xEF	; 239
     fc8:	8c 93       	st	X, r24
     fca:	ae e4       	ldi	r26, 0x4E	; 78
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ee e4       	ldi	r30, 0x4E	; 78
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	8c 93       	st	X, r24
     fd8:	af e4       	ldi	r26, 0x4F	; 79
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ef e4       	ldi	r30, 0x4F	; 79
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
     fe6:	af e4       	ldi	r26, 0x4F	; 79
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ef e4       	ldi	r30, 0x4F	; 79
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	8c 93       	st	X, r24
     ff4:	4a c1       	rjmp	.+660    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_CTC_OCR1A					: ClrBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
     ff6:	ae e4       	ldi	r26, 0x4E	; 78
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ee e4       	ldi	r30, 0x4E	; 78
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	8c 93       	st	X, r24
    1004:	ae e4       	ldi	r26, 0x4E	; 78
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ee e4       	ldi	r30, 0x4E	; 78
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	8c 93       	st	X, r24
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8d 7f       	andi	r24, 0xFD	; 253
    101e:	8c 93       	st	X, r24
    1020:	af e4       	ldi	r26, 0x4F	; 79
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e4       	ldi	r30, 0x4F	; 79
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
    102e:	2d c1       	rjmp	.+602    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_FAST_PWM_8_0x00FF			: ClrBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); gen_PwmMode =TIMER1_FAST_PWM_8_0x00FF;  break;
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	8c 93       	st	X, r24
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	8c 93       	st	X, r24
    104c:	af e4       	ldi	r26, 0x4F	; 79
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ef e4       	ldi	r30, 0x4F	; 79
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	8c 93       	st	X, r24
    105a:	af e4       	ldi	r26, 0x4F	; 79
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	8c 93       	st	X, r24
    1068:	85 e0       	ldi	r24, 0x05	; 5
    106a:	80 93 f4 02 	sts	0x02F4, r24
    106e:	0d c1       	rjmp	.+538    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_FAST_PWM_9_0x01FF			: ClrBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); gen_PwmMode =TIMER1_FAST_PWM_9_0x01FF;  break;
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7e       	andi	r24, 0xEF	; 239
    107c:	8c 93       	st	X, r24
    107e:	ae e4       	ldi	r26, 0x4E	; 78
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ee e4       	ldi	r30, 0x4E	; 78
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 60       	ori	r24, 0x08	; 8
    108a:	8c 93       	st	X, r24
    108c:	af e4       	ldi	r26, 0x4F	; 79
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ef e4       	ldi	r30, 0x4F	; 79
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	82 60       	ori	r24, 0x02	; 2
    1098:	8c 93       	st	X, r24
    109a:	af e4       	ldi	r26, 0x4F	; 79
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8e 7f       	andi	r24, 0xFE	; 254
    10a6:	8c 93       	st	X, r24
    10a8:	86 e0       	ldi	r24, 0x06	; 6
    10aa:	80 93 f4 02 	sts	0x02F4, r24
    10ae:	ed c0       	rjmp	.+474    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_FAST_PWM_10_0x03FF			: ClrBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); gen_PwmMode =TIMER1_FAST_PWM_10_0x03FF; break;
    10b0:	ae e4       	ldi	r26, 0x4E	; 78
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ee e4       	ldi	r30, 0x4E	; 78
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 7e       	andi	r24, 0xEF	; 239
    10bc:	8c 93       	st	X, r24
    10be:	ae e4       	ldi	r26, 0x4E	; 78
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ee e4       	ldi	r30, 0x4E	; 78
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 60       	ori	r24, 0x08	; 8
    10ca:	8c 93       	st	X, r24
    10cc:	af e4       	ldi	r26, 0x4F	; 79
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ef e4       	ldi	r30, 0x4F	; 79
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
    10da:	af e4       	ldi	r26, 0x4F	; 79
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	8c 93       	st	X, r24
    10e8:	87 e0       	ldi	r24, 0x07	; 7
    10ea:	80 93 f4 02 	sts	0x02F4, r24
    10ee:	cd c0       	rjmp	.+410    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR1	: SetBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
    10f0:	ae e4       	ldi	r26, 0x4E	; 78
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ee e4       	ldi	r30, 0x4E	; 78
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	8c 93       	st	X, r24
    10fe:	ae e4       	ldi	r26, 0x4E	; 78
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	8c 93       	st	X, r24
    110c:	af e4       	ldi	r26, 0x4F	; 79
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ef e4       	ldi	r30, 0x4F	; 79
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8d 7f       	andi	r24, 0xFD	; 253
    1118:	8c 93       	st	X, r24
    111a:	af e4       	ldi	r26, 0x4F	; 79
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ef e4       	ldi	r30, 0x4F	; 79
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	8c 93       	st	X, r24
    1128:	b0 c0       	rjmp	.+352    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_FREQ_CORRECT_OCR1A: SetBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); break;
    112a:	ae e4       	ldi	r26, 0x4E	; 78
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ee e4       	ldi	r30, 0x4E	; 78
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 61       	ori	r24, 0x10	; 16
    1136:	8c 93       	st	X, r24
    1138:	ae e4       	ldi	r26, 0x4E	; 78
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ee e4       	ldi	r30, 0x4E	; 78
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	8c 93       	st	X, r24
    1146:	af e4       	ldi	r26, 0x4F	; 79
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	ef e4       	ldi	r30, 0x4F	; 79
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8d 7f       	andi	r24, 0xFD	; 253
    1152:	8c 93       	st	X, r24
    1154:	af e4       	ldi	r26, 0x4F	; 79
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ef e4       	ldi	r30, 0x4F	; 79
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	8c 93       	st	X, r24
    1162:	93 c0       	rjmp	.+294    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_CORRECT_ICR1		: SetBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
    1164:	ae e4       	ldi	r26, 0x4E	; 78
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ee e4       	ldi	r30, 0x4E	; 78
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 61       	ori	r24, 0x10	; 16
    1170:	8c 93       	st	X, r24
    1172:	ae e4       	ldi	r26, 0x4E	; 78
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ee e4       	ldi	r30, 0x4E	; 78
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	87 7f       	andi	r24, 0xF7	; 247
    117e:	8c 93       	st	X, r24
    1180:	af e4       	ldi	r26, 0x4F	; 79
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ef e4       	ldi	r30, 0x4F	; 79
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	82 60       	ori	r24, 0x02	; 2
    118c:	8c 93       	st	X, r24
    118e:	af e4       	ldi	r26, 0x4F	; 79
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ef e4       	ldi	r30, 0x4F	; 79
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	8c 93       	st	X, r24
    119c:	76 c0       	rjmp	.+236    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_PWM_PHASE_CORRECT_OCR1A		: SetBit(TCCR1B_REG, WGM13); ClrBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); break;
    119e:	ae e4       	ldi	r26, 0x4E	; 78
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ee e4       	ldi	r30, 0x4E	; 78
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 61       	ori	r24, 0x10	; 16
    11aa:	8c 93       	st	X, r24
    11ac:	ae e4       	ldi	r26, 0x4E	; 78
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ee e4       	ldi	r30, 0x4E	; 78
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	87 7f       	andi	r24, 0xF7	; 247
    11b8:	8c 93       	st	X, r24
    11ba:	af e4       	ldi	r26, 0x4F	; 79
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ef e4       	ldi	r30, 0x4F	; 79
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	8c 93       	st	X, r24
    11c8:	af e4       	ldi	r26, 0x4F	; 79
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ef e4       	ldi	r30, 0x4F	; 79
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	81 60       	ori	r24, 0x01	; 1
    11d4:	8c 93       	st	X, r24
    11d6:	59 c0       	rjmp	.+178    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_CTC_ICR1					: SetBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); ClrBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); break;
    11d8:	ae e4       	ldi	r26, 0x4E	; 78
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ee e4       	ldi	r30, 0x4E	; 78
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 61       	ori	r24, 0x10	; 16
    11e4:	8c 93       	st	X, r24
    11e6:	ae e4       	ldi	r26, 0x4E	; 78
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ee e4       	ldi	r30, 0x4E	; 78
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	8c 93       	st	X, r24
    11f4:	af e4       	ldi	r26, 0x4F	; 79
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ef e4       	ldi	r30, 0x4F	; 79
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8d 7f       	andi	r24, 0xFD	; 253
    1200:	8c 93       	st	X, r24
    1202:	af e4       	ldi	r26, 0x4F	; 79
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e4       	ldi	r30, 0x4F	; 79
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
    1210:	3c c0       	rjmp	.+120    	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_FAST_PWM_ICR1				: SetBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); ClrBit(TCCR1A_REG, WGM10); gen_PwmMode =TIMER1_FAST_PWM_ICR1;  break;
    1212:	ae e4       	ldi	r26, 0x4E	; 78
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ee e4       	ldi	r30, 0x4E	; 78
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	8c 93       	st	X, r24
    1220:	ae e4       	ldi	r26, 0x4E	; 78
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ee e4       	ldi	r30, 0x4E	; 78
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	88 60       	ori	r24, 0x08	; 8
    122c:	8c 93       	st	X, r24
    122e:	af e4       	ldi	r26, 0x4F	; 79
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ef e4       	ldi	r30, 0x4F	; 79
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	8c 93       	st	X, r24
    123c:	af e4       	ldi	r26, 0x4F	; 79
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ef e4       	ldi	r30, 0x4F	; 79
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	8c 93       	st	X, r24
    124a:	8d e0       	ldi	r24, 0x0D	; 13
    124c:	80 93 f4 02 	sts	0x02F4, r24
    1250:	1c c0       	rjmp	.+56     	; 0x128a <Timer1_enuInit+0x45c>
			case TIMER1_FAST_PWM_OCR1A				: SetBit(TCCR1B_REG, WGM13); SetBit(TCCR1B_REG, WGM12); SetBit(TCCR1A_REG, WGM11); SetBit(TCCR1A_REG, WGM10); break;
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 61       	ori	r24, 0x10	; 16
    125e:	8c 93       	st	X, r24
    1260:	ae e4       	ldi	r26, 0x4E	; 78
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ee e4       	ldi	r30, 0x4E	; 78
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 60       	ori	r24, 0x08	; 8
    126c:	8c 93       	st	X, r24
    126e:	af e4       	ldi	r26, 0x4F	; 79
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ef e4       	ldi	r30, 0x4F	; 79
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	8c 93       	st	X, r24
    127c:	af e4       	ldi	r26, 0x4F	; 79
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ef e4       	ldi	r30, 0x4F	; 79
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	8c 93       	st	X, r24
			default: break;
		}

		TCNT1_REG = (Uint16_t)0;
    128a:	ec e4       	ldi	r30, 0x4C	; 76
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	11 82       	std	Z+1, r1	; 0x01
    1290:	10 82       	st	Z, r1
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <Timer1_enuInit+0x46a>
	}else
	{
		errorStatus = TIMER1_NOK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <Timer1_enuSetPrescallar>:
 * Function Description : Set Prescaller
 * Arguments			: Timer1_enuSetPrescallar  {TIMER1_PRE_1,TIMER1_PRE_64,TIMER1_PRE_256,..... }
 * Return 				: enu_timer1Status_t {TIMER1_OK or TIMER1_NOK}
 */
enu_timer1Status_t Timer1_enuSetPrescallar(enu_timer1Prescalar_t copy_enTimerPrescaller)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <Timer1_enuSetPrescallar+0x6>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	8b 83       	std	Y+3, r24	; 0x03
	enu_timer1Status_t errorStatus = TIMER1_OK;
    12b6:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t temp_reg;
	if(copy_enTimerPrescaller < TIMER1_PRESCALR_INVALID)
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 30       	cpi	r24, 0x08	; 8
    12bc:	80 f4       	brcc	.+32     	; 0x12de <Timer1_enuSetPrescallar+0x36>
	{
		temp_reg = TCCR1B_REG;
    12be:	ee e4       	ldi	r30, 0x4E	; 78
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	89 83       	std	Y+1, r24	; 0x01
		temp_reg &= PRESCALLER_CLR_MSK;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 7f       	andi	r24, 0xF8	; 248
    12ca:	89 83       	std	Y+1, r24	; 0x01
		temp_reg |= copy_enTimerPrescaller << TIMER1_PRESCALLER_OFFSET;
    12cc:	99 81       	ldd	r25, Y+1	; 0x01
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	89 2b       	or	r24, r25
    12d2:	89 83       	std	Y+1, r24	; 0x01
		TCCR1B_REG = temp_reg;
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 83       	st	Z, r24
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <Timer1_enuSetPrescallar+0x3a>
	}
	else
	{
		errorStatus = TIMER1_NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return errorStatus;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <Timer1_enuFastPWMInit>:
 * Function Description : Set PWM Mode
 * Arguments			: copy_enPWMMode  {TIMER1_PWM_NORMAL,TIMER1_PWM_CLR_ON_CMP,TIMER1_PWM_SET_ON_CMP,..... }
 * Return 				: enu_timer1Status_t {TIMER1_OK or TIMER1_NOK}
 */
enu_timer1Status_t Timer1_enuFastPWMInit(enu_pwm1Mode_t copy_enPWMMode)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <Timer1_enuFastPWMInit+0x6>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8b 83       	std	Y+3, r24	; 0x03
	enu_timer1Status_t errorStatus = TIMER1_OK;
    12fe:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t local_u8Temp;

	if(copy_enPWMMode < TIMER1_PWM_INVALID)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	e0 f4       	brcc	.+56     	; 0x133e <Timer1_enuFastPWMInit+0x4e>
	{
#if TIMER1_COM1_TYPE == TIMER1_COM1A

		local_u8Temp = TCCR1A_REG;
    1306:	ef e4       	ldi	r30, 0x4F	; 79
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	89 83       	std	Y+1, r24	; 0x01
		local_u8Temp &= PWM_MODE_CLR_COM1A_MSK;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	8f 73       	andi	r24, 0x3F	; 63
    1312:	89 83       	std	Y+1, r24	; 0x01
		local_u8Temp |= (copy_enPWMMode << TIMER1_PWM_MODE_COM1A_OFFSET);
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	00 24       	eor	r0, r0
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	07 94       	ror	r0
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	07 94       	ror	r0
    1328:	98 2f       	mov	r25, r24
    132a:	80 2d       	mov	r24, r0
    132c:	98 2f       	mov	r25, r24
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	89 2b       	or	r24, r25
    1332:	89 83       	std	Y+1, r24	; 0x01
		TCCR1A_REG = local_u8Temp;
    1334:	ef e4       	ldi	r30, 0x4F	; 79
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 83       	st	Z, r24
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Timer1_enuFastPWMInit+0x52>
		TCCR1A_REG = local_u8Temp;

#endif
	}else
	{
		errorStatus = TIMER1_NOK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	8a 83       	std	Y+2, r24	; 0x02
	}
	return errorStatus;
    1342:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <Timer1_enuPWMGenerate>:
 * Function Description : Generate PWM
 * Arguments			: copy_u8DutyCycle  {1 ~ 100}
 * Return 				: enu_timer1Status_t {TIMER1_OK or TIMER1_NOK}
 */
enu_timer1Status_t Timer1_enuPWMGenerate(Uint8_t copy_u8DutyCycle)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <Timer1_enuPWMGenerate+0x6>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	8a 83       	std	Y+2, r24	; 0x02
	enu_timer1Status_t errorStatus = TIMER1_OK;
    135c:	19 82       	std	Y+1, r1	; 0x01

	if( copy_u8DutyCycle > 0 && copy_u8DutyCycle <= 100)
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <Timer1_enuPWMGenerate+0x16>
    1364:	52 c0       	rjmp	.+164    	; 0x140a <Timer1_enuPWMGenerate+0xba>
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	85 36       	cpi	r24, 0x65	; 101
    136a:	08 f0       	brcs	.+2      	; 0x136e <Timer1_enuPWMGenerate+0x1e>
    136c:	4e c0       	rjmp	.+156    	; 0x140a <Timer1_enuPWMGenerate+0xba>
	{
#if TIMER1_COM1_TYPE == TIMER1_COM1A

		if(gen_PwmMode == TIMER1_FAST_PWM_8_0x00FF)
    136e:	80 91 f4 02 	lds	r24, 0x02F4
    1372:	85 30       	cpi	r24, 0x05	; 5
    1374:	89 f4       	brne	.+34     	; 0x1398 <Timer1_enuPWMGenerate+0x48>
		{
			OCR1A_REG = ((copy_u8DutyCycle * 256)/100)-1 ;
    1376:	ea e4       	ldi	r30, 0x4A	; 74
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	98 2f       	mov	r25, r24
    1382:	88 27       	eor	r24, r24
    1384:	24 e6       	ldi	r18, 0x64	; 100
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__divmodhi4>
    138e:	cb 01       	movw	r24, r22
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
    1396:	3b c0       	rjmp	.+118    	; 0x140e <Timer1_enuPWMGenerate+0xbe>
		}
		else if(gen_PwmMode == TIMER1_FAST_PWM_9_0x01FF)
    1398:	80 91 f4 02 	lds	r24, 0x02F4
    139c:	86 30       	cpi	r24, 0x06	; 6
    139e:	91 f4       	brne	.+36     	; 0x13c4 <Timer1_enuPWMGenerate+0x74>
		{
			OCR1A_REG = ((copy_u8DutyCycle * 512)/100)-1 ;
    13a0:	ea e4       	ldi	r30, 0x4A	; 74
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	98 2f       	mov	r25, r24
    13ac:	88 27       	eor	r24, r24
    13ae:	99 0f       	add	r25, r25
    13b0:	24 e6       	ldi	r18, 0x64	; 100
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__divmodhi4>
    13ba:	cb 01       	movw	r24, r22
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
    13c2:	25 c0       	rjmp	.+74     	; 0x140e <Timer1_enuPWMGenerate+0xbe>
		}
		else if(gen_PwmMode == TIMER1_FAST_PWM_10_0x03FF)
    13c4:	80 91 f4 02 	lds	r24, 0x02F4
    13c8:	87 30       	cpi	r24, 0x07	; 7
    13ca:	99 f4       	brne	.+38     	; 0x13f2 <Timer1_enuPWMGenerate+0xa2>
		{
			OCR1A_REG = ((copy_u8DutyCycle * 1024)/100)-1 ;
    13cc:	ea e4       	ldi	r30, 0x4A	; 74
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	98 2f       	mov	r25, r24
    13d8:	88 27       	eor	r24, r24
    13da:	99 0f       	add	r25, r25
    13dc:	99 0f       	add	r25, r25
    13de:	24 e6       	ldi	r18, 0x64	; 100
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	b9 01       	movw	r22, r18
    13e4:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__divmodhi4>
    13e8:	cb 01       	movw	r24, r22
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <Timer1_enuPWMGenerate+0xbe>
		}
		else if (gen_PwmMode == TIMER1_FAST_PWM_ICR1)
    13f2:	80 91 f4 02 	lds	r24, 0x02F4
    13f6:	8d 30       	cpi	r24, 0x0D	; 13
    13f8:	51 f4       	brne	.+20     	; 0x140e <Timer1_enuPWMGenerate+0xbe>
		{
			OCR1A_REG = copy_u8DutyCycle;
    13fa:	ea e4       	ldi	r30, 0x4A	; 74
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <Timer1_enuPWMGenerate+0xbe>
		}

#endif
	}else
	{
		errorStatus = TIMER1_NOK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
	}



	return errorStatus;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <Timer2_enuInit>:
 * Function Description : Initialize Timer2 to Fast PWM Mode
 * Arguments			: copy_enTmerMode  {TIMER2_OVF_MODE,TIMER2_FAST_PWM_MODE,..... }
 * Return 				: enu_timer2Status_t {TIMER2_OK or TIMER2_NOK}
 */
enu_timer2Status_t Timer2_enuInit (enu_timer2Mode_t copy_enTmerMode)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <Timer2_enuInit+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <Timer2_enuInit+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	8a 83       	std	Y+2, r24	; 0x02
	enu_timer2Status_t errorStatus = TIMER2_OK;
    1428:	19 82       	std	Y+1, r1	; 0x01

	if(copy_enTmerMode < TIMER2_TIMER_MODE_INVALID)
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	08 f0       	brcs	.+2      	; 0x1432 <Timer2_enuInit+0x18>
    1430:	61 c0       	rjmp	.+194    	; 0x14f4 <Timer2_enuInit+0xda>
	{
		switch (copy_enTmerMode)
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	21 f1       	breq	.+72     	; 0x148e <Timer2_enuInit+0x74>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <Timer2_enuInit+0x40>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 f0       	breq	.+24     	; 0x1470 <Timer2_enuInit+0x56>
    1458:	47 c0       	rjmp	.+142    	; 0x14e8 <Timer2_enuInit+0xce>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	21 f1       	breq	.+72     	; 0x14ac <Timer2_enuInit+0x92>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	71 f1       	breq	.+92     	; 0x14ca <Timer2_enuInit+0xb0>
    146e:	3c c0       	rjmp	.+120    	; 0x14e8 <Timer2_enuInit+0xce>
		{
		case TIMER2_OVF_MODE 				: ClrBit(TCCR2_REG, WGM21);ClrBit(TCCR2_REG, WGM20); break;
    1470:	a5 e4       	ldi	r26, 0x45	; 69
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e4       	ldi	r30, 0x45	; 69
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	87 7f       	andi	r24, 0xF7	; 247
    147c:	8c 93       	st	X, r24
    147e:	a5 e4       	ldi	r26, 0x45	; 69
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e4       	ldi	r30, 0x45	; 69
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 7b       	andi	r24, 0xBF	; 191
    148a:	8c 93       	st	X, r24
    148c:	2f c0       	rjmp	.+94     	; 0x14ec <Timer2_enuInit+0xd2>
		case TIMER2_PHASE_CORRECT_PWM_MODE 	: ClrBit(TCCR2_REG, WGM21);SetBit(TCCR2_REG, WGM20); break;
    148e:	a5 e4       	ldi	r26, 0x45	; 69
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e4       	ldi	r30, 0x45	; 69
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	87 7f       	andi	r24, 0xF7	; 247
    149a:	8c 93       	st	X, r24
    149c:	a5 e4       	ldi	r26, 0x45	; 69
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e4       	ldi	r30, 0x45	; 69
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 64       	ori	r24, 0x40	; 64
    14a8:	8c 93       	st	X, r24
    14aa:	20 c0       	rjmp	.+64     	; 0x14ec <Timer2_enuInit+0xd2>
		case TIMER2_CTC_MODE 				: SetBit(TCCR2_REG, WGM21);ClrBit(TCCR2_REG, WGM20); break;
    14ac:	a5 e4       	ldi	r26, 0x45	; 69
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e4       	ldi	r30, 0x45	; 69
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	8c 93       	st	X, r24
    14ba:	a5 e4       	ldi	r26, 0x45	; 69
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e4       	ldi	r30, 0x45	; 69
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7b       	andi	r24, 0xBF	; 191
    14c6:	8c 93       	st	X, r24
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <Timer2_enuInit+0xd2>
		case TIMER2_FAST_PWM_MODE 			: SetBit(TCCR2_REG, WGM21);SetBit(TCCR2_REG, WGM20); break;
    14ca:	a5 e4       	ldi	r26, 0x45	; 69
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e4       	ldi	r30, 0x45	; 69
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 60       	ori	r24, 0x08	; 8
    14d6:	8c 93       	st	X, r24
    14d8:	a5 e4       	ldi	r26, 0x45	; 69
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e4       	ldi	r30, 0x45	; 69
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <Timer2_enuInit+0xd2>
		default 					: errorStatus = TIMER2_NOK; break;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
		}
		TCNT2_REG = (Uint8_t)0;
    14ec:	e4 e4       	ldi	r30, 0x44	; 68
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Timer2_enuInit+0xde>
	}else
	{
		errorStatus = TIMER2_NOK;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
	}


	return errorStatus;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <Timer2_enuSetPrescallar>:
 * Function Description : Set Prescaller
 * Arguments			: Timer2_enuSetPrescallar  {TIMER2_PRE_1,TIMER2_PRE_256,TIMER2_PRE_256,..... }
 * Return 				: enu_timer2Status_t {TIMER2_OK or TIMER2_NOK}
 */
enu_timer2Status_t Timer2_enuSetPrescallar(enu_timerPrescalar_t copy_enTimerPrescaller)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <Timer2_enuSetPrescallar+0x6>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8b 83       	std	Y+3, r24	; 0x03
	enu_timer2Status_t errorStatus = TIMER2_OK;
    1516:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t temp_reg;
	if(copy_enTimerPrescaller < TIMER2_PRESCALR_INVALID)
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	80 f4       	brcc	.+32     	; 0x153e <Timer2_enuSetPrescallar+0x36>
	{
		temp_reg = TCCR2_REG;
    151e:	e5 e4       	ldi	r30, 0x45	; 69
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
		temp_reg &= PRESCALLER_CLR_MSK;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 7f       	andi	r24, 0xF8	; 248
    152a:	89 83       	std	Y+1, r24	; 0x01
		temp_reg |= copy_enTimerPrescaller << TIMER2_PRESCALLER_OFFSET;
    152c:	99 81       	ldd	r25, Y+1	; 0x01
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	89 2b       	or	r24, r25
    1532:	89 83       	std	Y+1, r24	; 0x01
		TCCR2_REG = temp_reg;
    1534:	e5 e4       	ldi	r30, 0x45	; 69
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <Timer2_enuSetPrescallar+0x3a>
	}
	else
	{
		errorStatus = TIMER2_NOK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8a 83       	std	Y+2, r24	; 0x02
	}


	return errorStatus;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <Timer2_enuFastPWMInit>:
 * Function Description : Set PWM Mode
 * Arguments			: copy_enPWMMode  {TIMER2_PWM_NORMAL,TIMER2_PWM_CLR_ON_CMP,TIMER2_PWM_SET_ON_CMP,..... }
 * Return 				: enu_timer2Status_t {TIMER2_OK or TIMER2_NOK}
 */
enu_timer2Status_t Timer2_enuFastPWMInit(enu_pwmMode_t copy_enPWMMode)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <Timer2_enuFastPWMInit+0x6>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	8b 83       	std	Y+3, r24	; 0x03
	enu_timer2Status_t errorStatus = TIMER2_OK;
    155e:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t local_u8Temp;

	if(copy_enPWMMode < TIMER2_PWM_INVALID)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	c8 f4       	brcc	.+50     	; 0x1598 <Timer2_enuFastPWMInit+0x48>
	{
		local_u8Temp = TCCR2_REG;
    1566:	e5 e4       	ldi	r30, 0x45	; 69
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 83       	std	Y+1, r24	; 0x01
		local_u8Temp &= PWM_MODE_CLR_MSK;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	8f 7c       	andi	r24, 0xCF	; 207
    1572:	89 83       	std	Y+1, r24	; 0x01
		local_u8Temp |= (copy_enPWMMode << TIMER2_PWM_MODE_OFFSET);
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	82 95       	swap	r24
    157c:	92 95       	swap	r25
    157e:	90 7f       	andi	r25, 0xF0	; 240
    1580:	98 27       	eor	r25, r24
    1582:	80 7f       	andi	r24, 0xF0	; 240
    1584:	98 27       	eor	r25, r24
    1586:	98 2f       	mov	r25, r24
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	89 2b       	or	r24, r25
    158c:	89 83       	std	Y+1, r24	; 0x01
		TCCR2_REG = local_u8Temp;
    158e:	e5 e4       	ldi	r30, 0x45	; 69
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	80 83       	st	Z, r24
    1596:	02 c0       	rjmp	.+4      	; 0x159c <Timer2_enuFastPWMInit+0x4c>
	}else
	{
		errorStatus = TIMER2_NOK;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return errorStatus;
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <Timer2_enuPWMGenerate>:
 * Function Description : Generate PWM
 * Arguments			: copy_u8DutyCycle  {1 ~ 100}
 * Return 				: enu_timer2Status_t {TIMER2_OK or TIMER2_NOK}
 */
enu_timer2Status_t Timer2_enuPWMGenerate(Uint8_t copy_u8DutyCycle)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <Timer2_enuPWMGenerate+0x6>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8a 83       	std	Y+2, r24	; 0x02
	enu_timer2Status_t errorStatus = TIMER2_OK;
    15b6:	19 82       	std	Y+1, r1	; 0x01

	if( copy_u8DutyCycle > 0 && copy_u8DutyCycle <= 100)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 23       	and	r24, r24
    15bc:	99 f0       	breq	.+38     	; 0x15e4 <Timer2_enuPWMGenerate+0x3a>
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	85 36       	cpi	r24, 0x65	; 101
    15c2:	80 f4       	brcc	.+32     	; 0x15e4 <Timer2_enuPWMGenerate+0x3a>
	{
		OCR2_REG = ((copy_u8DutyCycle * 256)/100)-1 ;
    15c4:	e3 e4       	ldi	r30, 0x43	; 67
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	98 2f       	mov	r25, r24
    15d0:	88 27       	eor	r24, r24
    15d2:	24 e6       	ldi	r18, 0x64	; 100
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	b9 01       	movw	r22, r18
    15d8:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__divmodhi4>
    15dc:	cb 01       	movw	r24, r22
    15de:	81 50       	subi	r24, 0x01	; 1
    15e0:	80 83       	st	Z, r24
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <Timer2_enuPWMGenerate+0x3e>
	}else
	{
		errorStatus = TIMER2_NOK;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <__vector_13>:


/********************************************************************************************************/
/*										ISR	     							*/
/********************************************************************************************************/
ISR(USART_RXC_vect) {
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    char receivedChar = UDR;
    161e:	ec e2       	ldi	r30, 0x2C	; 44
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	89 83       	std	Y+1, r24	; 0x01

    if (receivedChar == '\n' || receivedChar == '\r') {
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8a 30       	cpi	r24, 0x0A	; 10
    162a:	19 f0       	breq	.+6      	; 0x1632 <__vector_13+0x3e>
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	8d 30       	cpi	r24, 0x0D	; 13
    1630:	71 f4       	brne	.+28     	; 0x164e <__vector_13+0x5a>
        receivedString[stringIndex] = '\0'; // Null-terminate the string
    1632:	80 91 e3 02 	lds	r24, 0x02E3
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	fc 01       	movw	r30, r24
    163c:	eb 50       	subi	r30, 0x0B	; 11
    163e:	fd 4f       	sbci	r31, 0xFD	; 253
    1640:	10 82       	st	Z, r1
        stringReceived = 1; // Set the flag indicating that a string is received
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	80 93 e4 02 	sts	0x02E4, r24
        stringIndex = 0; // Reset the index for the next string
    1648:	10 92 e3 02 	sts	0x02E3, r1
    164c:	15 c0       	rjmp	.+42     	; 0x1678 <__vector_13+0x84>
    } else {
        receivedString[stringIndex] = receivedChar;
    164e:	80 91 e3 02 	lds	r24, 0x02E3
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	fc 01       	movw	r30, r24
    1658:	eb 50       	subi	r30, 0x0B	; 11
    165a:	fd 4f       	sbci	r31, 0xFD	; 253
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	80 83       	st	Z, r24
        stringIndex = (stringIndex + 1) % BUFFER_SIZE;
    1660:	80 91 e3 02 	lds	r24, 0x02E3
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	20 e4       	ldi	r18, 0x40	; 64
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	b9 01       	movw	r22, r18
    1670:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__divmodhi4>
    1674:	80 93 e3 02 	sts	0x02E3, r24
    }
}
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <MUART_enInit>:
/********************************************************************************************************/
/*									Function Implementation			     								*/
/********************************************************************************************************/
en_uartErrStat_t MUART_enInit(Uint32_t copy_u32BaudRate)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	28 97       	sbiw	r28, 0x08	; 8
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	6d 83       	std	Y+5, r22	; 0x05
    16b4:	7e 83       	std	Y+6, r23	; 0x06
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
	Uint8_t local_u8BitMask;
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    16ba:	1b 82       	std	Y+3, r1	; 0x03
	Uint16_t local_u16UBRRReg ;

	if(copy_u32BaudRate >= 2400 && copy_u32BaudRate <= 250000)
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	af 81       	ldd	r26, Y+7	; 0x07
    16c2:	b8 85       	ldd	r27, Y+8	; 0x08
    16c4:	80 36       	cpi	r24, 0x60	; 96
    16c6:	29 e0       	ldi	r18, 0x09	; 9
    16c8:	92 07       	cpc	r25, r18
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	a2 07       	cpc	r26, r18
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	b2 07       	cpc	r27, r18
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <MUART_enInit+0x38>
    16d4:	b3 c0       	rjmp	.+358    	; 0x183c <MUART_enInit+0x19e>
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	af 81       	ldd	r26, Y+7	; 0x07
    16dc:	b8 85       	ldd	r27, Y+8	; 0x08
    16de:	81 39       	cpi	r24, 0x91	; 145
    16e0:	20 ed       	ldi	r18, 0xD0	; 208
    16e2:	92 07       	cpc	r25, r18
    16e4:	23 e0       	ldi	r18, 0x03	; 3
    16e6:	a2 07       	cpc	r26, r18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	b2 07       	cpc	r27, r18
    16ec:	08 f0       	brcs	.+2      	; 0x16f0 <MUART_enInit+0x52>
    16ee:	a6 c0       	rjmp	.+332    	; 0x183c <MUART_enInit+0x19e>

		/******************************** Set UART speed and setting Baudrate **************************/

#if MUART_SPEED_TYPE == MUART_SINGLE_SPEED

		ClrBit(UCSRA_REG, U2X);
    16f0:	ab e2       	ldi	r26, 0x2B	; 43
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	eb e2       	ldi	r30, 0x2B	; 43
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8d 7f       	andi	r24, 0xFD	; 253
    16fc:	8c 93       	st	X, r24
		local_u16UBRRReg = ((F_CPU / (16*copy_u32BaudRate)) - 1);
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	af 81       	ldd	r26, Y+7	; 0x07
    1704:	b8 85       	ldd	r27, Y+8	; 0x08
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	aa 1f       	adc	r26, r26
    1724:	bb 1f       	adc	r27, r27
    1726:	9c 01       	movw	r18, r24
    1728:	ad 01       	movw	r20, r26
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	92 e1       	ldi	r25, 0x12	; 18
    172e:	aa e7       	ldi	r26, 0x7A	; 122
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 8d 29 	call	0x531a	; 0x531a <__udivmodsi4>
    173a:	da 01       	movw	r26, r20
    173c:	c9 01       	movw	r24, r18
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
		UBRRL_REG = (Uint8_t)local_u16UBRRReg;
    1744:	e9 e2       	ldi	r30, 0x29	; 41
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	80 83       	st	Z, r24
		UBRRH_REG = (Uint8_t)((0 << URSEL) | (local_u16UBRRReg >> 8) );
    174c:	e0 e4       	ldi	r30, 0x40	; 64
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	89 2f       	mov	r24, r25
    1756:	99 27       	eor	r25, r25
    1758:	80 83       	st	Z, r24

		SetBit(UCSRB_REG, RXEN);

#elif MUART_TX_RX == MUART_TX_RX_ENABLE

		SetBit(UCSRB_REG, TXEN);
    175a:	aa e2       	ldi	r26, 0x2A	; 42
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ea e2       	ldi	r30, 0x2A	; 42
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 60       	ori	r24, 0x08	; 8
    1766:	8c 93       	st	X, r24
		SetBit(UCSRB_REG, RXEN);
    1768:	aa e2       	ldi	r26, 0x2A	; 42
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ea e2       	ldi	r30, 0x2A	; 42
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	8c 93       	st	X, r24
#else
#error "MUART_TX_RX_INVALID"
#endif

		/******************************** Selecting Parity type **************************/
		UCSRC_REG &= 0b11001111;
    1776:	a0 e4       	ldi	r26, 0x40	; 64
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e0 e4       	ldi	r30, 0x40	; 64
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 7c       	andi	r24, 0xCF	; 207
    1782:	8c 93       	st	X, r24
		UCSRC_REG |= (1 << URSEL) | (uartInfo.enParityType << 4);
    1784:	a0 e4       	ldi	r26, 0x40	; 64
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e0 e4       	ldi	r30, 0x40	; 64
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	28 2f       	mov	r18, r24
    1790:	80 91 99 02 	lds	r24, 0x0299
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	82 95       	swap	r24
    179a:	92 95       	swap	r25
    179c:	90 7f       	andi	r25, 0xF0	; 240
    179e:	98 27       	eor	r25, r24
    17a0:	80 7f       	andi	r24, 0xF0	; 240
    17a2:	98 27       	eor	r25, r24
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	82 2b       	or	r24, r18
    17a8:	8c 93       	st	X, r24


		/********************** Selecting Data Length ************************************/
		UCSRC_REG &= 0b11111001;
    17aa:	a0 e4       	ldi	r26, 0x40	; 64
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e0 e4       	ldi	r30, 0x40	; 64
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	89 7f       	andi	r24, 0xF9	; 249
    17b6:	8c 93       	st	X, r24
		local_u8BitMask = (0b00000011 | uartInfo.enDataLength);
    17b8:	80 91 9a 02 	lds	r24, 0x029A
    17bc:	83 60       	ori	r24, 0x03	; 3
    17be:	8c 83       	std	Y+4, r24	; 0x04
		UCSRC_REG |= (1 << URSEL) | (1 << local_u8BitMask);
    17c0:	a0 e4       	ldi	r26, 0x40	; 64
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e0 e4       	ldi	r30, 0x40	; 64
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <MUART_enInit+0x13e>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	2a 95       	dec	r18
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <MUART_enInit+0x13a>
    17e0:	80 68       	ori	r24, 0x80	; 128
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
		local_u8BitMask = ( (0b00000100 | uartInfo.enDataLength) >> 2);
    17e6:	80 91 9a 02 	lds	r24, 0x029A
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	86 95       	lsr	r24
    17ee:	86 95       	lsr	r24
    17f0:	8c 83       	std	Y+4, r24	; 0x04
		UCSRB_REG &= 0b11111011;
    17f2:	aa e2       	ldi	r26, 0x2A	; 42
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ea e2       	ldi	r30, 0x2A	; 42
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	8c 93       	st	X, r24
		UCSRB_REG |= (local_u8BitMask << 2);
    1800:	aa e2       	ldi	r26, 0x2A	; 42
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ea e2       	ldi	r30, 0x2A	; 42
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	82 2b       	or	r24, r18
    181c:	8c 93       	st	X, r24

		/********************** Selecting Stop bit mode ************************************/
#if MUART_STOP_BIT == MUART_1_STOP_BIT

		ClrBit(UCSRC_REG, RUSBS);
    181e:	a0 e4       	ldi	r26, 0x40	; 64
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e0 e4       	ldi	r30, 0x40	; 64
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	87 7f       	andi	r24, 0xF7	; 247
    182a:	8c 93       	st	X, r24

		SetBit(UCSRC_REG, RUSBS);
#endif

		/********************** Asynchronous mode  ************************************/
		ClrBit(UCSRC_REG, UMSEL);
    182c:	a0 e4       	ldi	r26, 0x40	; 64
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e0 e4       	ldi	r30, 0x40	; 64
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8f 7b       	andi	r24, 0xBF	; 191
    1838:	8c 93       	st	X, r24
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <MUART_enInit+0x1a2>


	}else
	{
		local_enErrorStatus = MUART_NOK;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_enErrorStatus;
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1842:	28 96       	adiw	r28, 0x08	; 8
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <MUART_enSendData>:



en_uartErrStat_t MUART_enSendData(Uint8_t Copy_u8Data)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <MUART_enSendData+0x6>
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    1860:	19 82       	std	Y+1, r1	; 0x01

//	if (Copy_u8Data != 0)
//	{
		while( !(GetBit(UCSRA_REG, UDRE)) );
    1862:	eb e2       	ldi	r30, 0x2B	; 43
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	82 95       	swap	r24
    186a:	86 95       	lsr	r24
    186c:	87 70       	andi	r24, 0x07	; 7
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	90 70       	andi	r25, 0x00	; 0
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	a1 f3       	breq	.-24     	; 0x1862 <MUART_enSendData+0xe>
		UDR_REG = Copy_u8Data;
    187a:	ec e2       	ldi	r30, 0x2C	; 44
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
		while( !(GetBit(UCSRA_REG, TXC)) );
    1882:	eb e2       	ldi	r30, 0x2B	; 43
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	82 95       	swap	r24
    188a:	86 95       	lsr	r24
    188c:	86 95       	lsr	r24
    188e:	83 70       	andi	r24, 0x03	; 3
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	81 70       	andi	r24, 0x01	; 1
    1896:	90 70       	andi	r25, 0x00	; 0
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	99 f3       	breq	.-26     	; 0x1882 <MUART_enSendData+0x2e>

//	}else
//	{
//		local_enErrorStatus = MUART_NOK;
//	}
	return local_enErrorStatus;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <MUART_enRecieveData>:


en_uartErrStat_t MUART_enRecieveData(Uint8_t* Ref_u8Data)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <MUART_enRecieveData+0x6>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	9b 83       	std	Y+3, r25	; 0x03
    18b6:	8a 83       	std	Y+2, r24	; 0x02
	en_uartErrStat_t local_enErrorStatus = MUART_OK;
    18b8:	19 82       	std	Y+1, r1	; 0x01

	if (Ref_u8Data != NULL)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	a9 f0       	breq	.+42     	; 0x18ec <MUART_enRecieveData+0x44>
	{
		while( !(GetBit(UCSRA_REG, RXC)) );
    18c2:	eb e2       	ldi	r30, 0x2B	; 43
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	88 23       	and	r24, r24
    18ca:	dc f7       	brge	.-10     	; 0x18c2 <MUART_enRecieveData+0x1a>
		*Ref_u8Data= UDR_REG;
    18cc:	ec e2       	ldi	r30, 0x2C	; 44
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	ea 81       	ldd	r30, Y+2	; 0x02
    18d4:	fb 81       	ldd	r31, Y+3	; 0x03
    18d6:	80 83       	st	Z, r24

		while( (UDR_REG != '\r') && (gl_u8_receive_mode == CHAR_RECEIVE) );
    18d8:	ec e2       	ldi	r30, 0x2C	; 44
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8d 30       	cpi	r24, 0x0D	; 13
    18e0:	39 f0       	breq	.+14     	; 0x18f0 <MUART_enRecieveData+0x48>
    18e2:	80 91 e2 02 	lds	r24, 0x02E2
    18e6:	88 23       	and	r24, r24
    18e8:	b9 f3       	breq	.-18     	; 0x18d8 <MUART_enRecieveData+0x30>
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MUART_enRecieveData+0x48>

	}else
	{
		local_enErrorStatus = MUART_NOK;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_enErrorStatus;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <MUART_sendSTRING>:


void MUART_sendSTRING(const Uint8_t * str)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <MUART_sendSTRING+0x6>
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <MUART_sendSTRING+0x24>
	//Uint8_t COUNTER = 0;
	while(*str != '\0')
	{
		(void)MUART_enSendData(*str);
    190e:	e9 81       	ldd	r30, Y+1	; 0x01
    1910:	fa 81       	ldd	r31, Y+2	; 0x02
    1912:	80 81       	ld	r24, Z
    1914:	0e 94 2a 0c 	call	0x1854	; 0x1854 <MUART_enSendData>
		str++;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01


void MUART_sendSTRING(const Uint8_t * str)
{
	//Uint8_t COUNTER = 0;
	while(*str != '\0')
    1922:	e9 81       	ldd	r30, Y+1	; 0x01
    1924:	fa 81       	ldd	r31, Y+2	; 0x02
    1926:	80 81       	ld	r24, Z
    1928:	88 23       	and	r24, r24
    192a:	89 f7       	brne	.-30     	; 0x190e <MUART_sendSTRING+0x10>
	{
		(void)MUART_enSendData(*str);
		str++;
	}
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <MUART_receiveSTRING>:
void MUART_receiveSTRING(Uint8_t * str ,Uint8_t size )
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <MUART_receiveSTRING+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <MUART_receiveSTRING+0x8>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	6d 83       	std	Y+5, r22	; 0x05
	Uint8_t COUNTER = 0;
    194a:	19 82       	std	Y+1, r1	; 0x01
	Uint8_t Data;
	gl_u8_receive_mode = STRING_RECEIVE;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 e2 02 	sts	0x02E2, r24
    1952:	1c c0       	rjmp	.+56     	; 0x198c <MUART_receiveSTRING+0x56>
	while(COUNTER < size-1)
	{
		(void)MUART_enRecieveData(&Data);
    1954:	ce 01       	movw	r24, r28
    1956:	02 96       	adiw	r24, 0x02	; 2
    1958:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <MUART_enRecieveData>

		str[COUNTER]= Data;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	fc 01       	movw	r30, r24
    1968:	e2 0f       	add	r30, r18
    196a:	f3 1f       	adc	r31, r19
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	80 81       	ld	r24, Z
    1982:	8d 30       	cpi	r24, 0x0D	; 13
    1984:	69 f0       	breq	.+26     	; 0x19a0 <MUART_receiveSTRING+0x6a>
//		(void)MUART_enSendData(str[COUNTER]);
		COUNTER++;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	89 83       	std	Y+1, r24	; 0x01
void MUART_receiveSTRING(Uint8_t * str ,Uint8_t size )
{
	Uint8_t COUNTER = 0;
	Uint8_t Data;
	gl_u8_receive_mode = STRING_RECEIVE;
	while(COUNTER < size-1)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	28 17       	cp	r18, r24
    199c:	39 07       	cpc	r19, r25
    199e:	d4 f2       	brlt	.-76     	; 0x1954 <MUART_receiveSTRING+0x1e>
		str[COUNTER]= Data;
		if(str[COUNTER] == ENTER_KEY)break;
//		(void)MUART_enSendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = '\0';
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	fc 01       	movw	r30, r24
    19ac:	e2 0f       	add	r30, r18
    19ae:	f3 1f       	adc	r31, r19
    19b0:	10 82       	st	Z, r1
	gl_u8_receive_mode = CHAR_RECEIVE;
    19b2:	10 92 e2 02 	sts	0x02E2, r1
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <enuTimer2_init>:

/*************************************************************************************************************
 * 							Function Implementation
 ************************************************************************************************************/
enu_timerStatus_t enuTimer2_init (enu_timerMode_t enTimerMode)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <enuTimer2_init+0x6>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <enuTimer2_init+0x8>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	enu_timerStatus_t errorStatus = TIMER_OK;
    19d4:	19 82       	std	Y+1, r1	; 0x01

	if(enTimerMode < TIMER_MODE_INVALID)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	08 f0       	brcs	.+2      	; 0x19de <enuTimer2_init+0x18>
    19dc:	61 c0       	rjmp	.+194    	; 0x1aa0 <enuTimer2_init+0xda>
	{
		TCNT2_REG = 0;
    19de:	e4 e4       	ldi	r30, 0x44	; 68
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	10 82       	st	Z, r1
		switch (enTimerMode)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3c 83       	std	Y+4, r19	; 0x04
    19ec:	2b 83       	std	Y+3, r18	; 0x03
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	91 05       	cpc	r25, r1
    19f6:	21 f1       	breq	.+72     	; 0x1a40 <enuTimer2_init+0x7a>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	31 05       	cpc	r19, r1
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <enuTimer2_init+0x46>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <enuTimer2_init+0x5c>
    1a0a:	47 c0       	rjmp	.+142    	; 0x1a9a <enuTimer2_init+0xd4>
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	21 f1       	breq	.+72     	; 0x1a5e <enuTimer2_init+0x98>
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	83 30       	cpi	r24, 0x03	; 3
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	71 f1       	breq	.+92     	; 0x1a7c <enuTimer2_init+0xb6>
    1a20:	3c c0       	rjmp	.+120    	; 0x1a9a <enuTimer2_init+0xd4>
		{
		case OVF_MODE 				: ClrBit(TCCR2_REG, WGM01);ClrBit(TCCR2_REG, WGM00); break;
    1a22:	a5 e4       	ldi	r26, 0x45	; 69
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e4       	ldi	r30, 0x45	; 69
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
    1a2e:	8c 93       	st	X, r24
    1a30:	a5 e4       	ldi	r26, 0x45	; 69
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e4       	ldi	r30, 0x45	; 69
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7b       	andi	r24, 0xBF	; 191
    1a3c:	8c 93       	st	X, r24
    1a3e:	32 c0       	rjmp	.+100    	; 0x1aa4 <enuTimer2_init+0xde>
		case PHASE_CORRECT_PWM_MODE : ClrBit(TCCR2_REG, WGM01);SetBit(TCCR2_REG, WGM00); break;
    1a40:	a5 e4       	ldi	r26, 0x45	; 69
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e4       	ldi	r30, 0x45	; 69
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	87 7f       	andi	r24, 0xF7	; 247
    1a4c:	8c 93       	st	X, r24
    1a4e:	a5 e4       	ldi	r26, 0x45	; 69
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e4       	ldi	r30, 0x45	; 69
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	8c 93       	st	X, r24
    1a5c:	23 c0       	rjmp	.+70     	; 0x1aa4 <enuTimer2_init+0xde>
		case CTC_MODE 				: SetBit(TCCR2_REG, WGM01);ClrBit(TCCR2_REG, WGM00); break;
    1a5e:	a5 e4       	ldi	r26, 0x45	; 69
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e4       	ldi	r30, 0x45	; 69
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 60       	ori	r24, 0x08	; 8
    1a6a:	8c 93       	st	X, r24
    1a6c:	a5 e4       	ldi	r26, 0x45	; 69
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e4       	ldi	r30, 0x45	; 69
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 7b       	andi	r24, 0xBF	; 191
    1a78:	8c 93       	st	X, r24
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <enuTimer2_init+0xde>
		case FAST_PWM_MODE 			: SetBit(TCCR2_REG, WGM01);SetBit(TCCR2_REG, WGM00); break;
    1a7c:	a5 e4       	ldi	r26, 0x45	; 69
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e4       	ldi	r30, 0x45	; 69
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 60       	ori	r24, 0x08	; 8
    1a88:	8c 93       	st	X, r24
    1a8a:	a5 e4       	ldi	r26, 0x45	; 69
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e4       	ldi	r30, 0x45	; 69
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	80 64       	ori	r24, 0x40	; 64
    1a96:	8c 93       	st	X, r24
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <enuTimer2_init+0xde>
		default 					: errorStatus = TIMER_NOK; break;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <enuTimer2_init+0xde>


	}
	else
	{
		errorStatus = TIMER_NOK;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStatus;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <u8Timer2_setPrescallar>:


/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setPrescallar(enu_timerPrescalar_t Copy_enPrescal)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <u8Timer2_setPrescallar+0x6>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
	enu_timerStatus_t errorStatus = TIMER_OK;
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t temp_reg;
	if(Copy_enPrescal < TIMER_PRESCALR_INVALID)
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	8a 30       	cpi	r24, 0x0A	; 10
    1ac8:	e0 f4       	brcc	.+56     	; 0x1b02 <u8Timer2_setPrescallar+0x4e>
	{
		global_prescaller = Copy_enPrescal;
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	80 93 ea 02 	sts	0x02EA, r24
		if (global_timerStatus == RUNNING)
    1ad0:	80 91 eb 02 	lds	r24, 0x02EB
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	b9 f4       	brne	.+46     	; 0x1b06 <u8Timer2_setPrescallar+0x52>
		{
			temp_reg = TCCR2_REG;		 // read
    1ad8:	e5 e4       	ldi	r30, 0x45	; 69
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
			temp_reg &= PRESCALLER_CLR_MSK;  // mod
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	88 7f       	andi	r24, 0xF8	; 248
    1ae4:	89 83       	std	Y+1, r24	; 0x01
			temp_reg |=  global_prescaller << PRESCALLER_OFFSET; // mod
    1ae6:	90 91 ea 02 	lds	r25, 0x02EA
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	89 2b       	or	r24, r25
    1aee:	89 83       	std	Y+1, r24	; 0x01
			TCCR2_REG |= temp_reg;		// write
    1af0:	a5 e4       	ldi	r26, 0x45	; 69
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e4       	ldi	r30, 0x45	; 69
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	90 81       	ld	r25, Z
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	89 2b       	or	r24, r25
    1afe:	8c 93       	st	X, r24
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <u8Timer2_setPrescallar+0x52>
			/* do nothing */
		}
	}
	else
	{
		errorStatus = TIMER_NOK;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	8a 83       	std	Y+2, r24	; 0x02
	}


	return errorStatus;
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <vidTimer2_OvfIrqEnable>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_OvfIrqEnable(void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1b1e:	19 82       	std	Y+1, r1	; 0x01

	SetBit(TIFR_REG, 6);
    1b20:	a8 e5       	ldi	r26, 0x58	; 88
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e8 e5       	ldi	r30, 0x58	; 88
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 64       	ori	r24, 0x40	; 64
    1b2c:	8c 93       	st	X, r24
	SetBit(TIMSK_REG, TOIE2);
    1b2e:	a9 e5       	ldi	r26, 0x59	; 89
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 64       	ori	r24, 0x40	; 64
    1b3a:	8c 93       	st	X, r24
//	SetBit(SREG_REG, 7);

	return errorStatus;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <vidTimer2_OvfIrqDisable>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_OvfIrqDisable(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1b50:	19 82       	std	Y+1, r1	; 0x01

	ClrBit(TIMSK_REG, TOIE2);
    1b52:	a9 e5       	ldi	r26, 0x59	; 89
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e9 e5       	ldi	r30, 0x59	; 89
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8f 7b       	andi	r24, 0xBF	; 191
    1b5e:	8c 93       	st	X, r24

	return errorStatus;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <vidTimer2_start>:
//}


/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1b74:	19 82       	std	Y+1, r1	; 0x01

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    1b76:	a5 e4       	ldi	r26, 0x45	; 69
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e4       	ldi	r30, 0x45	; 69
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	90 81       	ld	r25, Z
    1b80:	80 91 ea 02 	lds	r24, 0x02EA
    1b84:	89 2b       	or	r24, r25
    1b86:	8c 93       	st	X, r24
	global_timerStatus  = RUNNING;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 93 eb 02 	sts	0x02EB, r24

	return errorStatus;
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <vidTimer2_stop>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1ba2:	19 82       	std	Y+1, r1	; 0x01

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    1ba4:	a5 e4       	ldi	r26, 0x45	; 69
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e5 e4       	ldi	r30, 0x45	; 69
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 7f       	andi	r24, 0xF8	; 248
    1bb0:	8c 93       	st	X, r24
	global_timerStatus = STOPPED;
    1bb2:	10 92 eb 02 	sts	0x02EB, r1

	return errorStatus;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	6a 87       	std	Y+10, r22	; 0x0a
    1bd6:	7b 87       	std	Y+11, r23	; 0x0b
    1bd8:	8c 87       	std	Y+12, r24	; 0x0c
    1bda:	9d 87       	std	Y+13, r25	; 0x0d
	enu_timerStatus_t errorStatus = TIMER_OK;
    1bdc:	19 86       	std	Y+9, r1	; 0x09
	Uint32_t desired_ticks;
	Float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    1bde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be2:	ac 85       	ldd	r26, Y+12	; 0x0c
    1be4:	bd 85       	ldd	r27, Y+13	; 0x0d
    1be6:	88 38       	cpi	r24, 0x88	; 136
    1be8:	23 e1       	ldi	r18, 0x13	; 19
    1bea:	92 07       	cpc	r25, r18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	a2 07       	cpc	r26, r18
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	b2 07       	cpc	r27, r18
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <u8Timer2_setTime_ms+0x38>
    1bf6:	a2 c0       	rjmp	.+324    	; 0x1d3c <u8Timer2_setTime_ms+0x17c>
	{
		tick_time_ms = (Float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    1bf8:	80 91 ea 02 	lds	r24, 0x02EA
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	fc 01       	movw	r30, r24
    1c06:	e4 56       	subi	r30, 0x64	; 100
    1c08:	fd 4f       	sbci	r31, 0xFD	; 253
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	cc 01       	movw	r24, r24
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	55 e4       	ldi	r21, 0x45	; 69
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	ab 83       	std	Y+3, r26	; 0x03
    1c3a:	bc 83       	std	Y+4, r27	; 0x04
		desired_ticks = u32_time_ms / tick_time_ms;
    1c3c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c3e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c44:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	29 81       	ldd	r18, Y+1	; 0x01
    1c52:	3a 81       	ldd	r19, Y+2	; 0x02
    1c54:	4b 81       	ldd	r20, Y+3	; 0x03
    1c56:	5c 81       	ldd	r21, Y+4	; 0x04
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	af 83       	std	Y+7, r26	; 0x07
    1c72:	b8 87       	std	Y+8, r27	; 0x08

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	af 81       	ldd	r26, Y+7	; 0x07
    1c7a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c7c:	80 30       	cpi	r24, 0x00	; 0
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	92 07       	cpc	r25, r18
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	a2 07       	cpc	r26, r18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	b2 07       	cpc	r27, r18
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <u8Timer2_setTime_ms+0xd4>
		{
			global_ovf = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 9b 02 	sts	0x029B, r24
    1c92:	56 c0       	rjmp	.+172    	; 0x1d40 <u8Timer2_setTime_ms+0x180>
		}
		else if(desired_ticks < OVF_TICKS)
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	af 81       	ldd	r26, Y+7	; 0x07
    1c9a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	a1 05       	cpc	r26, r1
    1ca2:	b1 05       	cpc	r27, r1
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <u8Timer2_setTime_ms+0xe8>
    1ca6:	a8 f4       	brcc	.+42     	; 0x1cd2 <u8Timer2_setTime_ms+0x112>
		{
			preload = OVF_TICKS - desired_ticks;
    1ca8:	2d 81       	ldd	r18, Y+5	; 0x05
    1caa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	82 1b       	sub	r24, r18
    1cb2:	93 0b       	sbc	r25, r19
    1cb4:	90 93 e6 02 	sts	0x02E6, r25
    1cb8:	80 93 e5 02 	sts	0x02E5, r24
			TCNT2_REG = preload;
    1cbc:	e4 e4       	ldi	r30, 0x44	; 68
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 91 e5 02 	lds	r24, 0x02E5
    1cc4:	90 91 e6 02 	lds	r25, 0x02E6
    1cc8:	80 83       	st	Z, r24
			global_ovf = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 9b 02 	sts	0x029B, r24
    1cd0:	37 c0       	rjmp	.+110    	; 0x1d40 <u8Timer2_setTime_ms+0x180>
		}
		else if(desired_ticks > OVF_TICKS)
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	af 81       	ldd	r26, Y+7	; 0x07
    1cd8:	b8 85       	ldd	r27, Y+8	; 0x08
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	21 e0       	ldi	r18, 0x01	; 1
    1cde:	92 07       	cpc	r25, r18
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	a2 07       	cpc	r26, r18
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	b2 07       	cpc	r27, r18
    1ce8:	58 f1       	brcs	.+86     	; 0x1d40 <u8Timer2_setTime_ms+0x180>
		{
			global_ovf = (Uint8_t)(desired_ticks / OVF_TICKS);
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	af 81       	ldd	r26, Y+7	; 0x07
    1cf0:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf2:	89 2f       	mov	r24, r25
    1cf4:	9a 2f       	mov	r25, r26
    1cf6:	ab 2f       	mov	r26, r27
    1cf8:	bb 27       	eor	r27, r27
    1cfa:	80 93 9b 02 	sts	0x029B, r24
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	9c 01       	movw	r18, r24
    1d04:	30 70       	andi	r19, 0x00	; 0
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	82 1b       	sub	r24, r18
    1d0c:	93 0b       	sbc	r25, r19
    1d0e:	90 93 e6 02 	sts	0x02E6, r25
    1d12:	80 93 e5 02 	sts	0x02E5, r24
			TCNT2_REG = preload;
    1d16:	e4 e4       	ldi	r30, 0x44	; 68
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 91 e5 02 	lds	r24, 0x02E5
    1d1e:	90 91 e6 02 	lds	r25, 0x02E6
    1d22:	80 83       	st	Z, r24
			if (preload > 0U)
    1d24:	80 91 e5 02 	lds	r24, 0x02E5
    1d28:	90 91 e6 02 	lds	r25, 0x02E6
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	41 f0       	breq	.+16     	; 0x1d40 <u8Timer2_setTime_ms+0x180>
			{
				global_ovf++;
    1d30:	80 91 9b 02 	lds	r24, 0x029B
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	80 93 9b 02 	sts	0x029B, r24
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <u8Timer2_setTime_ms+0x180>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 87       	std	Y+9, r24	; 0x09
		}


		return errorStatus;
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
	}
    1d42:	2d 96       	adiw	r28, 0x0d	; 13
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <MTIMER2_vidSynch>:

/*************************************************************************************************************/

void MTIMER2_vidSynch(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	Uint8_t counter = 0;
    1d5e:	19 82       	std	Y+1, r1	; 0x01
    1d60:	17 c0       	rjmp	.+46     	; 0x1d90 <MTIMER2_vidSynch+0x3c>


	while(counter != global_ovf)
	{

		while(! GetBit(TIFR_REG, TOV2) );
    1d62:	e8 e5       	ldi	r30, 0x58	; 88
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	82 95       	swap	r24
    1d6a:	86 95       	lsr	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	83 70       	andi	r24, 0x03	; 3
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	99 f3       	breq	.-26     	; 0x1d62 <MTIMER2_vidSynch+0xe>
		SetBit(TIFR_REG, TOV2);
    1d7c:	a8 e5       	ldi	r26, 0x58	; 88
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e5       	ldi	r30, 0x58	; 88
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 64       	ori	r24, 0x40	; 64
    1d88:	8c 93       	st	X, r24
		counter++;
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 83       	std	Y+1, r24	; 0x01
void MTIMER2_vidSynch(void)
{
	Uint8_t counter = 0;


	while(counter != global_ovf)
    1d90:	90 91 9b 02 	lds	r25, 0x029B
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	89 17       	cp	r24, r25
    1d98:	21 f7       	brne	.-56     	; 0x1d62 <MTIMER2_vidSynch+0xe>
		counter++;
	}



}
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <vidTimer2_setcbf_OVF>:


/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <vidTimer2_setcbf_OVF+0x6>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
	if (cbf != NULL)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <vidTimer2_setcbf_OVF+0x22>
	{
		globalCallFunc = cbf;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	90 93 e8 02 	sts	0x02E8, r25
    1dc0:	80 93 e7 02 	sts	0x02E7, r24
	}
	return;
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <MTIMER_vidResetTCNT>:



void MTIMER_vidResetTCNT(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	TCNT2_REG = 0;
    1dd6:	e4 e4       	ldi	r30, 0x44	; 68
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	10 82       	st	Z, r1
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <MTIMER_u8GetTCNT>:
Uint8_t MTIMER_u8GetTCNT(void)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	return TCNT2_REG;
    1dea:	e4 e4       	ldi	r30, 0x44	; 68
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <__vector_5>:
/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	2f 93       	push	r18
    1e02:	3f 93       	push	r19
    1e04:	4f 93       	push	r20
    1e06:	5f 93       	push	r21
    1e08:	6f 93       	push	r22
    1e0a:	7f 93       	push	r23
    1e0c:	8f 93       	push	r24
    1e0e:	9f 93       	push	r25
    1e10:	af 93       	push	r26
    1e12:	bf 93       	push	r27
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	static Uint8_t counter = 0;
	counter++;
    1e20:	80 91 e9 02 	lds	r24, 0x02E9
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	80 93 e9 02 	sts	0x02E9, r24
	if(counter == global_ovf)
    1e2a:	90 91 e9 02 	lds	r25, 0x02E9
    1e2e:	80 91 9b 02 	lds	r24, 0x029B
    1e32:	98 17       	cp	r25, r24
    1e34:	69 f4       	brne	.+26     	; 0x1e50 <__vector_5+0x5a>
	{
		if (globalCallFunc != NULL)
    1e36:	80 91 e7 02 	lds	r24, 0x02E7
    1e3a:	90 91 e8 02 	lds	r25, 0x02E8
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	39 f0       	breq	.+14     	; 0x1e50 <__vector_5+0x5a>
		{
			counter = 0;
    1e42:	10 92 e9 02 	sts	0x02E9, r1

			globalCallFunc();
    1e46:	e0 91 e7 02 	lds	r30, 0x02E7
    1e4a:	f0 91 e8 02 	lds	r31, 0x02E8
    1e4e:	09 95       	icall
//			TCNT2_REG = preload;
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	bf 91       	pop	r27
    1e5a:	af 91       	pop	r26
    1e5c:	9f 91       	pop	r25
    1e5e:	8f 91       	pop	r24
    1e60:	7f 91       	pop	r23
    1e62:	6f 91       	pop	r22
    1e64:	5f 91       	pop	r21
    1e66:	4f 91       	pop	r20
    1e68:	3f 91       	pop	r19
    1e6a:	2f 91       	pop	r18
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <MSPI_enMasterInit>:




enu_status_t MSPI_enMasterInit(enu_spiPrescalar_t copy_enPrecalar)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <MSPI_enMasterInit+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <MSPI_enMasterInit+0x8>
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
	enu_status_t errStatus = SPI_OK;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
	if (copy_enPrecalar < SPI_PRE_INVALID)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <MSPI_enMasterInit+0x1a>
    1e8e:	13 c1       	rjmp	.+550    	; 0x20b6 <MSPI_enMasterInit+0x240>
	{
		SetBit(SPCR_REG, MSTR); // enable master mode
    1e90:	ad e2       	ldi	r26, 0x2D	; 45
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ed e2       	ldi	r30, 0x2D	; 45
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 61       	ori	r24, 0x10	; 16
    1e9c:	8c 93       	st	X, r24
		switch(copy_enPrecalar)
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3c 83       	std	Y+4, r19	; 0x04
    1ea6:	2b 83       	std	Y+3, r18	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <MSPI_enMasterInit+0x3e>
    1eb2:	70 c0       	rjmp	.+224    	; 0x1f94 <MSPI_enMasterInit+0x11e>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	24 30       	cpi	r18, 0x04	; 4
    1eba:	31 05       	cpc	r19, r1
    1ebc:	84 f4       	brge	.+32     	; 0x1ede <MSPI_enMasterInit+0x68>
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	d1 f1       	breq	.+116    	; 0x1f3c <MSPI_enMasterInit+0xc6>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <MSPI_enMasterInit+0x5e>
    1ed2:	4a c0       	rjmp	.+148    	; 0x1f68 <MSPI_enMasterInit+0xf2>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	d1 f0       	breq	.+52     	; 0x1f10 <MSPI_enMasterInit+0x9a>
    1edc:	c8 c0       	rjmp	.+400    	; 0x206e <MSPI_enMasterInit+0x1f8>
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	25 30       	cpi	r18, 0x05	; 5
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <MSPI_enMasterInit+0x74>
    1ee8:	81 c0       	rjmp	.+258    	; 0x1fec <MSPI_enMasterInit+0x176>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	85 30       	cpi	r24, 0x05	; 5
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	0c f4       	brge	.+2      	; 0x1ef6 <MSPI_enMasterInit+0x80>
    1ef4:	65 c0       	rjmp	.+202    	; 0x1fc0 <MSPI_enMasterInit+0x14a>
    1ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef8:	3c 81       	ldd	r19, Y+4	; 0x04
    1efa:	26 30       	cpi	r18, 0x06	; 6
    1efc:	31 05       	cpc	r19, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <MSPI_enMasterInit+0x8c>
    1f00:	8b c0       	rjmp	.+278    	; 0x2018 <MSPI_enMasterInit+0x1a2>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	87 30       	cpi	r24, 0x07	; 7
    1f08:	91 05       	cpc	r25, r1
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <MSPI_enMasterInit+0x98>
    1f0c:	9b c0       	rjmp	.+310    	; 0x2044 <MSPI_enMasterInit+0x1ce>
    1f0e:	af c0       	rjmp	.+350    	; 0x206e <MSPI_enMasterInit+0x1f8>
		{
			case SPI_PRE_4	: 	ClrBit(SPSR_REG, SPI2X);ClrBit(SPCR_REG, SPR1);ClrBit(SPCR_REG, SPR0); break;
    1f10:	ae e2       	ldi	r26, 0x2E	; 46
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ee e2       	ldi	r30, 0x2E	; 46
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8e 7f       	andi	r24, 0xFE	; 254
    1f1c:	8c 93       	st	X, r24
    1f1e:	ad e2       	ldi	r26, 0x2D	; 45
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ed e2       	ldi	r30, 0x2D	; 45
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	8d 7f       	andi	r24, 0xFD	; 253
    1f2a:	8c 93       	st	X, r24
    1f2c:	ad e2       	ldi	r26, 0x2D	; 45
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ed e2       	ldi	r30, 0x2D	; 45
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	8e 7f       	andi	r24, 0xFE	; 254
    1f38:	8c 93       	st	X, r24
    1f3a:	99 c0       	rjmp	.+306    	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PRE_16	:   ClrBit(SPSR_REG, SPI2X);ClrBit(SPCR_REG, SPR1);SetBit(SPCR_REG, SPR0); break;
    1f3c:	ae e2       	ldi	r26, 0x2E	; 46
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	ee e2       	ldi	r30, 0x2E	; 46
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8e 7f       	andi	r24, 0xFE	; 254
    1f48:	8c 93       	st	X, r24
    1f4a:	ad e2       	ldi	r26, 0x2D	; 45
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	ed e2       	ldi	r30, 0x2D	; 45
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8d 7f       	andi	r24, 0xFD	; 253
    1f56:	8c 93       	st	X, r24
    1f58:	ad e2       	ldi	r26, 0x2D	; 45
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	ed e2       	ldi	r30, 0x2D	; 45
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	81 60       	ori	r24, 0x01	; 1
    1f64:	8c 93       	st	X, r24
    1f66:	83 c0       	rjmp	.+262    	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PRE_64	: 	ClrBit(SPSR_REG, SPI2X);SetBit(SPCR_REG, SPR1);ClrBit(SPCR_REG, SPR0); break;
    1f68:	ae e2       	ldi	r26, 0x2E	; 46
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ee e2       	ldi	r30, 0x2E	; 46
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	8c 93       	st	X, r24
    1f76:	ad e2       	ldi	r26, 0x2D	; 45
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ed e2       	ldi	r30, 0x2D	; 45
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	82 60       	ori	r24, 0x02	; 2
    1f82:	8c 93       	st	X, r24
    1f84:	ad e2       	ldi	r26, 0x2D	; 45
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ed e2       	ldi	r30, 0x2D	; 45
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8e 7f       	andi	r24, 0xFE	; 254
    1f90:	8c 93       	st	X, r24
    1f92:	6d c0       	rjmp	.+218    	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PRE_128: 	ClrBit(SPSR_REG, SPI2X);SetBit(SPCR_REG, SPR1);SetBit(SPCR_REG, SPR0); break;
    1f94:	ae e2       	ldi	r26, 0x2E	; 46
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ee e2       	ldi	r30, 0x2E	; 46
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8e 7f       	andi	r24, 0xFE	; 254
    1fa0:	8c 93       	st	X, r24
    1fa2:	ad e2       	ldi	r26, 0x2D	; 45
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ed e2       	ldi	r30, 0x2D	; 45
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	82 60       	ori	r24, 0x02	; 2
    1fae:	8c 93       	st	X, r24
    1fb0:	ad e2       	ldi	r26, 0x2D	; 45
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ed e2       	ldi	r30, 0x2D	; 45
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	81 60       	ori	r24, 0x01	; 1
    1fbc:	8c 93       	st	X, r24
    1fbe:	57 c0       	rjmp	.+174    	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PREx2_2	: 	SetBit(SPSR_REG, SPI2X);ClrBit(SPCR_REG, SPR1);ClrBit(SPCR_REG, SPR0); break;
    1fc0:	ae e2       	ldi	r26, 0x2E	; 46
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	ee e2       	ldi	r30, 0x2E	; 46
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	8c 93       	st	X, r24
    1fce:	ad e2       	ldi	r26, 0x2D	; 45
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	ed e2       	ldi	r30, 0x2D	; 45
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8d 7f       	andi	r24, 0xFD	; 253
    1fda:	8c 93       	st	X, r24
    1fdc:	ad e2       	ldi	r26, 0x2D	; 45
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	ed e2       	ldi	r30, 0x2D	; 45
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8e 7f       	andi	r24, 0xFE	; 254
    1fe8:	8c 93       	st	X, r24
    1fea:	41 c0       	rjmp	.+130    	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PREx2_8	: 	SetBit(SPSR_REG, SPI2X);ClrBit(SPCR_REG, SPR1);SetBit(SPCR_REG, SPR0); break;
    1fec:	ae e2       	ldi	r26, 0x2E	; 46
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	ee e2       	ldi	r30, 0x2E	; 46
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	81 60       	ori	r24, 0x01	; 1
    1ff8:	8c 93       	st	X, r24
    1ffa:	ad e2       	ldi	r26, 0x2D	; 45
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ed e2       	ldi	r30, 0x2D	; 45
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8d 7f       	andi	r24, 0xFD	; 253
    2006:	8c 93       	st	X, r24
    2008:	ad e2       	ldi	r26, 0x2D	; 45
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	ed e2       	ldi	r30, 0x2D	; 45
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	81 60       	ori	r24, 0x01	; 1
    2014:	8c 93       	st	X, r24
    2016:	2b c0       	rjmp	.+86     	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PREx2_32	: 	SetBit(SPSR_REG, SPI2X);SetBit(SPCR_REG, SPR1);ClrBit(SPCR_REG, SPR0); break;
    2018:	ae e2       	ldi	r26, 0x2E	; 46
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ee e2       	ldi	r30, 0x2E	; 46
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	81 60       	ori	r24, 0x01	; 1
    2024:	8c 93       	st	X, r24
    2026:	ad e2       	ldi	r26, 0x2D	; 45
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ed e2       	ldi	r30, 0x2D	; 45
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	82 60       	ori	r24, 0x02	; 2
    2032:	8c 93       	st	X, r24
    2034:	ad e2       	ldi	r26, 0x2D	; 45
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ed e2       	ldi	r30, 0x2D	; 45
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8e 7f       	andi	r24, 0xFE	; 254
    2040:	8c 93       	st	X, r24
    2042:	15 c0       	rjmp	.+42     	; 0x206e <MSPI_enMasterInit+0x1f8>
			case SPI_PREx2_64	: 	SetBit(SPSR_REG, SPI2X);SetBit(SPCR_REG, SPR1);SetBit(SPCR_REG, SPR0); break;
    2044:	ae e2       	ldi	r26, 0x2E	; 46
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	ee e2       	ldi	r30, 0x2E	; 46
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	8c 93       	st	X, r24
    2052:	ad e2       	ldi	r26, 0x2D	; 45
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ed e2       	ldi	r30, 0x2D	; 45
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	82 60       	ori	r24, 0x02	; 2
    205e:	8c 93       	st	X, r24
    2060:	ad e2       	ldi	r26, 0x2D	; 45
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ed e2       	ldi	r30, 0x2D	; 45
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	81 60       	ori	r24, 0x01	; 1
    206c:	8c 93       	st	X, r24
			default: break;
		}
#if SPI_ORD_SEL == SPI_ORD_LSB_MSB

		SetBit(SPCR_REG, DORD);
    206e:	ad e2       	ldi	r26, 0x2D	; 45
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ed e2       	ldi	r30, 0x2D	; 45
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 62       	ori	r24, 0x20	; 32
    207a:	8c 93       	st	X, r24
#endif


#if SPI_CPOL_SEL == SPI_CPOL_LR_TF

		ClrBit(SPCR_REG, CPOL);
    207c:	ad e2       	ldi	r26, 0x2D	; 45
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	ed e2       	ldi	r30, 0x2D	; 45
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	87 7f       	andi	r24, 0xF7	; 247
    2088:	8c 93       	st	X, r24

		ClrBit(SPCR_REG, CPHA);

#elif SPI_CPHA_SEL == SPI_CPHA_LSE_TSA

		SetBit(SPCR_REG, CPHA);
    208a:	ad e2       	ldi	r26, 0x2D	; 45
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ed e2       	ldi	r30, 0x2D	; 45
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	84 60       	ori	r24, 0x04	; 4
    2096:	8c 93       	st	X, r24

#endif
		ClrBit( SPCR_REG, SPIE); // disable ISR
    2098:	ad e2       	ldi	r26, 0x2D	; 45
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ed e2       	ldi	r30, 0x2D	; 45
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 77       	andi	r24, 0x7F	; 127
    20a4:	8c 93       	st	X, r24
		SetBit(SPCR_REG, SPE); // enable SPI
    20a6:	ad e2       	ldi	r26, 0x2D	; 45
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	ed e2       	ldi	r30, 0x2D	; 45
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 64       	ori	r24, 0x40	; 64
    20b2:	8c 93       	st	X, r24
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <MSPI_enMasterInit+0x242>

	}
	else
	{
		errStatus = SPI_NOK;
    20b6:	19 82       	std	Y+1, r1	; 0x01
	}

		return errStatus;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <MSPI_enSlaveInit>:




enu_status_t MSPI_enSlaveInit(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
	enu_status_t errStatus = SPI_OK;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
	ClrBit(SPCR_REG, MSTR);  // set as slave
    20d6:	ad e2       	ldi	r26, 0x2D	; 45
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	ed e2       	ldi	r30, 0x2D	; 45
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8f 7e       	andi	r24, 0xEF	; 239
    20e2:	8c 93       	st	X, r24

#if SPI_ORD_SEL == SPI_ORD_LSB_MSB

		SetBit(SPCR_REG, DORD);
    20e4:	ad e2       	ldi	r26, 0x2D	; 45
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	ed e2       	ldi	r30, 0x2D	; 45
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 62       	ori	r24, 0x20	; 32
    20f0:	8c 93       	st	X, r24
#endif


#if SPI_CPOL_SEL == SPI_CPOL_LR_TF

		ClrBit(SPCR_REG, CPOL);
    20f2:	ad e2       	ldi	r26, 0x2D	; 45
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ed e2       	ldi	r30, 0x2D	; 45
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	87 7f       	andi	r24, 0xF7	; 247
    20fe:	8c 93       	st	X, r24

		ClrBit(SPCR_REG, CPHA);

#elif SPI_CPHA_SEL == SPI_CPHA_LSE_TSA

		SetBit(SPCR_REG, CPHA);
    2100:	ad e2       	ldi	r26, 0x2D	; 45
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ed e2       	ldi	r30, 0x2D	; 45
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	84 60       	ori	r24, 0x04	; 4
    210c:	8c 93       	st	X, r24

#endif

		SetBit(SPCR_REG, SPE); // enable SPI
    210e:	ad e2       	ldi	r26, 0x2D	; 45
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e2       	ldi	r30, 0x2D	; 45
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 64       	ori	r24, 0x40	; 64
    211a:	8c 93       	st	X, r24

		return errStatus;
    211c:	89 81       	ldd	r24, Y+1	; 0x01
}
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <MSPI_vidTransmitChar>:




void MSPI_vidTransmitChar(Uint8_t copy_u8_data)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <MSPI_vidTransmitChar+0x6>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8a 83       	std	Y+2, r24	; 0x02
	Uint8_t flush_buffer ;
	//SetBit(SPSR_REG, SPIF);
	SPDR_REG = copy_u8_data;
    2132:	ef e2       	ldi	r30, 0x2F	; 47
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	80 83       	st	Z, r24

	while (!(SPSR_REG & (1 << SPIF)));
    213a:	ee e2       	ldi	r30, 0x2E	; 46
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	88 23       	and	r24, r24
    2142:	dc f7       	brge	.-10     	; 0x213a <MSPI_vidTransmitChar+0x14>
	flush_buffer = SPDR_REG;
    2144:	ef e2       	ldi	r30, 0x2F	; 47
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	89 83       	std	Y+1, r24	; 0x01
//	while ( (GetBit(SPSR_REG, SPIF)) == 0 );
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <MSPI_enReceiveChar>:


enu_status_t MSPI_enReceiveChar(Uint8_t* ref_u8_data)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <MSPI_enReceiveChar+0x6>
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9b 83       	std	Y+3, r25	; 0x03
    2164:	8a 83       	std	Y+2, r24	; 0x02
	enu_status_t errStatus = SPI_OK;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	89 83       	std	Y+1, r24	; 0x01
	//SetBit(SPSR_REG, SPIF);



	if (ref_u8_data != NULL)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	81 f0       	breq	.+32     	; 0x2192 <MSPI_enReceiveChar+0x3c>
	{
		SPDR_REG = 0xFF;
    2172:	ef e2       	ldi	r30, 0x2F	; 47
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	80 83       	st	Z, r24
		while (!(SPSR_REG & (1 << SPIF)));
    217a:	ee e2       	ldi	r30, 0x2E	; 46
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	88 23       	and	r24, r24
    2182:	dc f7       	brge	.-10     	; 0x217a <MSPI_enReceiveChar+0x24>
//		while ( (GetBit(SPSR_REG, SPIF)) == 0);
		*ref_u8_data = SPDR_REG;
    2184:	ef e2       	ldi	r30, 0x2F	; 47
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	ea 81       	ldd	r30, Y+2	; 0x02
    218c:	fb 81       	ldd	r31, Y+3	; 0x03
    218e:	80 83       	st	Z, r24
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <MSPI_enReceiveChar+0x3e>
	}
	else
	{
		errStatus = SPI_NOK;
    2192:	19 82       	std	Y+1, r1	; 0x01
	}

	return errStatus;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <__vector_12>:

/*************************************************************************
 * 					INTERRUPT HANDLER
 ************************************************************************/
ISR(SPI_STC_vect)
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	8f 93       	push	r24
    21ae:	ef 93       	push	r30
    21b0:	ff 93       	push	r31
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	g_dataVal = SPDR_REG;
    21ba:	ef e2       	ldi	r30, 0x2F	; 47
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	80 93 35 03 	sts	0x0335, r24
}
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	ff 91       	pop	r31
    21ca:	ef 91       	pop	r30
    21cc:	8f 91       	pop	r24
    21ce:	0f 90       	pop	r0
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	0f 90       	pop	r0
    21d4:	1f 90       	pop	r1
    21d6:	18 95       	reti

000021d8 <i2c_init_master>:
/****************************************************************************/
/*								Function Implementation			     		*/
/****************************************************************************/

void i2c_init_master(void)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
//	TWAR = (1<<1);    // my address = 0x01
//	TWCR = (1<<TWEN);


//	/* Set prescallar to 1 to get 400 KHz  */
	ClrBit(TWSR, TWPS0);
    21e0:	a1 e2       	ldi	r26, 0x21	; 33
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e1 e2       	ldi	r30, 0x21	; 33
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	8e 7f       	andi	r24, 0xFE	; 254
    21ec:	8c 93       	st	X, r24
	ClrBit(TWSR, TWPS1);
    21ee:	a1 e2       	ldi	r26, 0x21	; 33
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e1 e2       	ldi	r30, 0x21	; 33
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8d 7f       	andi	r24, 0xFD	; 253
    21fa:	8c 93       	st	X, r24
//	/* According to this formula {SCL_freq = (CPU_freq)/(16 + (2(TWBR)*4^TWPS)) }
//	 * According to prescallar is 1 ----> TWPS = 0 , so wet put 0x02 to TWBR to get 400 kHz
//	 **/
	TWBR = 0x02;
    21fc:	e0 e2       	ldi	r30, 0x20	; 32
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	80 83       	st	Z, r24
//	/* Set Master Address */
	TWAR = (MASTER_ADDRESS << 1);
    2204:	e2 e2       	ldi	r30, 0x22	; 34
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 ea       	ldi	r24, 0xA0	; 160
    220a:	80 83       	st	Z, r24
//	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    220c:	a6 e5       	ldi	r26, 0x56	; 86
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e6 e5       	ldi	r30, 0x56	; 86
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	84 60       	ori	r24, 0x04	; 4
    2218:	8c 93       	st	X, r24
}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <i2c_init_slave>:


void i2c_init_slave (void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	/* Set Slave Address */
	TWAR = (SLAVE_ADDRESS << 1);
    2228:	e2 e2       	ldi	r30, 0x22	; 34
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	80 83       	st	Z, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    2230:	a6 e5       	ldi	r26, 0x56	; 86
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e6 e5       	ldi	r30, 0x56	; 86
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	84 60       	ori	r24, 0x04	; 4
    223c:	8c 93       	st	X, r24
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <i2c_start>:


void i2c_start(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    224c:	e6 e5       	ldi	r30, 0x56	; 86
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	84 ea       	ldi	r24, 0xA4	; 164
    2252:	80 83       	st	Z, r24
	/* Enable Start bit */
//	SetBit(TWCR, TWSTA);
	/* Enable I2C peripheral */
//	SetBit(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    2254:	e6 e5       	ldi	r30, 0x56	; 86
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 23       	and	r24, r24
    225c:	dc f7       	brge	.-10     	; 0x2254 <i2c_start+0x10>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != START_ACK );
    225e:	e1 e2       	ldi	r30, 0x21	; 33
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 7f       	andi	r24, 0xF8	; 248
    226a:	90 70       	andi	r25, 0x00	; 0
    226c:	88 30       	cpi	r24, 0x08	; 8
    226e:	91 05       	cpc	r25, r1
    2270:	b1 f7       	brne	.-20     	; 0x225e <i2c_start+0x1a>
	/* Disable Start bit */
//	ClrBit(TWCR, TWSTA);
}
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <i2c_repeated_start>:


void i2c_repeated_start(void)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2280:	e6 e5       	ldi	r30, 0x56	; 86
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	84 ea       	ldi	r24, 0xA4	; 164
    2286:	80 83       	st	Z, r24
	/* Enable Start bit */
//	SetBit(TWCR, TWSTA);
	/* Enable I2C peripheral */
//	SetBit(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    2288:	e6 e5       	ldi	r30, 0x56	; 86
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 23       	and	r24, r24
    2290:	dc f7       	brge	.-10     	; 0x2288 <i2c_repeated_start+0x10>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != REP_START_ACK );
    2292:	e1 e2       	ldi	r30, 0x21	; 33
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	88 7f       	andi	r24, 0xF8	; 248
    229e:	90 70       	andi	r25, 0x00	; 0
    22a0:	80 31       	cpi	r24, 0x10	; 16
    22a2:	91 05       	cpc	r25, r1
    22a4:	b1 f7       	brne	.-20     	; 0x2292 <i2c_repeated_start+0x1a>
	/* Disable Start bit */
//	ClrBit(TWCR, TWSTA);
}
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <i2c_send_slave_address_with_write_req>:


void i2c_send_slave_address_with_write_req(Uint8_t slave_address)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	0f 92       	push	r0
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	89 83       	std	Y+1, r24	; 0x01
	/* Putting slave address to TWDR register to be transmitted */
	TWDR = (slave_address<<1);
    22b8:	e3 e2       	ldi	r30, 0x23	; 35
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	88 0f       	add	r24, r24
    22c0:	80 83       	st	Z, r24
	/* Set bit 0 on TWDR register to make write operation */
	ClrBit(TWDR, R_W);
    22c2:	a3 e2       	ldi	r26, 0x23	; 35
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e3 e2       	ldi	r30, 0x23	; 35
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8e 7f       	andi	r24, 0xFE	; 254
    22ce:	8c 93       	st	X, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
    22d0:	e6 e5       	ldi	r30, 0x56	; 86
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	84 e8       	ldi	r24, 0x84	; 132
    22d6:	80 83       	st	Z, r24
	/* Clear TWINT flag */
//	SetBit(TWCR, TWINT);
	/* Enable I2C peripheral */
//	SetBit(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    22d8:	e6 e5       	ldi	r30, 0x56	; 86
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	88 23       	and	r24, r24
    22e0:	dc f7       	brge	.-10     	; 0x22d8 <i2c_send_slave_address_with_write_req+0x2c>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK );
    22e2:	e1 e2       	ldi	r30, 0x21	; 33
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	88 7f       	andi	r24, 0xF8	; 248
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	88 31       	cpi	r24, 0x18	; 24
    22f2:	91 05       	cpc	r25, r1
    22f4:	b1 f7       	brne	.-20     	; 0x22e2 <i2c_send_slave_address_with_write_req+0x36>
}
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <i2c_send_slave_address_with_read_req>:


void i2c_send_slave_address_with_read_req(Uint8_t slave_address)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (slave_address<<1);
    230a:	e3 e2       	ldi	r30, 0x23	; 35
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	88 0f       	add	r24, r24
    2312:	80 83       	st	Z, r24
	TWDR |= (1<<0);
    2314:	a3 e2       	ldi	r26, 0x23	; 35
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e3 e2       	ldi	r30, 0x23	; 35
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	81 60       	ori	r24, 0x01	; 1
    2320:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2322:	e6 e5       	ldi	r30, 0x56	; 86
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	84 e8       	ldi	r24, 0x84	; 132
    2328:	80 83       	st	Z, r24
#endif
/*********************************************************************************/
	/* Enable I2C peripheral */
//	SetBit(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    232a:	e6 e5       	ldi	r30, 0x56	; 86
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	88 23       	and	r24, r24
    2332:	dc f7       	brge	.-10     	; 0x232a <i2c_send_slave_address_with_read_req+0x2c>
	/* Waiting if this condition becoming true */
//	while ( (TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK );
}
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <i2c_write_byte>:


void i2c_write_byte(Uint8_t byte)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01

	/* Putting data to TWDR register to be transmitted */
	TWDR = byte;
    2348:	e3 e2       	ldi	r30, 0x23	; 35
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	80 83       	st	Z, r24

//	TWCR = (1<<TWINT) | (1<<TWEN);
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    2350:	a6 e5       	ldi	r26, 0x56	; 86
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e6 e5       	ldi	r30, 0x56	; 86
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 68       	ori	r24, 0x80	; 128
    235c:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    235e:	a6 e5       	ldi	r26, 0x56	; 86
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e6 e5       	ldi	r30, 0x56	; 86
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	8c 93       	st	X, r24
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    236c:	e6 e5       	ldi	r30, 0x56	; 86
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	88 23       	and	r24, r24
    2374:	dc f7       	brge	.-10     	; 0x236c <i2c_write_byte+0x30>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != WR_BYTE_ACK );
    2376:	e1 e2       	ldi	r30, 0x21	; 33
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	88 7f       	andi	r24, 0xF8	; 248
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	88 32       	cpi	r24, 0x28	; 40
    2386:	91 05       	cpc	r25, r1
    2388:	b1 f7       	brne	.-20     	; 0x2376 <i2c_write_byte+0x3a>
}
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <i2c_read_byte>:


Uint8_t i2c_read_byte(void)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
    239a:	e6 e5       	ldi	r30, 0x56	; 86
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	84 e8       	ldi	r24, 0x84	; 132
    23a0:	80 83       	st	Z, r24
	/* Clear TWINT flag */
//	SetBit(TWCR, TWINT);
	/* Enable I2C peripheral */
//	SetBit(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    23a2:	e6 e5       	ldi	r30, 0x56	; 86
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	88 23       	and	r24, r24
    23aa:	dc f7       	brge	.-10     	; 0x23a2 <i2c_read_byte+0x10>
#elif MI2C_ACK_STATUS == MI2C_ACK_ENABLE
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != RD_BYTE_WITH_ACK );
#endif
/*********************************************************************************/
	return TWDR;
    23ac:	e3 e2       	ldi	r30, 0x23	; 35
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <i2c_stop>:


void i2c_stop(void)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
//	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    23c0:	a6 e5       	ldi	r26, 0x56	; 86
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 e5       	ldi	r30, 0x56	; 86
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	80 68       	ori	r24, 0x80	; 128
    23cc:	8c 93       	st	X, r24
	/* Enable Stop bit */
	SetBit(TWCR, TWSTO);
    23ce:	a6 e5       	ldi	r26, 0x56	; 86
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e6 e5       	ldi	r30, 0x56	; 86
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 61       	ori	r24, 0x10	; 16
    23da:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    23dc:	a6 e5       	ldi	r26, 0x56	; 86
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e6 e5       	ldi	r30, 0x56	; 86
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	84 60       	ori	r24, 0x04	; 4
    23e8:	8c 93       	st	X, r24

	while(TWCR&(1<<TWSTO));
    23ea:	e6 e5       	ldi	r30, 0x56	; 86
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	80 71       	andi	r24, 0x10	; 16
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	b9 f7       	brne	.-18     	; 0x23ea <i2c_stop+0x32>

//	ClrBit(TWCR, TWSTA);
}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <i2c_slave_check_slave_address_received_with_write_req>:



void i2c_slave_check_slave_address_received_with_write_req(void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    240a:	a6 e5       	ldi	r26, 0x56	; 86
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e6 e5       	ldi	r30, 0x56	; 86
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	8c 93       	st	X, r24
	/* Enable ACK bit */
	SetBit(TWCR, TWEA);
    2418:	a6 e5       	ldi	r26, 0x56	; 86
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e6 e5       	ldi	r30, 0x56	; 86
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	80 64       	ori	r24, 0x40	; 64
    2424:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    2426:	a6 e5       	ldi	r26, 0x56	; 86
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e6 e5       	ldi	r30, 0x56	; 86
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	84 60       	ori	r24, 0x04	; 4
    2432:	8c 93       	st	X, r24
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    2434:	e6 e5       	ldi	r30, 0x56	; 86
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 23       	and	r24, r24
    243c:	dc f7       	brge	.-10     	; 0x2434 <i2c_slave_check_slave_address_received_with_write_req+0x32>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_ADD_RCVD_WR_REQ );
    243e:	e1 e2       	ldi	r30, 0x21	; 33
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	88 7f       	andi	r24, 0xF8	; 248
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	80 36       	cpi	r24, 0x60	; 96
    244e:	91 05       	cpc	r25, r1
    2450:	b1 f7       	brne	.-20     	; 0x243e <i2c_slave_check_slave_address_received_with_write_req+0x3c>
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <i2c_slave_check_slave_address_received_with_read_req>:


void i2c_slave_check_slave_address_received_with_read_req(void)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    2460:	a6 e5       	ldi	r26, 0x56	; 86
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e6 e5       	ldi	r30, 0x56	; 86
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 68       	ori	r24, 0x80	; 128
    246c:	8c 93       	st	X, r24
	/* Enable ACK bit */
	SetBit(TWCR, TWEA);
    246e:	a6 e5       	ldi	r26, 0x56	; 86
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e6 e5       	ldi	r30, 0x56	; 86
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 64       	ori	r24, 0x40	; 64
    247a:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    247c:	a6 e5       	ldi	r26, 0x56	; 86
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e6 e5       	ldi	r30, 0x56	; 86
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	84 60       	ori	r24, 0x04	; 4
    2488:	8c 93       	st	X, r24
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    248a:	e6 e5       	ldi	r30, 0x56	; 86
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	88 23       	and	r24, r24
    2492:	dc f7       	brge	.-10     	; 0x248a <i2c_slave_check_slave_address_received_with_read_req+0x32>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_ADD_RCVD_RD_REQ );
    2494:	e1 e2       	ldi	r30, 0x21	; 33
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	88 7f       	andi	r24, 0xF8	; 248
    24a0:	90 70       	andi	r25, 0x00	; 0
    24a2:	88 3a       	cpi	r24, 0xA8	; 168
    24a4:	91 05       	cpc	r25, r1
    24a6:	b1 f7       	brne	.-20     	; 0x2494 <i2c_slave_check_slave_address_received_with_read_req+0x3c>
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <i2c_slave_read_byte>:


Uint8_t i2c_slave_read_byte(void)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    24b6:	a6 e5       	ldi	r26, 0x56	; 86
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e6 e5       	ldi	r30, 0x56	; 86
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	80 68       	ori	r24, 0x80	; 128
    24c2:	8c 93       	st	X, r24
	/* Enable ACK bit */
	SetBit(TWCR, TWEA);
    24c4:	a6 e5       	ldi	r26, 0x56	; 86
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e6 e5       	ldi	r30, 0x56	; 86
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 64       	ori	r24, 0x40	; 64
    24d0:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    24d2:	a6 e5       	ldi	r26, 0x56	; 86
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e6 e5       	ldi	r30, 0x56	; 86
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	84 60       	ori	r24, 0x04	; 4
    24de:	8c 93       	st	X, r24
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    24e0:	e6 e5       	ldi	r30, 0x56	; 86
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	dc f7       	brge	.-10     	; 0x24e0 <i2c_slave_read_byte+0x32>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_DATA_RECEIVED );
    24ea:	e1 e2       	ldi	r30, 0x21	; 33
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	88 7f       	andi	r24, 0xF8	; 248
    24f6:	90 70       	andi	r25, 0x00	; 0
    24f8:	80 38       	cpi	r24, 0x80	; 128
    24fa:	91 05       	cpc	r25, r1
    24fc:	b1 f7       	brne	.-20     	; 0x24ea <i2c_slave_read_byte+0x3c>

	return TWDR;
    24fe:	e3 e2       	ldi	r30, 0x23	; 35
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
}
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <i2c_slave_write_byte>:


void i2c_slave_write_byte(Uint8_t byte)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	89 83       	std	Y+1, r24	; 0x01
	/* Putting data to TWDR register to be transmitted */
	TWDR = byte;
    2516:	e3 e2       	ldi	r30, 0x23	; 35
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 83       	st	Z, r24
	/* Clear TWINT flag */
	SetBit(TWCR, TWINT);
    251e:	a6 e5       	ldi	r26, 0x56	; 86
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e6 e5       	ldi	r30, 0x56	; 86
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	80 68       	ori	r24, 0x80	; 128
    252a:	8c 93       	st	X, r24
	/* Enable ACK bit */
	SetBit(TWCR, TWEA);
    252c:	a6 e5       	ldi	r26, 0x56	; 86
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e6 e5       	ldi	r30, 0x56	; 86
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	80 64       	ori	r24, 0x40	; 64
    2538:	8c 93       	st	X, r24
	/* Enable I2C peripheral */
	SetBit(TWCR, TWEN);
    253a:	a6 e5       	ldi	r26, 0x56	; 86
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e6 e5       	ldi	r30, 0x56	; 86
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	84 60       	ori	r24, 0x04	; 4
    2546:	8c 93       	st	X, r24
	/* Waiting for TWINT flag to be set */
	while ( !(GetBit(TWCR,TWINT)) );
    2548:	e6 e5       	ldi	r30, 0x56	; 86
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	dc f7       	brge	.-10     	; 0x2548 <i2c_slave_write_byte+0x3e>
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED );
    2552:	e1 e2       	ldi	r30, 0x21	; 33
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	88 7f       	andi	r24, 0xF8	; 248
    255e:	90 70       	andi	r25, 0x00	; 0
    2560:	80 3c       	cpi	r24, 0xC0	; 192
    2562:	91 05       	cpc	r25, r1
    2564:	b1 f7       	brne	.-20     	; 0x2552 <i2c_slave_write_byte+0x48>
}
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <vidExtInt_init>:

/************************************************************************************************/
/*									FUNCTION_IMPLEMENTATION										*/
/************************************************************************************************/
Uint8_t vidExtInt_init(enu_int_type_t enIntType, enu_sns_ctrl_t enSensControl)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	29 97       	sbiw	r28, 0x09	; 9
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	8a 83       	std	Y+2, r24	; 0x02
    2584:	6b 83       	std	Y+3, r22	; 0x03

	Uint8_t err_status = E_INT_OK;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	89 83       	std	Y+1, r24	; 0x01
	if(enIntType < INT_TYPE_INVALID && enSensControl < SENS_CONTROL_INVALID)
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	08 f0       	brcs	.+2      	; 0x2592 <vidExtInt_init+0x24>
    2590:	15 c1       	rjmp	.+554    	; 0x27bc <vidExtInt_init+0x24e>
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	84 30       	cpi	r24, 0x04	; 4
    2596:	08 f0       	brcs	.+2      	; 0x259a <vidExtInt_init+0x2c>
    2598:	11 c1       	rjmp	.+546    	; 0x27bc <vidExtInt_init+0x24e>
	{
		if (enIntType == INT_0)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	88 23       	and	r24, r24
    259e:	09 f0       	breq	.+2      	; 0x25a2 <vidExtInt_init+0x34>
    25a0:	6b c0       	rjmp	.+214    	; 0x2678 <vidExtInt_init+0x10a>
		{
//			DIO_s8SETPinVal(DIO_PIND_2, HIGH);
			switch (enSensControl)
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	39 87       	std	Y+9, r19	; 0x09
    25aa:	28 87       	std	Y+8, r18	; 0x08
    25ac:	88 85       	ldd	r24, Y+8	; 0x08
    25ae:	99 85       	ldd	r25, Y+9	; 0x09
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	91 05       	cpc	r25, r1
    25b4:	21 f1       	breq	.+72     	; 0x25fe <vidExtInt_init+0x90>
    25b6:	28 85       	ldd	r18, Y+8	; 0x08
    25b8:	39 85       	ldd	r19, Y+9	; 0x09
    25ba:	22 30       	cpi	r18, 0x02	; 2
    25bc:	31 05       	cpc	r19, r1
    25be:	2c f4       	brge	.+10     	; 0x25ca <vidExtInt_init+0x5c>
    25c0:	88 85       	ldd	r24, Y+8	; 0x08
    25c2:	99 85       	ldd	r25, Y+9	; 0x09
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <vidExtInt_init+0x72>
    25c8:	47 c0       	rjmp	.+142    	; 0x2658 <vidExtInt_init+0xea>
    25ca:	28 85       	ldd	r18, Y+8	; 0x08
    25cc:	39 85       	ldd	r19, Y+9	; 0x09
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	21 f1       	breq	.+72     	; 0x261c <vidExtInt_init+0xae>
    25d4:	88 85       	ldd	r24, Y+8	; 0x08
    25d6:	99 85       	ldd	r25, Y+9	; 0x09
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	91 05       	cpc	r25, r1
    25dc:	71 f1       	breq	.+92     	; 0x263a <vidExtInt_init+0xcc>
    25de:	3c c0       	rjmp	.+120    	; 0x2658 <vidExtInt_init+0xea>
			{
				case LOW_LEVEL 	: ClrBit(MCUCR_REG, ISC00); ClrBit(MCUCR_REG, ISC01); break;
    25e0:	a5 e5       	ldi	r26, 0x55	; 85
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e5 e5       	ldi	r30, 0x55	; 85
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	8e 7f       	andi	r24, 0xFE	; 254
    25ec:	8c 93       	st	X, r24
    25ee:	a5 e5       	ldi	r26, 0x55	; 85
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e5       	ldi	r30, 0x55	; 85
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8d 7f       	andi	r24, 0xFD	; 253
    25fa:	8c 93       	st	X, r24
    25fc:	2e c0       	rjmp	.+92     	; 0x265a <vidExtInt_init+0xec>
				case ANY_LOGICAL: SetBit(MCUCR_REG, ISC00); ClrBit(MCUCR_REG, ISC01); break;
    25fe:	a5 e5       	ldi	r26, 0x55	; 85
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e5 e5       	ldi	r30, 0x55	; 85
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	81 60       	ori	r24, 0x01	; 1
    260a:	8c 93       	st	X, r24
    260c:	a5 e5       	ldi	r26, 0x55	; 85
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e5 e5       	ldi	r30, 0x55	; 85
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8d 7f       	andi	r24, 0xFD	; 253
    2618:	8c 93       	st	X, r24
    261a:	1f c0       	rjmp	.+62     	; 0x265a <vidExtInt_init+0xec>
				case FALL_EDGE 	: ClrBit(MCUCR_REG, ISC00); SetBit(MCUCR_REG, ISC01); break;
    261c:	a5 e5       	ldi	r26, 0x55	; 85
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e5       	ldi	r30, 0x55	; 85
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8e 7f       	andi	r24, 0xFE	; 254
    2628:	8c 93       	st	X, r24
    262a:	a5 e5       	ldi	r26, 0x55	; 85
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e5 e5       	ldi	r30, 0x55	; 85
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	82 60       	ori	r24, 0x02	; 2
    2636:	8c 93       	st	X, r24
    2638:	10 c0       	rjmp	.+32     	; 0x265a <vidExtInt_init+0xec>
				case RISE_EDGE 	: SetBit(MCUCR_REG, ISC00); SetBit(MCUCR_REG, ISC01); break;
    263a:	a5 e5       	ldi	r26, 0x55	; 85
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e5 e5       	ldi	r30, 0x55	; 85
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	81 60       	ori	r24, 0x01	; 1
    2646:	8c 93       	st	X, r24
    2648:	a5 e5       	ldi	r26, 0x55	; 85
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e5       	ldi	r30, 0x55	; 85
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
    2656:	01 c0       	rjmp	.+2      	; 0x265a <vidExtInt_init+0xec>
				default : err_status = E_INT_NOK; break;
    2658:	19 82       	std	Y+1, r1	; 0x01
			}

			SetBit(GICR_REG, INT0);
    265a:	ab e5       	ldi	r26, 0x5B	; 91
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	eb e5       	ldi	r30, 0x5B	; 91
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	80 64       	ori	r24, 0x40	; 64
    2666:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF0);	// to clear flag for Interrupt 0
    2668:	aa e5       	ldi	r26, 0x5A	; 90
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ea e5       	ldi	r30, 0x5A	; 90
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	80 64       	ori	r24, 0x40	; 64
    2674:	8c 93       	st	X, r24
    2676:	a3 c0       	rjmp	.+326    	; 0x27be <vidExtInt_init+0x250>
		}
		else if (enIntType == INT_1)
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	09 f0       	breq	.+2      	; 0x2680 <vidExtInt_init+0x112>
    267e:	6b c0       	rjmp	.+214    	; 0x2756 <vidExtInt_init+0x1e8>
		{
//			DIO_s8SETPinVal(EXT_INT1, HIGH);
			switch (enSensControl)
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	3f 83       	std	Y+7, r19	; 0x07
    2688:	2e 83       	std	Y+6, r18	; 0x06
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	91 05       	cpc	r25, r1
    2692:	21 f1       	breq	.+72     	; 0x26dc <vidExtInt_init+0x16e>
    2694:	2e 81       	ldd	r18, Y+6	; 0x06
    2696:	3f 81       	ldd	r19, Y+7	; 0x07
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	2c f4       	brge	.+10     	; 0x26a8 <vidExtInt_init+0x13a>
    269e:	8e 81       	ldd	r24, Y+6	; 0x06
    26a0:	9f 81       	ldd	r25, Y+7	; 0x07
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	61 f0       	breq	.+24     	; 0x26be <vidExtInt_init+0x150>
    26a6:	47 c0       	rjmp	.+142    	; 0x2736 <vidExtInt_init+0x1c8>
    26a8:	2e 81       	ldd	r18, Y+6	; 0x06
    26aa:	3f 81       	ldd	r19, Y+7	; 0x07
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	31 05       	cpc	r19, r1
    26b0:	21 f1       	breq	.+72     	; 0x26fa <vidExtInt_init+0x18c>
    26b2:	8e 81       	ldd	r24, Y+6	; 0x06
    26b4:	9f 81       	ldd	r25, Y+7	; 0x07
    26b6:	83 30       	cpi	r24, 0x03	; 3
    26b8:	91 05       	cpc	r25, r1
    26ba:	71 f1       	breq	.+92     	; 0x2718 <vidExtInt_init+0x1aa>
    26bc:	3c c0       	rjmp	.+120    	; 0x2736 <vidExtInt_init+0x1c8>
			{
				case LOW_LEVEL 	: ClrBit(MCUCR_REG, ISC10); ClrBit(MCUCR_REG, ISC11); break;
    26be:	a5 e5       	ldi	r26, 0x55	; 85
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e5 e5       	ldi	r30, 0x55	; 85
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8b 7f       	andi	r24, 0xFB	; 251
    26ca:	8c 93       	st	X, r24
    26cc:	a5 e5       	ldi	r26, 0x55	; 85
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e5 e5       	ldi	r30, 0x55	; 85
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	87 7f       	andi	r24, 0xF7	; 247
    26d8:	8c 93       	st	X, r24
    26da:	2e c0       	rjmp	.+92     	; 0x2738 <vidExtInt_init+0x1ca>
				case ANY_LOGICAL: SetBit(MCUCR_REG, ISC10); ClrBit(MCUCR_REG, ISC11); break;
    26dc:	a5 e5       	ldi	r26, 0x55	; 85
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e5       	ldi	r30, 0x55	; 85
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	84 60       	ori	r24, 0x04	; 4
    26e8:	8c 93       	st	X, r24
    26ea:	a5 e5       	ldi	r26, 0x55	; 85
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e5 e5       	ldi	r30, 0x55	; 85
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	87 7f       	andi	r24, 0xF7	; 247
    26f6:	8c 93       	st	X, r24
    26f8:	1f c0       	rjmp	.+62     	; 0x2738 <vidExtInt_init+0x1ca>
				case FALL_EDGE 	: ClrBit(MCUCR_REG, ISC10); SetBit(MCUCR_REG, ISC11); break;
    26fa:	a5 e5       	ldi	r26, 0x55	; 85
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e5 e5       	ldi	r30, 0x55	; 85
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8b 7f       	andi	r24, 0xFB	; 251
    2706:	8c 93       	st	X, r24
    2708:	a5 e5       	ldi	r26, 0x55	; 85
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e5 e5       	ldi	r30, 0x55	; 85
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 60       	ori	r24, 0x08	; 8
    2714:	8c 93       	st	X, r24
    2716:	10 c0       	rjmp	.+32     	; 0x2738 <vidExtInt_init+0x1ca>
				case RISE_EDGE 	: SetBit(MCUCR_REG, ISC10); SetBit(MCUCR_REG, ISC11); break;
    2718:	a5 e5       	ldi	r26, 0x55	; 85
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e5 e5       	ldi	r30, 0x55	; 85
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	84 60       	ori	r24, 0x04	; 4
    2724:	8c 93       	st	X, r24
    2726:	a5 e5       	ldi	r26, 0x55	; 85
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e5 e5       	ldi	r30, 0x55	; 85
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	88 60       	ori	r24, 0x08	; 8
    2732:	8c 93       	st	X, r24
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <vidExtInt_init+0x1ca>
				default : err_status = E_INT_NOK; break;
    2736:	19 82       	std	Y+1, r1	; 0x01
			}
			SetBit(GICR_REG, INT1);
    2738:	ab e5       	ldi	r26, 0x5B	; 91
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	eb e5       	ldi	r30, 0x5B	; 91
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	80 68       	ori	r24, 0x80	; 128
    2744:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF1);	// to clear flag for Interrupt 1
    2746:	aa e5       	ldi	r26, 0x5A	; 90
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	ea e5       	ldi	r30, 0x5A	; 90
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	80 68       	ori	r24, 0x80	; 128
    2752:	8c 93       	st	X, r24
    2754:	34 c0       	rjmp	.+104    	; 0x27be <vidExtInt_init+0x250>
		}
		else if (enIntType == INT_2)
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	82 30       	cpi	r24, 0x02	; 2
    275a:	89 f5       	brne	.+98     	; 0x27be <vidExtInt_init+0x250>
		{
//			DIO_s8SETPinVal(EXT_INT2, HIGH);
			switch (enSensControl)
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	3d 83       	std	Y+5, r19	; 0x05
    2764:	2c 83       	std	Y+4, r18	; 0x04
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	9d 81       	ldd	r25, Y+5	; 0x05
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	91 05       	cpc	r25, r1
    276e:	31 f0       	breq	.+12     	; 0x277c <vidExtInt_init+0x20e>
    2770:	2c 81       	ldd	r18, Y+4	; 0x04
    2772:	3d 81       	ldd	r19, Y+5	; 0x05
    2774:	23 30       	cpi	r18, 0x03	; 3
    2776:	31 05       	cpc	r19, r1
    2778:	49 f0       	breq	.+18     	; 0x278c <vidExtInt_init+0x21e>
    277a:	10 c0       	rjmp	.+32     	; 0x279c <vidExtInt_init+0x22e>
			{
				case FALL_EDGE 	: ClrBit(MCUCSR_REG, ISC2);  break;
    277c:	a4 e5       	ldi	r26, 0x54	; 84
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e4 e5       	ldi	r30, 0x54	; 84
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8f 7b       	andi	r24, 0xBF	; 191
    2788:	8c 93       	st	X, r24
    278a:	09 c0       	rjmp	.+18     	; 0x279e <vidExtInt_init+0x230>
				case RISE_EDGE 	: SetBit(MCUCSR_REG, ISC2);  break;
    278c:	a4 e5       	ldi	r26, 0x54	; 84
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e4 e5       	ldi	r30, 0x54	; 84
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	80 64       	ori	r24, 0x40	; 64
    2798:	8c 93       	st	X, r24
    279a:	01 c0       	rjmp	.+2      	; 0x279e <vidExtInt_init+0x230>
				default : err_status = E_INT_NOK; break;
    279c:	19 82       	std	Y+1, r1	; 0x01
			}
			SetBit(GICR_REG, INT2);
    279e:	ab e5       	ldi	r26, 0x5B	; 91
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	eb e5       	ldi	r30, 0x5B	; 91
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	80 62       	ori	r24, 0x20	; 32
    27aa:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF2);  // to clear flag for Interrupt 2
    27ac:	aa e5       	ldi	r26, 0x5A	; 90
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ea e5       	ldi	r30, 0x5A	; 90
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	80 62       	ori	r24, 0x20	; 32
    27b8:	8c 93       	st	X, r24
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <vidExtInt_init+0x250>
		}
	}
	else
	{
		err_status = E_INT_NOK;
    27bc:	19 82       	std	Y+1, r1	; 0x01
	}

	SetBit(SREG_REG, I); // enable global interrupt
    27be:	af e5       	ldi	r26, 0x5F	; 95
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ef e5       	ldi	r30, 0x5F	; 95
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	80 68       	ori	r24, 0x80	; 128
    27ca:	8c 93       	st	X, r24
//	ClrBit(SREG_REG, I);


	return err_status;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	29 96       	adiw	r28, 0x09	; 9
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <MEXTINT_vidCallBackFunc>:



void MEXTINT_vidCallBackFunc(ptr_func funcCopy)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <MEXTINT_vidCallBackFunc+0x6>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
	callBack = funcCopy;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	90 93 ed 02 	sts	0x02ED, r25
    27f6:	80 93 ec 02 	sts	0x02EC, r24

}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <MEXTINT_vidCallBackFuncInt1>:


void MEXTINT_vidCallBackFuncInt1(ptr_func funcCopy)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <MEXTINT_vidCallBackFuncInt1+0x6>
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
	callBackFunc = funcCopy;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	90 93 ef 02 	sts	0x02EF, r25
    281a:	80 93 ee 02 	sts	0x02EE, r24

}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <MEXTINT_vidWaitFlag>:


void MEXTINT_vidWaitFlag(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
	while( !( GetBit(GIFR_REG, INTF0) ) );
    2830:	ea e5       	ldi	r30, 0x5A	; 90
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	82 95       	swap	r24
    2838:	86 95       	lsr	r24
    283a:	86 95       	lsr	r24
    283c:	83 70       	andi	r24, 0x03	; 3
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	81 70       	andi	r24, 0x01	; 1
    2844:	90 70       	andi	r25, 0x00	; 0
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	99 f3       	breq	.-26     	; 0x2830 <MEXTINT_vidWaitFlag+0x8>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <MEXTINT_vidDisableInterrupt>:


void MEXTINT_vidDisableInterrupt(void)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	ClrBit(GICR_REG, INT0);
    2858:	ab e5       	ldi	r26, 0x5B	; 91
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	eb e5       	ldi	r30, 0x5B	; 91
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8f 7b       	andi	r24, 0xBF	; 191
    2864:	8c 93       	st	X, r24
//	ClrBit(SREG_REG, I);
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <MEXTINT_vidEnableInterrupt>:

void MEXTINT_vidEnableInterrupt(void)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	SetBit(GIFR_REG, INTF1);
    2874:	aa e5       	ldi	r26, 0x5A	; 90
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	ea e5       	ldi	r30, 0x5A	; 90
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	80 68       	ori	r24, 0x80	; 128
    2880:	8c 93       	st	X, r24
	SetBit(GICR_REG, INT0);
    2882:	ab e5       	ldi	r26, 0x5B	; 91
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	eb e5       	ldi	r30, 0x5B	; 91
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	80 64       	ori	r24, 0x40	; 64
    288e:	8c 93       	st	X, r24
//	SetBit(SREG_REG, I);
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <__vector_1>:




ISR(INT0_vect)
{
    2896:	1f 92       	push	r1
    2898:	0f 92       	push	r0
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	0f 92       	push	r0
    289e:	11 24       	eor	r1, r1
    28a0:	2f 93       	push	r18
    28a2:	3f 93       	push	r19
    28a4:	4f 93       	push	r20
    28a6:	5f 93       	push	r21
    28a8:	6f 93       	push	r22
    28aa:	7f 93       	push	r23
    28ac:	8f 93       	push	r24
    28ae:	9f 93       	push	r25
    28b0:	af 93       	push	r26
    28b2:	bf 93       	push	r27
    28b4:	ef 93       	push	r30
    28b6:	ff 93       	push	r31
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	callBack();
    28c0:	e0 91 ec 02 	lds	r30, 0x02EC
    28c4:	f0 91 ed 02 	lds	r31, 0x02ED
    28c8:	09 95       	icall
}
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	ff 91       	pop	r31
    28d0:	ef 91       	pop	r30
    28d2:	bf 91       	pop	r27
    28d4:	af 91       	pop	r26
    28d6:	9f 91       	pop	r25
    28d8:	8f 91       	pop	r24
    28da:	7f 91       	pop	r23
    28dc:	6f 91       	pop	r22
    28de:	5f 91       	pop	r21
    28e0:	4f 91       	pop	r20
    28e2:	3f 91       	pop	r19
    28e4:	2f 91       	pop	r18
    28e6:	0f 90       	pop	r0
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	0f 90       	pop	r0
    28ec:	1f 90       	pop	r1
    28ee:	18 95       	reti

000028f0 <__vector_2>:

ISR(INT1_vect)
{
    28f0:	1f 92       	push	r1
    28f2:	0f 92       	push	r0
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	0f 92       	push	r0
    28f8:	11 24       	eor	r1, r1
    28fa:	2f 93       	push	r18
    28fc:	3f 93       	push	r19
    28fe:	4f 93       	push	r20
    2900:	5f 93       	push	r21
    2902:	6f 93       	push	r22
    2904:	7f 93       	push	r23
    2906:	8f 93       	push	r24
    2908:	9f 93       	push	r25
    290a:	af 93       	push	r26
    290c:	bf 93       	push	r27
    290e:	ef 93       	push	r30
    2910:	ff 93       	push	r31
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	callBackFunc();
    291a:	e0 91 ee 02 	lds	r30, 0x02EE
    291e:	f0 91 ef 02 	lds	r31, 0x02EF
    2922:	09 95       	icall
}
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	ff 91       	pop	r31
    292a:	ef 91       	pop	r30
    292c:	bf 91       	pop	r27
    292e:	af 91       	pop	r26
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	7f 91       	pop	r23
    2936:	6f 91       	pop	r22
    2938:	5f 91       	pop	r21
    293a:	4f 91       	pop	r20
    293c:	3f 91       	pop	r19
    293e:	2f 91       	pop	r18
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <DIO_s8SETPortDir>:
volatile Uint8_t* ddrReg[4] = { DDRA_REG, DDRB_REG, DDRC_REG, DDRD_REG };
volatile Uint8_t* pinReg[4] = { PINA_REG, PINB_REG, PINC_REG, PIND_REG };


Sint8_t DIO_s8SETPortDir(enu_port enPortCopy,  enu_dir enPortDir)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <DIO_s8SETPortDir+0x6>
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	8a 83       	std	Y+2, r24	; 0x02
    2958:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    295a:	19 82       	std	Y+1, r1	; 0x01

	if (enPortCopy < PORT_INVALID && enPortDir < DIR_INVALID)
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	84 30       	cpi	r24, 0x04	; 4
    2960:	20 f5       	brcc	.+72     	; 0x29aa <DIO_s8SETPortDir+0x60>
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	08 f5       	brcc	.+66     	; 0x29aa <DIO_s8SETPortDir+0x60>
	{
		if (enPortDir == INPUT)
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	88 23       	and	r24, r24
    296c:	69 f4       	brne	.+26     	; 0x2988 <DIO_s8SETPortDir+0x3e>
		{
			*ddrReg[enPortCopy] = 0x00;
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	fc 01       	movw	r30, r24
    297a:	ec 54       	subi	r30, 0x4C	; 76
    297c:	fd 4f       	sbci	r31, 0xFD	; 253
    297e:	01 90       	ld	r0, Z+
    2980:	f0 81       	ld	r31, Z
    2982:	e0 2d       	mov	r30, r0
    2984:	10 82       	st	Z, r1
    2986:	13 c0       	rjmp	.+38     	; 0x29ae <DIO_s8SETPortDir+0x64>
		}
		else if(enPortDir == OUTPUT)
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	81 f4       	brne	.+32     	; 0x29ae <DIO_s8SETPortDir+0x64>
		{
			*ddrReg[enPortCopy] = 0xff;
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	fc 01       	movw	r30, r24
    299a:	ec 54       	subi	r30, 0x4C	; 76
    299c:	fd 4f       	sbci	r31, 0xFD	; 253
    299e:	01 90       	ld	r0, Z+
    29a0:	f0 81       	ld	r31, Z
    29a2:	e0 2d       	mov	r30, r0
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	80 83       	st	Z, r24
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <DIO_s8SETPortDir+0x64>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <DIO_s8SETPortVal>:


Sint8_t DIO_s8SETPortVal(enu_port enPortCopy,  Uint8_t u8PortVal)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <DIO_s8SETPortVal+0x6>
    29c2:	0f 92       	push	r0
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	8a 83       	std	Y+2, r24	; 0x02
    29ca:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    29cc:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID)
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	70 f4       	brcc	.+28     	; 0x29f0 <DIO_s8SETPortVal+0x34>
	{
		*portReg[enPortCopy] = u8PortVal;
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	fc 01       	movw	r30, r24
    29e0:	e4 55       	subi	r30, 0x54	; 84
    29e2:	fd 4f       	sbci	r31, 0xFD	; 253
    29e4:	01 90       	ld	r0, Z+
    29e6:	f0 81       	ld	r31, Z
    29e8:	e0 2d       	mov	r30, r0
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	80 83       	st	Z, r24
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <DIO_s8SETPortVal+0x38>
	}
	else
	{
		errStatus = E_NOK;
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	89 83       	std	Y+1, r24	; 0x01
	}


	return errStatus;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <DIO_s8GETPortVal>:



Sint8_t DIO_s8GETPortVal(enu_port enPortCopy,  Uint8_t* pu8Val)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <DIO_s8GETPortVal+0x6>
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <DIO_s8GETPortVal+0x8>
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
    2a10:	7c 83       	std	Y+4, r23	; 0x04
    2a12:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    2a14:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID )
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	84 30       	cpi	r24, 0x04	; 4
    2a1a:	80 f4       	brcc	.+32     	; 0x2a3c <DIO_s8GETPortVal+0x3a>
	{
		*pu8Val = *pinReg[enPortCopy];
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	fc 01       	movw	r30, r24
    2a28:	e4 54       	subi	r30, 0x44	; 68
    2a2a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	f0 81       	ld	r31, Z
    2a30:	e0 2d       	mov	r30, r0
    2a32:	80 81       	ld	r24, Z
    2a34:	eb 81       	ldd	r30, Y+3	; 0x03
    2a36:	fc 81       	ldd	r31, Y+4	; 0x04
    2a38:	80 83       	st	Z, r24
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <DIO_s8GETPortVal+0x3e>
	}
	else
	{
		errStatus = E_NOK;
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <DIO_s8SETPinDir>:
 * 					- enPortDir {INPUT , OUTPUT}
 * Return		:   Sint8_t
 */

Sint8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <DIO_s8SETPinDir+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <DIO_s8SETPinDir+0x8>
    2a58:	0f 92       	push	r0
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	8c 83       	std	Y+4, r24	; 0x04
    2a60:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    2a62:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	80 32       	cpi	r24, 0x20	; 32
    2a68:	08 f0       	brcs	.+2      	; 0x2a6c <DIO_s8SETPinDir+0x1c>
    2a6a:	5d c0       	rjmp	.+186    	; 0x2b26 <DIO_s8SETPinDir+0xd6>
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	08 f0       	brcs	.+2      	; 0x2a74 <DIO_s8SETPinDir+0x24>
    2a72:	59 c0       	rjmp	.+178    	; 0x2b26 <DIO_s8SETPinDir+0xd6>
	{
		portID = enPinCopy/8;
    2a74:	8c 81       	ldd	r24, Y+4	; 0x04
    2a76:	86 95       	lsr	r24
    2a78:	86 95       	lsr	r24
    2a7a:	86 95       	lsr	r24
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    2a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a80:	87 70       	andi	r24, 0x07	; 7
    2a82:	89 83       	std	Y+1, r24	; 0x01

		if (enPortDir == INPUT)
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	88 23       	and	r24, r24
    2a88:	31 f5       	brne	.+76     	; 0x2ad6 <DIO_s8SETPinDir+0x86>
		{
			ClrBit(*ddrReg[portID],pinID);
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	fc 01       	movw	r30, r24
    2a96:	ec 54       	subi	r30, 0x4C	; 76
    2a98:	fd 4f       	sbci	r31, 0xFD	; 253
    2a9a:	a0 81       	ld	r26, Z
    2a9c:	b1 81       	ldd	r27, Z+1	; 0x01
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	88 2f       	mov	r24, r24
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	ec 54       	subi	r30, 0x4C	; 76
    2aac:	fd 4f       	sbci	r31, 0xFD	; 253
    2aae:	01 90       	ld	r0, Z+
    2ab0:	f0 81       	ld	r31, Z
    2ab2:	e0 2d       	mov	r30, r0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 2e       	mov	r0, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <DIO_s8SETPinDir+0x7a>
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	0a 94       	dec	r0
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <DIO_s8SETPinDir+0x76>
    2ace:	80 95       	com	r24
    2ad0:	84 23       	and	r24, r20
    2ad2:	8c 93       	st	X, r24
    2ad4:	2a c0       	rjmp	.+84     	; 0x2b2a <DIO_s8SETPinDir+0xda>
		}
		else if(enPortDir == OUTPUT)
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	39 f5       	brne	.+78     	; 0x2b2a <DIO_s8SETPinDir+0xda>
		{
			SetBit(*ddrReg[portID],pinID);
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	ec 54       	subi	r30, 0x4C	; 76
    2aea:	fd 4f       	sbci	r31, 0xFD	; 253
    2aec:	a0 81       	ld	r26, Z
    2aee:	b1 81       	ldd	r27, Z+1	; 0x01
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	fc 01       	movw	r30, r24
    2afc:	ec 54       	subi	r30, 0x4C	; 76
    2afe:	fd 4f       	sbci	r31, 0xFD	; 253
    2b00:	01 90       	ld	r0, Z+
    2b02:	f0 81       	ld	r31, Z
    2b04:	e0 2d       	mov	r30, r0
    2b06:	80 81       	ld	r24, Z
    2b08:	48 2f       	mov	r20, r24
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	02 2e       	mov	r0, r18
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <DIO_s8SETPinDir+0xcc>
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	0a 94       	dec	r0
    2b1e:	e2 f7       	brpl	.-8      	; 0x2b18 <DIO_s8SETPinDir+0xc8>
    2b20:	84 2b       	or	r24, r20
    2b22:	8c 93       	st	X, r24
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <DIO_s8SETPinDir+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <DIO_s8SETPinVal>:
 * 					- enPinCopy {DIO_PINA_0...., DIO_PIND_7}
 * 					- enPortDir {HIGH , LOW}
 * Return		:   Sint8_t
 */
Sint8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <DIO_s8SETPinVal+0x6>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <DIO_s8SETPinVal+0x8>
    2b44:	0f 92       	push	r0
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	8c 83       	std	Y+4, r24	; 0x04
    2b4c:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    2b4e:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	80 32       	cpi	r24, 0x20	; 32
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <DIO_s8SETPinVal+0x1c>
    2b56:	5d c0       	rjmp	.+186    	; 0x2c12 <DIO_s8SETPinVal+0xd6>
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	82 30       	cpi	r24, 0x02	; 2
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <DIO_s8SETPinVal+0x24>
    2b5e:	59 c0       	rjmp	.+178    	; 0x2c12 <DIO_s8SETPinVal+0xd6>
	{
		portID = enPinCopy/8;
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	86 95       	lsr	r24
    2b64:	86 95       	lsr	r24
    2b66:	86 95       	lsr	r24
    2b68:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	87 70       	andi	r24, 0x07	; 7
    2b6e:	89 83       	std	Y+1, r24	; 0x01

		if (enPortVal == LOW)
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	88 23       	and	r24, r24
    2b74:	31 f5       	brne	.+76     	; 0x2bc2 <DIO_s8SETPinVal+0x86>
		{
			ClrBit(*portReg[portID],pinID);
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	88 2f       	mov	r24, r24
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	fc 01       	movw	r30, r24
    2b82:	e4 55       	subi	r30, 0x54	; 84
    2b84:	fd 4f       	sbci	r31, 0xFD	; 253
    2b86:	a0 81       	ld	r26, Z
    2b88:	b1 81       	ldd	r27, Z+1	; 0x01
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	fc 01       	movw	r30, r24
    2b96:	e4 55       	subi	r30, 0x54	; 84
    2b98:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	f0 81       	ld	r31, Z
    2b9e:	e0 2d       	mov	r30, r0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	48 2f       	mov	r20, r24
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	02 2e       	mov	r0, r18
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <DIO_s8SETPinVal+0x7a>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0a 94       	dec	r0
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <DIO_s8SETPinVal+0x76>
    2bba:	80 95       	com	r24
    2bbc:	84 23       	and	r24, r20
    2bbe:	8c 93       	st	X, r24
    2bc0:	2a c0       	rjmp	.+84     	; 0x2c16 <DIO_s8SETPinVal+0xda>
		}
		else if(enPortVal == HIGH)
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	39 f5       	brne	.+78     	; 0x2c16 <DIO_s8SETPinVal+0xda>
		{
			SetBit(*portReg[portID],pinID);
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e4 55       	subi	r30, 0x54	; 84
    2bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd8:	a0 81       	ld	r26, Z
    2bda:	b1 81       	ldd	r27, Z+1	; 0x01
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	fc 01       	movw	r30, r24
    2be8:	e4 55       	subi	r30, 0x54	; 84
    2bea:	fd 4f       	sbci	r31, 0xFD	; 253
    2bec:	01 90       	ld	r0, Z+
    2bee:	f0 81       	ld	r31, Z
    2bf0:	e0 2d       	mov	r30, r0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	48 2f       	mov	r20, r24
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	02 2e       	mov	r0, r18
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <DIO_s8SETPinVal+0xcc>
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	0a 94       	dec	r0
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <DIO_s8SETPinVal+0xc8>
    2c0c:	84 2b       	or	r24, r20
    2c0e:	8c 93       	st	X, r24
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <DIO_s8SETPinVal+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <DIO_s8TOGPinVal>:


Sint8_t DIO_s8TOGPinVal (enu_pin enPinCopy)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <DIO_s8TOGPinVal+0x6>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <DIO_s8TOGPinVal+0x8>
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	8c 83       	std	Y+4, r24	; 0x04
	Sint8_t errStatus = E_OK;
    2c36:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID)
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	80 32       	cpi	r24, 0x20	; 32
    2c3c:	68 f5       	brcc	.+90     	; 0x2c98 <DIO_s8TOGPinVal+0x70>
	{
		portID = enPinCopy/8;
    2c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c40:	86 95       	lsr	r24
    2c42:	86 95       	lsr	r24
    2c44:	86 95       	lsr	r24
    2c46:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	87 70       	andi	r24, 0x07	; 7
    2c4c:	89 83       	std	Y+1, r24	; 0x01

		TogBit(*portReg[portID],pinID);
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	88 2f       	mov	r24, r24
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e4 55       	subi	r30, 0x54	; 84
    2c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c5e:	a0 81       	ld	r26, Z
    2c60:	b1 81       	ldd	r27, Z+1	; 0x01
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e4 55       	subi	r30, 0x54	; 84
    2c70:	fd 4f       	sbci	r31, 0xFD	; 253
    2c72:	01 90       	ld	r0, Z+
    2c74:	f0 81       	ld	r31, Z
    2c76:	e0 2d       	mov	r30, r0
    2c78:	80 81       	ld	r24, Z
    2c7a:	48 2f       	mov	r20, r24
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	02 2e       	mov	r0, r18
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <DIO_s8TOGPinVal+0x66>
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	0a 94       	dec	r0
    2c90:	e2 f7       	brpl	.-8      	; 0x2c8a <DIO_s8TOGPinVal+0x62>
    2c92:	84 27       	eor	r24, r20
    2c94:	8c 93       	st	X, r24
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <DIO_s8TOGPinVal+0x74>
	}
	else
	{
		errStatus = E_NOK;
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <DIO_s8GETPinVal>:
 * 					- enPinCopy {DIO_PINA_0...., DIO_PIND_7}
 * 					- pu8Val address of variable that u want to save value on it
 * Return		:   Sint8_t
 */
Sint8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uint8_t* pu8Val)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <DIO_s8GETPinVal+0x6>
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <DIO_s8GETPinVal+0x8>
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <DIO_s8GETPinVal+0xa>
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	8c 83       	std	Y+4, r24	; 0x04
    2cbc:	7e 83       	std	Y+6, r23	; 0x06
    2cbe:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    2cc0:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;
	if (enPinCopy < PIN_INVALID)
    2cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc4:	80 32       	cpi	r24, 0x20	; 32
    2cc6:	28 f5       	brcc	.+74     	; 0x2d12 <DIO_s8GETPinVal+0x66>
	{
		portID = enPinCopy/8;
    2cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cca:	86 95       	lsr	r24
    2ccc:	86 95       	lsr	r24
    2cce:	86 95       	lsr	r24
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	87 70       	andi	r24, 0x07	; 7
    2cd6:	89 83       	std	Y+1, r24	; 0x01

		*pu8Val = GetBit(*pinReg[portID], pinID);
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e4 54       	subi	r30, 0x44	; 68
    2ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce8:	01 90       	ld	r0, Z+
    2cea:	f0 81       	ld	r31, Z
    2cec:	e0 2d       	mov	r30, r0
    2cee:	80 81       	ld	r24, Z
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	88 2f       	mov	r24, r24
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <DIO_s8GETPinVal+0x56>
    2cfe:	55 95       	asr	r21
    2d00:	47 95       	ror	r20
    2d02:	8a 95       	dec	r24
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <DIO_s8GETPinVal+0x52>
    2d06:	ca 01       	movw	r24, r20
    2d08:	81 70       	andi	r24, 0x01	; 1
    2d0a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d0c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d0e:	80 83       	st	Z, r24
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <DIO_s8GETPinVal+0x6a>

	}
	else
	{
		errStatus = E_NOK;
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <HLed_Init>:
//#include "../../MCAL/DIO/DIO_Interface.h"
#include "led.h"


enu_ledError_t HLed_Init(enu_pin en_pinNum)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <HLed_Init+0x6>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinNum < PIN_INVALID )
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	80 32       	cpi	r24, 0x20	; 32
    2d3e:	28 f4       	brcc	.+10     	; 0x2d4a <HLed_Init+0x20>
	{
		DIO_s8SETPinDir(en_pinNum, OUTPUT);
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <HLed_Init+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    2d4a:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <HLed_on>:

enu_ledError_t HLed_on(enu_pin en_pinx)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <HLed_on+0x6>
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	80 32       	cpi	r24, 0x20	; 32
    2d6c:	28 f4       	brcc	.+10     	; 0x2d78 <HLed_on+0x20>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <HLed_on+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    2d78:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <HLed_off>:



enu_ledError_t HLed_off(enu_pin en_pinx)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <HLed_off+0x6>
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	80 32       	cpi	r24, 0x20	; 32
    2d9a:	28 f4       	brcc	.+10     	; 0x2da6 <HLed_off+0x20>
	{
		DIO_s8SETPinVal(en_pinx, LOW);
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <HLed_off+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    2da6:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    2da8:	89 81       	ldd	r24, Y+1	; 0x01

}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <HLed_toggle>:


enu_ledError_t HLed_toggle(enu_pin en_pinx)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <HLed_toggle+0x6>
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    2dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc6:	80 32       	cpi	r24, 0x20	; 32
    2dc8:	20 f4       	brcc	.+8      	; 0x2dd2 <HLed_toggle+0x1e>
	{
		DIO_s8TOGPinVal(en_pinx);
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <DIO_s8TOGPinVal>
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <HLed_toggle+0x20>

	}
	else
	{
		errorStatus = LED_NOK;
    2dd2:	19 82       	std	Y+1, r1	; 0x01
	}

	return errorStatus;
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01

}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <KEYPAD_vidInit_V2>:
 * Description	: KEYPAD Initialization
 * in[1]		: void
 * Return		: void
 */
void KEYPAD_vidInit_V2()
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <KEYPAD_vidInit_V2+0x6>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
	Uint8_t local_u8Col;
	Uint8_t local_u8Row;

	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
    2dea:	1a 82       	std	Y+2, r1	; 0x02
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <KEYPAD_vidInit_V2+0x28>
	{
		DIO_s8SETPinDir(KEYPAD_strColPins[local_u8Col].key_pin ,OUTPUT);
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	fc 01       	movw	r30, r24
    2df6:	ec 52       	subi	r30, 0x2C	; 44
    2df8:	fd 4f       	sbci	r31, 0xFD	; 253
    2dfa:	80 81       	ld	r24, Z
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
void KEYPAD_vidInit_V2()
{
	Uint8_t local_u8Col;
	Uint8_t local_u8Row;

	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	8a 83       	std	Y+2, r24	; 0x02
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	84 30       	cpi	r24, 0x04	; 4
    2e0c:	80 f3       	brcs	.-32     	; 0x2dee <KEYPAD_vidInit_V2+0xe>
	{
		DIO_s8SETPinDir(KEYPAD_strColPins[local_u8Col].key_pin ,OUTPUT);
	}
	for (local_u8Row = 0; local_u8Row <KEYPAD_NO_ROW ; local_u8Row++)
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <KEYPAD_vidInit_V2+0x4c>
	{
		DIO_s8SETPinDir(KEYPAD_strRowPins[local_u8Row].key_pin ,INPUT);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	fc 01       	movw	r30, r24
    2e1a:	e8 52       	subi	r30, 0x28	; 40
    2e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1e:	80 81       	ld	r24, Z
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>

	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
	{
		DIO_s8SETPinDir(KEYPAD_strColPins[local_u8Col].key_pin ,OUTPUT);
	}
	for (local_u8Row = 0; local_u8Row <KEYPAD_NO_ROW ; local_u8Row++)
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	84 30       	cpi	r24, 0x04	; 4
    2e30:	80 f3       	brcs	.-32     	; 0x2e12 <KEYPAD_vidInit_V2+0x32>
	{
		DIO_s8SETPinDir(KEYPAD_strRowPins[local_u8Row].key_pin ,INPUT);
	}
	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
    2e32:	1a 82       	std	Y+2, r1	; 0x02
    2e34:	0d c0       	rjmp	.+26     	; 0x2e50 <KEYPAD_vidInit_V2+0x70>
	{
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,HIGH);
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	ec 52       	subi	r30, 0x2C	; 44
    2e40:	fd 4f       	sbci	r31, 0xFD	; 253
    2e42:	80 81       	ld	r24, Z
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	}
	for (local_u8Row = 0; local_u8Row <KEYPAD_NO_ROW ; local_u8Row++)
	{
		DIO_s8SETPinDir(KEYPAD_strRowPins[local_u8Row].key_pin ,INPUT);
	}
	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	84 30       	cpi	r24, 0x04	; 4
    2e54:	80 f3       	brcs	.-32     	; 0x2e36 <KEYPAD_vidInit_V2+0x56>
	{
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,HIGH);
	}
	for (local_u8Row = 0; local_u8Row <KEYPAD_NO_ROW ; local_u8Row++)
    2e56:	19 82       	std	Y+1, r1	; 0x01
    2e58:	0d c0       	rjmp	.+26     	; 0x2e74 <KEYPAD_vidInit_V2+0x94>
	{
		DIO_s8SETPinVal(KEYPAD_strRowPins[local_u8Row].key_pin ,HIGH);
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	88 2f       	mov	r24, r24
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	fc 01       	movw	r30, r24
    2e62:	e8 52       	subi	r30, 0x28	; 40
    2e64:	fd 4f       	sbci	r31, 0xFD	; 253
    2e66:	80 81       	ld	r24, Z
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	}
	for (local_u8Col = 0; local_u8Col <KEYPAD_NO_COL ; local_u8Col++)
	{
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,HIGH);
	}
	for (local_u8Row = 0; local_u8Row <KEYPAD_NO_ROW ; local_u8Row++)
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	84 30       	cpi	r24, 0x04	; 4
    2e78:	80 f3       	brcs	.-32     	; 0x2e5a <KEYPAD_vidInit_V2+0x7a>
	{
		DIO_s8SETPinVal(KEYPAD_strRowPins[local_u8Row].key_pin ,HIGH);
	}
}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <KEYPAD_u8GetPressed_V2>:
 * Description	: KEYPAG get pin status
 * in[1]		: void
 * Return		: Uint8_t {Pin Status}
 */
Uint8_t KEYPAD_u8GetPressed_V2(void)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	6f 97       	sbiw	r28, 0x1f	; 31
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
	static Uint8_t local_u8KeyPressed = NO_KEY_PRESSED;
	Uint8_t local_u8RowStatus;
	Uint8_t local_u8Col;
	Uint8_t local_u8Row;

	for(local_u8Col = 0; local_u8Col < KEYPAD_NO_COL ;local_u8Col++)
    2e98:	1e 8e       	std	Y+30, r1	; 0x1e
    2e9a:	38 c1       	rjmp	.+624    	; 0x310c <KEYPAD_u8GetPressed_V2+0x288>
	{
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,LOW);
    2e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	ec 52       	subi	r30, 0x2C	; 44
    2ea6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea8:	80 81       	ld	r24, Z
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
		for(local_u8Row = 0;local_u8Row < KEYPAD_NO_ROW;local_u8Row++)
    2eb0:	1d 8e       	std	Y+29, r1	; 0x1d
    2eb2:	1b c1       	rjmp	.+566    	; 0x30ea <KEYPAD_u8GetPressed_V2+0x266>
		{
			DIO_s8GETPinVal(KEYPAD_strRowPins[local_u8Row].key_pin, &local_u8RowStatus);
    2eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e8 52       	subi	r30, 0x28	; 40
    2ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    2ec0:	80 81       	ld	r24, Z
    2ec2:	9e 01       	movw	r18, r28
    2ec4:	21 5e       	subi	r18, 0xE1	; 225
    2ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec8:	b9 01       	movw	r22, r18
    2eca:	0e 94 56 16 	call	0x2cac	; 0x2cac <DIO_s8GETPinVal>
			if(!local_u8RowStatus)
    2ece:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ed0:	88 23       	and	r24, r24
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <KEYPAD_u8GetPressed_V2+0x52>
    2ed4:	07 c1       	rjmp	.+526    	; 0x30e4 <KEYPAD_u8GetPressed_V2+0x260>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	a8 ec       	ldi	r26, 0xC8	; 200
    2edc:	b1 e4       	ldi	r27, 0x41	; 65
    2ede:	89 8f       	std	Y+25, r24	; 0x19
    2ee0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	4a ef       	ldi	r20, 0xFA	; 250
    2ef4:	54 e4       	ldi	r21, 0x44	; 68
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	8d 8b       	std	Y+21, r24	; 0x15
    2f00:	9e 8b       	std	Y+22, r25	; 0x16
    2f02:	af 8b       	std	Y+23, r26	; 0x17
    2f04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e8       	ldi	r20, 0x80	; 128
    2f14:	5f e3       	ldi	r21, 0x3F	; 63
    2f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1a:	88 23       	and	r24, r24
    2f1c:	2c f4       	brge	.+10     	; 0x2f28 <KEYPAD_u8GetPressed_V2+0xa4>
		__ticks = 1;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
    2f26:	3f c0       	rjmp	.+126    	; 0x2fa6 <KEYPAD_u8GetPressed_V2+0x122>
	else if (__tmp > 65535)
    2f28:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	3f ef       	ldi	r19, 0xFF	; 255
    2f34:	4f e7       	ldi	r20, 0x7F	; 127
    2f36:	57 e4       	ldi	r21, 0x47	; 71
    2f38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3c:	18 16       	cp	r1, r24
    2f3e:	4c f5       	brge	.+82     	; 0x2f92 <KEYPAD_u8GetPressed_V2+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f40:	69 8d       	ldd	r22, Y+25	; 0x19
    2f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <KEYPAD_u8GetPressed_V2+0x104>
    2f6a:	88 ec       	ldi	r24, 0xC8	; 200
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9a 8b       	std	Y+18, r25	; 0x12
    2f70:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f72:	89 89       	ldd	r24, Y+17	; 0x11
    2f74:	9a 89       	ldd	r25, Y+18	; 0x12
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <KEYPAD_u8GetPressed_V2+0xf2>
    2f7a:	9a 8b       	std	Y+18, r25	; 0x12
    2f7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f80:	9c 89       	ldd	r25, Y+20	; 0x14
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	9c 8b       	std	Y+20, r25	; 0x14
    2f86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f88:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	69 f7       	brne	.-38     	; 0x2f6a <KEYPAD_u8GetPressed_V2+0xe6>
    2f90:	14 c0       	rjmp	.+40     	; 0x2fba <KEYPAD_u8GetPressed_V2+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	9c 8b       	std	Y+20, r25	; 0x14
    2fa4:	8b 8b       	std	Y+19, r24	; 0x13
    2fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2faa:	98 8b       	std	Y+16, r25	; 0x10
    2fac:	8f 87       	std	Y+15, r24	; 0x0f
    2fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb0:	98 89       	ldd	r25, Y+16	; 0x10
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <KEYPAD_u8GetPressed_V2+0x12e>
    2fb6:	98 8b       	std	Y+16, r25	; 0x10
    2fb8:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(25);
				DIO_s8GETPinVal(KEYPAD_strRowPins[local_u8Row].key_pin, &local_u8RowStatus);
    2fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e8 52       	subi	r30, 0x28	; 40
    2fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fc6:	80 81       	ld	r24, Z
    2fc8:	9e 01       	movw	r18, r28
    2fca:	21 5e       	subi	r18, 0xE1	; 225
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	b9 01       	movw	r22, r18
    2fd0:	0e 94 56 16 	call	0x2cac	; 0x2cac <DIO_s8GETPinVal>
				if(!local_u8RowStatus)
    2fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fd6:	88 23       	and	r24, r24
    2fd8:	99 f4       	brne	.+38     	; 0x3000 <KEYPAD_u8GetPressed_V2+0x17c>
				{
					local_u8KeyPressed = KEYPAD_au8KeyValV2[local_u8Row][local_u8Col];
    2fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fdc:	48 2f       	mov	r20, r24
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	ca 01       	movw	r24, r20
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	ec 53       	subi	r30, 0x3C	; 60
    2ff8:	fd 4f       	sbci	r31, 0xFD	; 253
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 93 f0 02 	sts	0x02F0, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a8 ec       	ldi	r26, 0xC8	; 200
    3006:	b1 e4       	ldi	r27, 0x41	; 65
    3008:	8b 87       	std	Y+11, r24	; 0x0b
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	ad 87       	std	Y+13, r26	; 0x0d
    300e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a ef       	ldi	r20, 0xFA	; 250
    301e:	54 e4       	ldi	r21, 0x44	; 68
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8f 83       	std	Y+7, r24	; 0x07
    302a:	98 87       	std	Y+8, r25	; 0x08
    302c:	a9 87       	std	Y+9, r26	; 0x09
    302e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3030:	6f 81       	ldd	r22, Y+7	; 0x07
    3032:	78 85       	ldd	r23, Y+8	; 0x08
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <KEYPAD_u8GetPressed_V2+0x1ce>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <KEYPAD_u8GetPressed_V2+0x24c>
	else if (__tmp > 65535)
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <KEYPAD_u8GetPressed_V2+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <KEYPAD_u8GetPressed_V2+0x22e>
    3094:	88 ec       	ldi	r24, 0xC8	; 200
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9c 83       	std	Y+4, r25	; 0x04
    309a:	8b 83       	std	Y+3, r24	; 0x03
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <KEYPAD_u8GetPressed_V2+0x21c>
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <KEYPAD_u8GetPressed_V2+0x210>
    30ba:	14 c0       	rjmp	.+40     	; 0x30e4 <KEYPAD_u8GetPressed_V2+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <KEYPAD_u8GetPressed_V2+0x258>
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
	Uint8_t local_u8Row;

	for(local_u8Col = 0; local_u8Col < KEYPAD_NO_COL ;local_u8Col++)
	{
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,LOW);
		for(local_u8Row = 0;local_u8Row < KEYPAD_NO_ROW;local_u8Row++)
    30e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e6:	8f 5f       	subi	r24, 0xFF	; 255
    30e8:	8d 8f       	std	Y+29, r24	; 0x1d
    30ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ec:	84 30       	cpi	r24, 0x04	; 4
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <KEYPAD_u8GetPressed_V2+0x26e>
    30f0:	e1 ce       	rjmp	.-574    	; 0x2eb4 <KEYPAD_u8GetPressed_V2+0x30>
					local_u8KeyPressed = KEYPAD_au8KeyValV2[local_u8Row][local_u8Col];
				}
				_delay_ms(25);
			}
		}
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,HIGH);
    30f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	fc 01       	movw	r30, r24
    30fa:	ec 52       	subi	r30, 0x2C	; 44
    30fc:	fd 4f       	sbci	r31, 0xFD	; 253
    30fe:	80 81       	ld	r24, Z
    3100:	61 e0       	ldi	r22, 0x01	; 1
    3102:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	static Uint8_t local_u8KeyPressed = NO_KEY_PRESSED;
	Uint8_t local_u8RowStatus;
	Uint8_t local_u8Col;
	Uint8_t local_u8Row;

	for(local_u8Col = 0; local_u8Col < KEYPAD_NO_COL ;local_u8Col++)
    3106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	8e 8f       	std	Y+30, r24	; 0x1e
    310c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    310e:	84 30       	cpi	r24, 0x04	; 4
    3110:	08 f4       	brcc	.+2      	; 0x3114 <KEYPAD_u8GetPressed_V2+0x290>
    3112:	c4 ce       	rjmp	.-632    	; 0x2e9c <KEYPAD_u8GetPressed_V2+0x18>
				_delay_ms(25);
			}
		}
		DIO_s8SETPinVal(KEYPAD_strColPins[local_u8Col].key_pin ,HIGH);
	}
	return local_u8KeyPressed;
    3114:	80 91 f0 02 	lds	r24, 0x02F0
}
    3118:	6f 96       	adiw	r28, 0x1f	; 31
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <HUART_enInit>:
#include "../../MCAL/UART/MUART_Interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "HUART_Interface.h"

en_huartErrStat_t HUART_enInit(Uint32_t copy_u32BaudRateH)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <HUART_enInit+0x6>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <HUART_enInit+0x8>
    3132:	0f 92       	push	r0
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	6a 83       	std	Y+2, r22	; 0x02
    313a:	7b 83       	std	Y+3, r23	; 0x03
    313c:	8c 83       	std	Y+4, r24	; 0x04
    313e:	9d 83       	std	Y+5, r25	; 0x05

	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    3140:	19 82       	std	Y+1, r1	; 0x01

	local_enErrorStatus = MUART_enInit(copy_u32BaudRateH);
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	9b 81       	ldd	r25, Y+3	; 0x03
    3146:	ac 81       	ldd	r26, Y+4	; 0x04
    3148:	bd 81       	ldd	r27, Y+5	; 0x05
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 4f 0b 	call	0x169e	; 0x169e <MUART_enInit>
    3152:	89 83       	std	Y+1, r24	; 0x01

	return local_enErrorStatus;
    3154:	89 81       	ldd	r24, Y+1	; 0x01
}
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <HUART_enSendData>:



en_huartErrStat_t HUART_enSendData(Uint8_t Copy_u8DataH)
{
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	00 d0       	rcall	.+0      	; 0x316c <HUART_enSendData+0x6>
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    3172:	19 82       	std	Y+1, r1	; 0x01

	local_enErrorStatus = MUART_enSendData(Copy_u8DataH);
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	0e 94 2a 0c 	call	0x1854	; 0x1854 <MUART_enSendData>
    317a:	89 83       	std	Y+1, r24	; 0x01

	return local_enErrorStatus;
    317c:	89 81       	ldd	r24, Y+1	; 0x01
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <HUART_enRecieveData>:



en_huartErrStat_t HUART_enRecieveData(Uint8_t* Ref_u8DataH)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	00 d0       	rcall	.+0      	; 0x318e <HUART_enRecieveData+0x6>
    318e:	0f 92       	push	r0
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	9b 83       	std	Y+3, r25	; 0x03
    3196:	8a 83       	std	Y+2, r24	; 0x02
	en_huartErrStat_t local_enErrorStatus = HUART_OK;
    3198:	19 82       	std	Y+1, r1	; 0x01

	local_enErrorStatus = MUART_enRecieveData(Ref_u8DataH);
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <MUART_enRecieveData>
    31a2:	89 83       	std	Y+1, r24	; 0x01

	return local_enErrorStatus;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <HUART_sendSTRING>:




void HUART_sendSTRING(Uint8_t * Hstr)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <HUART_sendSTRING+0x6>
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01
	MUART_sendSTRING(Hstr);
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <MUART_sendSTRING>
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <HUART_ClearScreen>:


void HUART_ClearScreen() {
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    // ANSI escape sequence for clearing the screen
	MUART_sendSTRING( (const Uint8_t*) "\033[2J\033[H");  // ESC[2J
    31da:	80 e6       	ldi	r24, 0x60	; 96
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <MUART_sendSTRING>
}
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <HUART_receiveSTRING>:


void HUART_receiveSTRING(Uint8_t * Hstr ,Uint8_t Hsize )
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <HUART_receiveSTRING+0x6>
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	6b 83       	std	Y+3, r22	; 0x03
	MUART_receiveSTRING(Hstr ,Hsize );
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	6b 81       	ldd	r22, Y+3	; 0x03
    3200:	0e 94 9b 0c 	call	0x1936	; 0x1936 <MUART_receiveSTRING>
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <HTimer_enInit>:

/*************************************************************************************************************
 * 							Function Implementation
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	0f 92       	push	r0
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	enu_HTimerError_t errorStatus = TIMER_OK;
    321a:	19 82       	std	Y+1, r1	; 0x01

	(void)enuTimer2_init (OVF_MODE);
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_128);
    3222:	85 e0       	ldi	r24, 0x05	; 5
    3224:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <u8Timer2_setPrescallar>
	//(void)vidTimer2_OvfIrqEnable();
	(void)vidTimer2_OvfIrqDisable();
    3228:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <vidTimer2_OvfIrqDisable>

	return errorStatus;
    322c:	89 81       	ldd	r24, Y+1	; 0x01

}
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <HTimer_vidDelayMs+0x6>
    323c:	00 d0       	rcall	.+0      	; 0x323e <HTimer_vidDelayMs+0x8>
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	69 83       	std	Y+1, r22	; 0x01
    3244:	7a 83       	std	Y+2, r23	; 0x02
    3246:	8b 83       	std	Y+3, r24	; 0x03
    3248:	9c 83       	std	Y+4, r25	; 0x04
	(void)u8Timer2_setTime_ms(u32_delay);
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	ab 81       	ldd	r26, Y+3	; 0x03
    3250:	bc 81       	ldd	r27, Y+4	; 0x04
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
    325a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <vidTimer2_start>
	MTIMER2_vidSynch();
    325e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <MTIMER2_vidSynch>
}
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <HTimer_enStop>:
/*************************************************************************************************************/

enu_HTimerError_t HTimer_enStop(void)
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	0f 92       	push	r0
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
    327a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vidTimer2_stop>
    327e:	89 83       	std	Y+1, r24	; 0x01

	return errorStatus;
    3280:	89 81       	ldd	r24, Y+1	; 0x01

}
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <HTimer_enCBF+0x6>
    3290:	0f 92       	push	r0
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	9b 83       	std	Y+3, r25	; 0x03
    3298:	8a 83       	std	Y+2, r24	; 0x02
	enu_HTimerError_t errorStatus = TIMER_OK;
    329a:	19 82       	std	Y+1, r1	; 0x01

	if(pFunc != NULL)
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	9b 81       	ldd	r25, Y+3	; 0x03
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	29 f0       	breq	.+10     	; 0x32ae <HTimer_enCBF+0x24>
	{
		vidTimer2_setcbf_OVF(pFunc);
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	9b 81       	ldd	r25, Y+3	; 0x03
    32a8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vidTimer2_setcbf_OVF>
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <HTimer_enCBF+0x28>

	}else{
		errorStatus = TIMER_NOK;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    32b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <HSPI_enMasterInit>:


en_masterSlave_t g_en_master_slave_sel = SPI_INVALID;

enu_HSPI_status_t HSPI_enMasterInit(enu_spiPrescalar_t copy_enPrecalar)
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <HSPI_enMasterInit+0x6>
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	8a 83       	std	Y+2, r24	; 0x02
	enu_HSPI_status_t HSPI_status = HSPI_OK;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	89 83       	std	Y+1, r24	; 0x01

	(void)DIO_s8SETPinDir (SS_PIN	, OUTPUT);
    32d0:	8c e0       	ldi	r24, 0x0C	; 12
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (MOSI_PIN	, OUTPUT);
    32d8:	8d e0       	ldi	r24, 0x0D	; 13
    32da:	61 e0       	ldi	r22, 0x01	; 1
    32dc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (MISO_PIN	, INPUT	);
    32e0:	8e e0       	ldi	r24, 0x0E	; 14
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (SCK_PIN	, OUTPUT);
    32e8:	8f e0       	ldi	r24, 0x0F	; 15
    32ea:	61 e0       	ldi	r22, 0x01	; 1
    32ec:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>

	(void)DIO_s8SETPinVal (SS_PIN	, HIGH);
    32f0:	8c e0       	ldi	r24, 0x0C	; 12
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

	HSPI_status &= MSPI_enMasterInit(copy_enPrecalar);
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <MSPI_enMasterInit>
    32fe:	98 2f       	mov	r25, r24
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	89 23       	and	r24, r25
    3304:	89 83       	std	Y+1, r24	; 0x01

	g_en_master_slave_sel = SPI_MASTER;
    3306:	10 92 dc 02 	sts	0x02DC, r1

	return HSPI_status;
    330a:	89 81       	ldd	r24, Y+1	; 0x01
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <HSPI_enSlaveInit>:



enu_HSPI_status_t HSPI_enSlaveInit(void)
{
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	0f 92       	push	r0
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
	enu_HSPI_status_t HSPI_status = HSPI_OK;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	89 83       	std	Y+1, r24	; 0x01

	(void)DIO_s8SETPinDir (SS_PIN	, INPUT	);
    3324:	8c e0       	ldi	r24, 0x0C	; 12
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (MOSI_PIN	, INPUT	);
    332c:	8d e0       	ldi	r24, 0x0D	; 13
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (MISO_PIN	, OUTPUT);
    3334:	8e e0       	ldi	r24, 0x0E	; 14
    3336:	61 e0       	ldi	r22, 0x01	; 1
    3338:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	(void)DIO_s8SETPinDir (SCK_PIN	, INPUT	);
    333c:	8f e0       	ldi	r24, 0x0F	; 15
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>

	HSPI_status &= MSPI_enSlaveInit();
    3344:	0e 94 64 10 	call	0x20c8	; 0x20c8 <MSPI_enSlaveInit>
    3348:	98 2f       	mov	r25, r24
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	89 23       	and	r24, r25
    334e:	89 83       	std	Y+1, r24	; 0x01

	g_en_master_slave_sel = SPI_SLAVE;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	80 93 dc 02 	sts	0x02DC, r24

	return HSPI_status;
    3356:	89 81       	ldd	r24, Y+1	; 0x01
}
    3358:	0f 90       	pop	r0
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <HSPI_vidTransmitChar>:



void HSPI_vidTransmitChar(Uint8_t copy_u8_data)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	0f 92       	push	r0
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	89 83       	std	Y+1, r24	; 0x01
	if (g_en_master_slave_sel == SPI_MASTER)
    336c:	80 91 dc 02 	lds	r24, 0x02DC
    3370:	88 23       	and	r24, r24
    3372:	21 f4       	brne	.+8      	; 0x337c <HSPI_vidTransmitChar+0x1c>
	{
		(void)DIO_s8SETPinVal (SS_PIN	, LOW);
    3374:	8c e0       	ldi	r24, 0x0C	; 12
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	}

	MSPI_vidTransmitChar(copy_u8_data);
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	0e 94 93 10 	call	0x2126	; 0x2126 <MSPI_vidTransmitChar>
}
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <HSPI_enReceiveChar>:



enu_HSPI_status_t HSPI_enReceiveChar(Uint8_t* ref_u8_data)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <HSPI_enReceiveChar+0x6>
    3390:	0f 92       	push	r0
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	9b 83       	std	Y+3, r25	; 0x03
    3398:	8a 83       	std	Y+2, r24	; 0x02
	enu_HSPI_status_t HSPI_status = HSPI_OK;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	89 83       	std	Y+1, r24	; 0x01

	HSPI_status &= MSPI_enReceiveChar(ref_u8_data);
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	9b 81       	ldd	r25, Y+3	; 0x03
    33a2:	0e 94 ab 10 	call	0x2156	; 0x2156 <MSPI_enReceiveChar>
    33a6:	98 2f       	mov	r25, r24
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	89 23       	and	r24, r25
    33ac:	89 83       	std	Y+1, r24	; 0x01

	return HSPI_status;
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <HSPI_vidTransmitString>:




void HSPI_vidTransmitString(const Uint8_t* copy_ref_u8_str)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <HSPI_vidTransmitString+0x6>
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 83       	std	Y+1, r24	; 0x01
	if (copy_ref_u8_str != NULL)
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	d9 f0       	breq	.+54     	; 0x3408 <HSPI_vidTransmitString+0x4c>
	{
		if (g_en_master_slave_sel == SPI_MASTER)
    33d2:	80 91 dc 02 	lds	r24, 0x02DC
    33d6:	88 23       	and	r24, r24
    33d8:	79 f4       	brne	.+30     	; 0x33f8 <HSPI_vidTransmitString+0x3c>
		{
			(void)DIO_s8SETPinVal (SS_PIN	, LOW);
    33da:	8c e0       	ldi	r24, 0x0C	; 12
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    33e2:	0a c0       	rjmp	.+20     	; 0x33f8 <HSPI_vidTransmitString+0x3c>
		}

		while(*copy_ref_u8_str)
		{
			MSPI_vidTransmitChar(*copy_ref_u8_str);
    33e4:	e9 81       	ldd	r30, Y+1	; 0x01
    33e6:	fa 81       	ldd	r31, Y+2	; 0x02
    33e8:	80 81       	ld	r24, Z
    33ea:	0e 94 93 10 	call	0x2126	; 0x2126 <MSPI_vidTransmitChar>
			copy_ref_u8_str++;
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
		if (g_en_master_slave_sel == SPI_MASTER)
		{
			(void)DIO_s8SETPinVal (SS_PIN	, LOW);
		}

		while(*copy_ref_u8_str)
    33f8:	e9 81       	ldd	r30, Y+1	; 0x01
    33fa:	fa 81       	ldd	r31, Y+2	; 0x02
    33fc:	80 81       	ld	r24, Z
    33fe:	88 23       	and	r24, r24
    3400:	89 f7       	brne	.-30     	; 0x33e4 <HSPI_vidTransmitString+0x28>
		{
			MSPI_vidTransmitChar(*copy_ref_u8_str);
			copy_ref_u8_str++;
		}
		MSPI_vidTransmitChar('\0');
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	0e 94 93 10 	call	0x2126	; 0x2126 <MSPI_vidTransmitChar>
	}
}
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <HSPI_enReceiveString>:




enu_HSPI_status_t HSPI_enReceiveString(Uint8_t* ref_u8_buffer, Uint8_t length)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	28 97       	sbiw	r28, 0x08	; 8
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	9f 83       	std	Y+7, r25	; 0x07
    3428:	8e 83       	std	Y+6, r24	; 0x06
    342a:	68 87       	std	Y+8, r22	; 0x08
	enu_HSPI_status_t HSPI_status = HSPI_OK;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	8d 83       	std	Y+5, r24	; 0x05
	Uint32_t buffer_index;

	if (ref_u8_buffer != NULL && length > 0)
    3430:	8e 81       	ldd	r24, Y+6	; 0x06
    3432:	9f 81       	ldd	r25, Y+7	; 0x07
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	d1 f1       	breq	.+116    	; 0x34ac <HSPI_enReceiveString+0x9a>
    3438:	88 85       	ldd	r24, Y+8	; 0x08
    343a:	88 23       	and	r24, r24
    343c:	b9 f1       	breq	.+110    	; 0x34ac <HSPI_enReceiveString+0x9a>
	{
		for (buffer_index = 0; buffer_index < length-1 ; buffer_index++)
    343e:	19 82       	std	Y+1, r1	; 0x01
    3440:	1a 82       	std	Y+2, r1	; 0x02
    3442:	1b 82       	std	Y+3, r1	; 0x03
    3444:	1c 82       	std	Y+4, r1	; 0x04
    3446:	17 c0       	rjmp	.+46     	; 0x3476 <HSPI_enReceiveString+0x64>
		{
			HSPI_status &= MSPI_enReceiveChar(ref_u8_buffer+buffer_index);
    3448:	29 81       	ldd	r18, Y+1	; 0x01
    344a:	3a 81       	ldd	r19, Y+2	; 0x02
    344c:	8e 81       	ldd	r24, Y+6	; 0x06
    344e:	9f 81       	ldd	r25, Y+7	; 0x07
    3450:	82 0f       	add	r24, r18
    3452:	93 1f       	adc	r25, r19
    3454:	0e 94 ab 10 	call	0x2156	; 0x2156 <MSPI_enReceiveChar>
    3458:	98 2f       	mov	r25, r24
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	89 23       	and	r24, r25
    345e:	8d 83       	std	Y+5, r24	; 0x05
	enu_HSPI_status_t HSPI_status = HSPI_OK;
	Uint32_t buffer_index;

	if (ref_u8_buffer != NULL && length > 0)
	{
		for (buffer_index = 0; buffer_index < length-1 ; buffer_index++)
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	ab 81       	ldd	r26, Y+3	; 0x03
    3466:	bc 81       	ldd	r27, Y+4	; 0x04
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	a1 1d       	adc	r26, r1
    346c:	b1 1d       	adc	r27, r1
    346e:	89 83       	std	Y+1, r24	; 0x01
    3470:	9a 83       	std	Y+2, r25	; 0x02
    3472:	ab 83       	std	Y+3, r26	; 0x03
    3474:	bc 83       	std	Y+4, r27	; 0x04
    3476:	88 85       	ldd	r24, Y+8	; 0x08
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	9c 01       	movw	r18, r24
    3480:	44 27       	eor	r20, r20
    3482:	37 fd       	sbrc	r19, 7
    3484:	40 95       	com	r20
    3486:	54 2f       	mov	r21, r20
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	ab 81       	ldd	r26, Y+3	; 0x03
    348e:	bc 81       	ldd	r27, Y+4	; 0x04
    3490:	82 17       	cp	r24, r18
    3492:	93 07       	cpc	r25, r19
    3494:	a4 07       	cpc	r26, r20
    3496:	b5 07       	cpc	r27, r21
    3498:	b8 f2       	brcs	.-82     	; 0x3448 <HSPI_enReceiveString+0x36>
		{
			HSPI_status &= MSPI_enReceiveChar(ref_u8_buffer+buffer_index);
		}

		ref_u8_buffer[buffer_index] = '\0';
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	2e 81       	ldd	r18, Y+6	; 0x06
    34a0:	3f 81       	ldd	r19, Y+7	; 0x07
    34a2:	f9 01       	movw	r30, r18
    34a4:	e8 0f       	add	r30, r24
    34a6:	f9 1f       	adc	r31, r25
    34a8:	10 82       	st	Z, r1
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <HSPI_enReceiveString+0x9c>
	}
	else
	{
	   HSPI_status = HSPI_NOK;
    34ac:	1d 82       	std	Y+5, r1	; 0x05
	}
	return HSPI_status;
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    34b0:	28 96       	adiw	r28, 0x08	; 8
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <HLCD_vidInit>:
 * description 	: func to set LCD initialization
 * input param 	: void
 * return		: void
 **/
void HLCD_vidInit(void)
{
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	c5 55       	subi	r28, 0x55	; 85
    34d0:	d0 40       	sbci	r29, 0x00	; 0
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    34dc:	fe 01       	movw	r30, r28
    34de:	eb 5a       	subi	r30, 0xAB	; 171
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	10 82       	st	Z, r1
    34e4:	16 c0       	rjmp	.+44     	; 0x3512 <HLCD_vidInit+0x50>
	{
		DIO_s8SETPinDir(dataPin[i].en_dataPin,OUTPUT);
    34e6:	fe 01       	movw	r30, r28
    34e8:	eb 5a       	subi	r30, 0xAB	; 171
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	80 81       	ld	r24, Z
    34ee:	88 2f       	mov	r24, r24
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	fc 01       	movw	r30, r24
    34f4:	e3 52       	subi	r30, 0x23	; 35
    34f6:	fd 4f       	sbci	r31, 0xFD	; 253
    34f8:	80 81       	ld	r24, Z
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
 * input param 	: void
 * return		: void
 **/
void HLCD_vidInit(void)
{
	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    3500:	de 01       	movw	r26, r28
    3502:	ab 5a       	subi	r26, 0xAB	; 171
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	eb 5a       	subi	r30, 0xAB	; 171
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	8c 93       	st	X, r24
    3512:	fe 01       	movw	r30, r28
    3514:	eb 5a       	subi	r30, 0xAB	; 171
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	80 81       	ld	r24, Z
    351a:	84 30       	cpi	r24, 0x04	; 4
    351c:	20 f3       	brcs	.-56     	; 0x34e6 <HLCD_vidInit+0x24>
	{
		DIO_s8SETPinDir(dataPin[i].en_dataPin,OUTPUT);
	}

	DIO_s8SETPinDir(LCD_RS_PORT_PIN,OUTPUT);
    351e:	84 e0       	ldi	r24, 0x04	; 4
    3520:	61 e0       	ldi	r22, 0x01	; 1
    3522:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(LCD_RW_PORT_PIN,OUTPUT);
    3526:	85 e0       	ldi	r24, 0x05	; 5
    3528:	61 e0       	ldi	r22, 0x01	; 1
    352a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(LCD_EN_PORT_PIN,OUTPUT);
    352e:	86 e0       	ldi	r24, 0x06	; 6
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
    3536:	fe 01       	movw	r30, r28
    3538:	ef 5a       	subi	r30, 0xAF	; 175
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a0 e2       	ldi	r26, 0x20	; 32
    3542:	b2 e4       	ldi	r27, 0x42	; 66
    3544:	80 83       	st	Z, r24
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	a2 83       	std	Z+2, r26	; 0x02
    354a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354c:	8e 01       	movw	r16, r28
    354e:	03 5b       	subi	r16, 0xB3	; 179
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	fe 01       	movw	r30, r28
    3554:	ef 5a       	subi	r30, 0xAF	; 175
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	4a ef       	ldi	r20, 0xFA	; 250
    3566:	54 e4       	ldi	r21, 0x44	; 68
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	f8 01       	movw	r30, r16
    3572:	80 83       	st	Z, r24
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	a2 83       	std	Z+2, r26	; 0x02
    3578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357a:	fe 01       	movw	r30, r28
    357c:	e3 5b       	subi	r30, 0xB3	; 179
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3594:	88 23       	and	r24, r24
    3596:	44 f4       	brge	.+16     	; 0x35a8 <HLCD_vidInit+0xe6>
		__ticks = 1;
    3598:	fe 01       	movw	r30, r28
    359a:	e5 5b       	subi	r30, 0xB5	; 181
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	91 83       	std	Z+1, r25	; 0x01
    35a4:	80 83       	st	Z, r24
    35a6:	64 c0       	rjmp	.+200    	; 0x3670 <HLCD_vidInit+0x1ae>
	else if (__tmp > 65535)
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 5b       	subi	r30, 0xB3	; 179
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	3f ef       	ldi	r19, 0xFF	; 255
    35ba:	4f e7       	ldi	r20, 0x7F	; 127
    35bc:	57 e4       	ldi	r21, 0x47	; 71
    35be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c2:	18 16       	cp	r1, r24
    35c4:	0c f0       	brlt	.+2      	; 0x35c8 <HLCD_vidInit+0x106>
    35c6:	43 c0       	rjmp	.+134    	; 0x364e <HLCD_vidInit+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c8:	fe 01       	movw	r30, r28
    35ca:	ef 5a       	subi	r30, 0xAF	; 175
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	60 81       	ld	r22, Z
    35d0:	71 81       	ldd	r23, Z+1	; 0x01
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e2       	ldi	r20, 0x20	; 32
    35dc:	51 e4       	ldi	r21, 0x41	; 65
    35de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8e 01       	movw	r16, r28
    35e8:	05 5b       	subi	r16, 0xB5	; 181
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	f8 01       	movw	r30, r16
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	80 83       	st	Z, r24
    35fe:	1f c0       	rjmp	.+62     	; 0x363e <HLCD_vidInit+0x17c>
    3600:	fe 01       	movw	r30, r28
    3602:	e7 5b       	subi	r30, 0xB7	; 183
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	80 83       	st	Z, r24
    360e:	fe 01       	movw	r30, r28
    3610:	e7 5b       	subi	r30, 0xB7	; 183
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <HLCD_vidInit+0x156>
    361c:	fe 01       	movw	r30, r28
    361e:	e7 5b       	subi	r30, 0xB7	; 183
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3626:	de 01       	movw	r26, r28
    3628:	a5 5b       	subi	r26, 0xB5	; 181
    362a:	bf 4f       	sbci	r27, 0xFF	; 255
    362c:	fe 01       	movw	r30, r28
    362e:	e5 5b       	subi	r30, 0xB5	; 181
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	91 81       	ldd	r25, Z+1	; 0x01
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	11 96       	adiw	r26, 0x01	; 1
    363a:	9c 93       	st	X, r25
    363c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	fe 01       	movw	r30, r28
    3640:	e5 5b       	subi	r30, 0xB5	; 181
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 81       	ld	r24, Z
    3646:	91 81       	ldd	r25, Z+1	; 0x01
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	d1 f6       	brne	.-76     	; 0x3600 <HLCD_vidInit+0x13e>
    364c:	27 c0       	rjmp	.+78     	; 0x369c <HLCD_vidInit+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364e:	8e 01       	movw	r16, r28
    3650:	05 5b       	subi	r16, 0xB5	; 181
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	e3 5b       	subi	r30, 0xB3	; 179
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	f8 01       	movw	r30, r16
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	de 01       	movw	r26, r28
    3672:	a9 5b       	subi	r26, 0xB9	; 185
    3674:	bf 4f       	sbci	r27, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	e5 5b       	subi	r30, 0xB5	; 181
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 81       	ld	r24, Z
    367e:	91 81       	ldd	r25, Z+1	; 0x01
    3680:	8d 93       	st	X+, r24
    3682:	9c 93       	st	X, r25
    3684:	fe 01       	movw	r30, r28
    3686:	e9 5b       	subi	r30, 0xB9	; 185
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <HLCD_vidInit+0x1cc>
    3692:	fe 01       	movw	r30, r28
    3694:	e9 5b       	subi	r30, 0xB9	; 185
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	80 83       	st	Z, r24

	_delay_ms(40);

	HLCD_vidWritecmd(HLCD_CURSOR_HOME);
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    36a2:	fe 01       	movw	r30, r28
    36a4:	ed 5b       	subi	r30, 0xBD	; 189
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e8       	ldi	r26, 0x80	; 128
    36ae:	bf e3       	ldi	r27, 0x3F	; 63
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	a2 83       	std	Z+2, r26	; 0x02
    36b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	8e 01       	movw	r16, r28
    36ba:	01 5c       	subi	r16, 0xC1	; 193
    36bc:	1f 4f       	sbci	r17, 0xFF	; 255
    36be:	fe 01       	movw	r30, r28
    36c0:	ed 5b       	subi	r30, 0xBD	; 189
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	f8 01       	movw	r30, r16
    36de:	80 83       	st	Z, r24
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	a2 83       	std	Z+2, r26	; 0x02
    36e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e6:	fe 01       	movw	r30, r28
    36e8:	ff 96       	adiw	r30, 0x3f	; 63
    36ea:	60 81       	ld	r22, Z
    36ec:	71 81       	ldd	r23, Z+1	; 0x01
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <HLCD_vidInit+0x24a>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9e af       	std	Y+62, r25	; 0x3e
    3708:	8d af       	std	Y+61, r24	; 0x3d
    370a:	46 c0       	rjmp	.+140    	; 0x3798 <HLCD_vidInit+0x2d6>
	else if (__tmp > 65535)
    370c:	fe 01       	movw	r30, r28
    370e:	ff 96       	adiw	r30, 0x3f	; 63
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	3f ef       	ldi	r19, 0xFF	; 255
    371c:	4f e7       	ldi	r20, 0x7F	; 127
    371e:	57 e4       	ldi	r21, 0x47	; 71
    3720:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3724:	18 16       	cp	r1, r24
    3726:	64 f5       	brge	.+88     	; 0x3780 <HLCD_vidInit+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3728:	fe 01       	movw	r30, r28
    372a:	ed 5b       	subi	r30, 0xBD	; 189
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e2       	ldi	r20, 0x20	; 32
    373c:	51 e4       	ldi	r21, 0x41	; 65
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9e af       	std	Y+62, r25	; 0x3e
    3754:	8d af       	std	Y+61, r24	; 0x3d
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <HLCD_vidInit+0x2b4>
    3758:	88 ec       	ldi	r24, 0xC8	; 200
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9c af       	std	Y+60, r25	; 0x3c
    375e:	8b af       	std	Y+59, r24	; 0x3b
    3760:	8b ad       	ldd	r24, Y+59	; 0x3b
    3762:	9c ad       	ldd	r25, Y+60	; 0x3c
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <HLCD_vidInit+0x2a2>
    3768:	9c af       	std	Y+60, r25	; 0x3c
    376a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376c:	8d ad       	ldd	r24, Y+61	; 0x3d
    376e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	9e af       	std	Y+62, r25	; 0x3e
    3774:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3776:	8d ad       	ldd	r24, Y+61	; 0x3d
    3778:	9e ad       	ldd	r25, Y+62	; 0x3e
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	69 f7       	brne	.-38     	; 0x3758 <HLCD_vidInit+0x296>
    377e:	16 c0       	rjmp	.+44     	; 0x37ac <HLCD_vidInit+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3780:	fe 01       	movw	r30, r28
    3782:	ff 96       	adiw	r30, 0x3f	; 63
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e af       	std	Y+62, r25	; 0x3e
    3796:	8d af       	std	Y+61, r24	; 0x3d
    3798:	8d ad       	ldd	r24, Y+61	; 0x3d
    379a:	9e ad       	ldd	r25, Y+62	; 0x3e
    379c:	9a af       	std	Y+58, r25	; 0x3a
    379e:	89 af       	std	Y+57, r24	; 0x39
    37a0:	89 ad       	ldd	r24, Y+57	; 0x39
    37a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <HLCD_vidInit+0x2e2>
    37a8:	9a af       	std	Y+58, r25	; 0x3a
    37aa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
#if HLCD_MODE == HLCD_4_BIT_MODE

	HLCD_vidWritecmd(HLCD_4_BIT_MODE_SELECTION);
    37ac:	88 e2       	ldi	r24, 0x28	; 40
    37ae:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e8       	ldi	r26, 0x80	; 128
    37b8:	bf e3       	ldi	r27, 0x3F	; 63
    37ba:	8d ab       	std	Y+53, r24	; 0x35
    37bc:	9e ab       	std	Y+54, r25	; 0x36
    37be:	af ab       	std	Y+55, r26	; 0x37
    37c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6d a9       	ldd	r22, Y+53	; 0x35
    37c4:	7e a9       	ldd	r23, Y+54	; 0x36
    37c6:	8f a9       	ldd	r24, Y+55	; 0x37
    37c8:	98 ad       	ldd	r25, Y+56	; 0x38
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	89 ab       	std	Y+49, r24	; 0x31
    37dc:	9a ab       	std	Y+50, r25	; 0x32
    37de:	ab ab       	std	Y+51, r26	; 0x33
    37e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37e2:	69 a9       	ldd	r22, Y+49	; 0x31
    37e4:	7a a9       	ldd	r23, Y+50	; 0x32
    37e6:	8b a9       	ldd	r24, Y+51	; 0x33
    37e8:	9c a9       	ldd	r25, Y+52	; 0x34
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <HLCD_vidInit+0x342>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	98 ab       	std	Y+48, r25	; 0x30
    3800:	8f a7       	std	Y+47, r24	; 0x2f
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <HLCD_vidInit+0x3c0>
	else if (__tmp > 65535)
    3804:	69 a9       	ldd	r22, Y+49	; 0x31
    3806:	7a a9       	ldd	r23, Y+50	; 0x32
    3808:	8b a9       	ldd	r24, Y+51	; 0x33
    380a:	9c a9       	ldd	r25, Y+52	; 0x34
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <HLCD_vidInit+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6d a9       	ldd	r22, Y+53	; 0x35
    381e:	7e a9       	ldd	r23, Y+54	; 0x36
    3820:	8f a9       	ldd	r24, Y+55	; 0x37
    3822:	98 ad       	ldd	r25, Y+56	; 0x38
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	98 ab       	std	Y+48, r25	; 0x30
    3842:	8f a7       	std	Y+47, r24	; 0x2f
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <HLCD_vidInit+0x3a2>
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9e a7       	std	Y+46, r25	; 0x2e
    384c:	8d a7       	std	Y+45, r24	; 0x2d
    384e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3850:	9e a5       	ldd	r25, Y+46	; 0x2e
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <HLCD_vidInit+0x390>
    3856:	9e a7       	std	Y+46, r25	; 0x2e
    3858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8f a5       	ldd	r24, Y+47	; 0x2f
    385c:	98 a9       	ldd	r25, Y+48	; 0x30
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	98 ab       	std	Y+48, r25	; 0x30
    3862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8f a5       	ldd	r24, Y+47	; 0x2f
    3866:	98 a9       	ldd	r25, Y+48	; 0x30
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <HLCD_vidInit+0x384>
    386c:	14 c0       	rjmp	.+40     	; 0x3896 <HLCD_vidInit+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	69 a9       	ldd	r22, Y+49	; 0x31
    3870:	7a a9       	ldd	r23, Y+50	; 0x32
    3872:	8b a9       	ldd	r24, Y+51	; 0x33
    3874:	9c a9       	ldd	r25, Y+52	; 0x34
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	98 ab       	std	Y+48, r25	; 0x30
    3880:	8f a7       	std	Y+47, r24	; 0x2f
    3882:	8f a5       	ldd	r24, Y+47	; 0x2f
    3884:	98 a9       	ldd	r25, Y+48	; 0x30
    3886:	9c a7       	std	Y+44, r25	; 0x2c
    3888:	8b a7       	std	Y+43, r24	; 0x2b
    388a:	8b a5       	ldd	r24, Y+43	; 0x2b
    388c:	9c a5       	ldd	r25, Y+44	; 0x2c
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <HLCD_vidInit+0x3cc>
    3892:	9c a7       	std	Y+44, r25	; 0x2c
    3894:	8b a7       	std	Y+43, r24	; 0x2b

#elif HLCD_MODE == HLCD_8_BIT_MODE
	HLCD_vidWritecmd(HLCD_8_BIT_MODE_SELECTION);
	_delay_ms(1);
#endif
	HLCD_vidWritecmd(HLCD_CLEAR_DISPLAY);
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e8       	ldi	r26, 0x80	; 128
    38a2:	b0 e4       	ldi	r27, 0x40	; 64
    38a4:	8f a3       	std	Y+39, r24	; 0x27
    38a6:	98 a7       	std	Y+40, r25	; 0x28
    38a8:	a9 a7       	std	Y+41, r26	; 0x29
    38aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	6f a1       	ldd	r22, Y+39	; 0x27
    38ae:	78 a5       	ldd	r23, Y+40	; 0x28
    38b0:	89 a5       	ldd	r24, Y+41	; 0x29
    38b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a ef       	ldi	r20, 0xFA	; 250
    38ba:	54 e4       	ldi	r21, 0x44	; 68
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	8b a3       	std	Y+35, r24	; 0x23
    38c6:	9c a3       	std	Y+36, r25	; 0x24
    38c8:	ad a3       	std	Y+37, r26	; 0x25
    38ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38cc:	6b a1       	ldd	r22, Y+35	; 0x23
    38ce:	7c a1       	ldd	r23, Y+36	; 0x24
    38d0:	8d a1       	ldd	r24, Y+37	; 0x25
    38d2:	9e a1       	ldd	r25, Y+38	; 0x26
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <HLCD_vidInit+0x42c>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9a a3       	std	Y+34, r25	; 0x22
    38ea:	89 a3       	std	Y+33, r24	; 0x21
    38ec:	3f c0       	rjmp	.+126    	; 0x396c <HLCD_vidInit+0x4aa>
	else if (__tmp > 65535)
    38ee:	6b a1       	ldd	r22, Y+35	; 0x23
    38f0:	7c a1       	ldd	r23, Y+36	; 0x24
    38f2:	8d a1       	ldd	r24, Y+37	; 0x25
    38f4:	9e a1       	ldd	r25, Y+38	; 0x26
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	4f e7       	ldi	r20, 0x7F	; 127
    38fc:	57 e4       	ldi	r21, 0x47	; 71
    38fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	4c f5       	brge	.+82     	; 0x3958 <HLCD_vidInit+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	6f a1       	ldd	r22, Y+39	; 0x27
    3908:	78 a5       	ldd	r23, Y+40	; 0x28
    390a:	89 a5       	ldd	r24, Y+41	; 0x29
    390c:	9a a5       	ldd	r25, Y+42	; 0x2a
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9a a3       	std	Y+34, r25	; 0x22
    392c:	89 a3       	std	Y+33, r24	; 0x21
    392e:	0f c0       	rjmp	.+30     	; 0x394e <HLCD_vidInit+0x48c>
    3930:	88 ec       	ldi	r24, 0xC8	; 200
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	98 a3       	std	Y+32, r25	; 0x20
    3936:	8f 8f       	std	Y+31, r24	; 0x1f
    3938:	8f 8d       	ldd	r24, Y+31	; 0x1f
    393a:	98 a1       	ldd	r25, Y+32	; 0x20
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <HLCD_vidInit+0x47a>
    3940:	98 a3       	std	Y+32, r25	; 0x20
    3942:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	89 a1       	ldd	r24, Y+33	; 0x21
    3946:	9a a1       	ldd	r25, Y+34	; 0x22
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9a a3       	std	Y+34, r25	; 0x22
    394c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	89 a1       	ldd	r24, Y+33	; 0x21
    3950:	9a a1       	ldd	r25, Y+34	; 0x22
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <HLCD_vidInit+0x46e>
    3956:	14 c0       	rjmp	.+40     	; 0x3980 <HLCD_vidInit+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	6b a1       	ldd	r22, Y+35	; 0x23
    395a:	7c a1       	ldd	r23, Y+36	; 0x24
    395c:	8d a1       	ldd	r24, Y+37	; 0x25
    395e:	9e a1       	ldd	r25, Y+38	; 0x26
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	9a a3       	std	Y+34, r25	; 0x22
    396a:	89 a3       	std	Y+33, r24	; 0x21
    396c:	89 a1       	ldd	r24, Y+33	; 0x21
    396e:	9a a1       	ldd	r25, Y+34	; 0x22
    3970:	9e 8f       	std	Y+30, r25	; 0x1e
    3972:	8d 8f       	std	Y+29, r24	; 0x1d
    3974:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3976:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <HLCD_vidInit+0x4b6>
    397c:	9e 8f       	std	Y+30, r25	; 0x1e
    397e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	HLCD_vidWritecmd(HLCD_ENTRY_MODE_CURSOR_INCREMENT);
    3980:	86 e0       	ldi	r24, 0x06	; 6
    3982:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	a0 e8       	ldi	r26, 0x80	; 128
    398c:	bf e3       	ldi	r27, 0x3F	; 63
    398e:	89 8f       	std	Y+25, r24	; 0x19
    3990:	9a 8f       	std	Y+26, r25	; 0x1a
    3992:	ab 8f       	std	Y+27, r26	; 0x1b
    3994:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3996:	69 8d       	ldd	r22, Y+25	; 0x19
    3998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    399a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	4a ef       	ldi	r20, 0xFA	; 250
    39a4:	54 e4       	ldi	r21, 0x44	; 68
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	8d 8b       	std	Y+21, r24	; 0x15
    39b0:	9e 8b       	std	Y+22, r25	; 0x16
    39b2:	af 8b       	std	Y+23, r26	; 0x17
    39b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39b6:	6d 89       	ldd	r22, Y+21	; 0x15
    39b8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ba:	8f 89       	ldd	r24, Y+23	; 0x17
    39bc:	98 8d       	ldd	r25, Y+24	; 0x18
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e8       	ldi	r20, 0x80	; 128
    39c4:	5f e3       	ldi	r21, 0x3F	; 63
    39c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ca:	88 23       	and	r24, r24
    39cc:	2c f4       	brge	.+10     	; 0x39d8 <HLCD_vidInit+0x516>
		__ticks = 1;
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9c 8b       	std	Y+20, r25	; 0x14
    39d4:	8b 8b       	std	Y+19, r24	; 0x13
    39d6:	3f c0       	rjmp	.+126    	; 0x3a56 <HLCD_vidInit+0x594>
	else if (__tmp > 65535)
    39d8:	6d 89       	ldd	r22, Y+21	; 0x15
    39da:	7e 89       	ldd	r23, Y+22	; 0x16
    39dc:	8f 89       	ldd	r24, Y+23	; 0x17
    39de:	98 8d       	ldd	r25, Y+24	; 0x18
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	3f ef       	ldi	r19, 0xFF	; 255
    39e4:	4f e7       	ldi	r20, 0x7F	; 127
    39e6:	57 e4       	ldi	r21, 0x47	; 71
    39e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ec:	18 16       	cp	r1, r24
    39ee:	4c f5       	brge	.+82     	; 0x3a42 <HLCD_vidInit+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f0:	69 8d       	ldd	r22, Y+25	; 0x19
    39f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e2       	ldi	r20, 0x20	; 32
    39fe:	51 e4       	ldi	r21, 0x41	; 65
    3a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	bc 01       	movw	r22, r24
    3a0a:	cd 01       	movw	r24, r26
    3a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9c 8b       	std	Y+20, r25	; 0x14
    3a16:	8b 8b       	std	Y+19, r24	; 0x13
    3a18:	0f c0       	rjmp	.+30     	; 0x3a38 <HLCD_vidInit+0x576>
    3a1a:	88 ec       	ldi	r24, 0xC8	; 200
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	9a 8b       	std	Y+18, r25	; 0x12
    3a20:	89 8b       	std	Y+17, r24	; 0x11
    3a22:	89 89       	ldd	r24, Y+17	; 0x11
    3a24:	9a 89       	ldd	r25, Y+18	; 0x12
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	f1 f7       	brne	.-4      	; 0x3a26 <HLCD_vidInit+0x564>
    3a2a:	9a 8b       	std	Y+18, r25	; 0x12
    3a2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a30:	9c 89       	ldd	r25, Y+20	; 0x14
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	9c 8b       	std	Y+20, r25	; 0x14
    3a36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a38:	8b 89       	ldd	r24, Y+19	; 0x13
    3a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	69 f7       	brne	.-38     	; 0x3a1a <HLCD_vidInit+0x558>
    3a40:	14 c0       	rjmp	.+40     	; 0x3a6a <HLCD_vidInit+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a42:	6d 89       	ldd	r22, Y+21	; 0x15
    3a44:	7e 89       	ldd	r23, Y+22	; 0x16
    3a46:	8f 89       	ldd	r24, Y+23	; 0x17
    3a48:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9c 8b       	std	Y+20, r25	; 0x14
    3a54:	8b 8b       	std	Y+19, r24	; 0x13
    3a56:	8b 89       	ldd	r24, Y+19	; 0x13
    3a58:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5a:	98 8b       	std	Y+16, r25	; 0x10
    3a5c:	8f 87       	std	Y+15, r24	; 0x0f
    3a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a60:	98 89       	ldd	r25, Y+16	; 0x10
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <HLCD_vidInit+0x5a0>
    3a66:	98 8b       	std	Y+16, r25	; 0x10
    3a68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	HLCD_vidWritecmd(HLCD_DISPLAY_ON_CURSOR_ON_NO_BLINK);
    3a6a:	8e e0       	ldi	r24, 0x0E	; 14
    3a6c:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	a0 e8       	ldi	r26, 0x80	; 128
    3a76:	bf e3       	ldi	r27, 0x3F	; 63
    3a78:	8b 87       	std	Y+11, r24	; 0x0b
    3a7a:	9c 87       	std	Y+12, r25	; 0x0c
    3a7c:	ad 87       	std	Y+13, r26	; 0x0d
    3a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4a ef       	ldi	r20, 0xFA	; 250
    3a8e:	54 e4       	ldi	r21, 0x44	; 68
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8f 83       	std	Y+7, r24	; 0x07
    3a9a:	98 87       	std	Y+8, r25	; 0x08
    3a9c:	a9 87       	std	Y+9, r26	; 0x09
    3a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa2:	78 85       	ldd	r23, Y+8	; 0x08
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e8       	ldi	r20, 0x80	; 128
    3aae:	5f e3       	ldi	r21, 0x3F	; 63
    3ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	2c f4       	brge	.+10     	; 0x3ac2 <HLCD_vidInit+0x600>
		__ticks = 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9e 83       	std	Y+6, r25	; 0x06
    3abe:	8d 83       	std	Y+5, r24	; 0x05
    3ac0:	3f c0       	rjmp	.+126    	; 0x3b40 <HLCD_vidInit+0x67e>
	else if (__tmp > 65535)
    3ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac4:	78 85       	ldd	r23, Y+8	; 0x08
    3ac6:	89 85       	ldd	r24, Y+9	; 0x09
    3ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	57 e4       	ldi	r21, 0x47	; 71
    3ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	4c f5       	brge	.+82     	; 0x3b2c <HLCD_vidInit+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    3adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e2       	ldi	r20, 0x20	; 32
    3ae8:	51 e4       	ldi	r21, 0x41	; 65
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	9e 83       	std	Y+6, r25	; 0x06
    3b00:	8d 83       	std	Y+5, r24	; 0x05
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <HLCD_vidInit+0x660>
    3b04:	88 ec       	ldi	r24, 0xC8	; 200
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9c 83       	std	Y+4, r25	; 0x04
    3b0a:	8b 83       	std	Y+3, r24	; 0x03
    3b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <HLCD_vidInit+0x64e>
    3b14:	9c 83       	std	Y+4, r25	; 0x04
    3b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b18:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	9e 83       	std	Y+6, r25	; 0x06
    3b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b22:	8d 81       	ldd	r24, Y+5	; 0x05
    3b24:	9e 81       	ldd	r25, Y+6	; 0x06
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	69 f7       	brne	.-38     	; 0x3b04 <HLCD_vidInit+0x642>
    3b2a:	14 c0       	rjmp	.+40     	; 0x3b54 <HLCD_vidInit+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <HLCD_vidInit+0x68a>
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3b54:	cb 5a       	subi	r28, 0xAB	; 171
    3b56:	df 4f       	sbci	r29, 0xFF	; 255
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	08 95       	ret

00003b6c <HLCD_vidWritecmd>:
 * input param 	:
 * 					u8commandCopy --> take lcd cmd instructions from instruction table <https://components101.com/sites/default/files/component_datasheet/16x2%20LCD%20Datasheet.pdf>
 * return		: void
 * */
void HLCD_vidWritecmd(Uint8_t u8commandCopy)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	c6 54       	subi	r28, 0x46	; 70
    3b76:	d0 40       	sbci	r29, 0x00	; 0
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	fe 01       	movw	r30, r28
    3b84:	ea 5b       	subi	r30, 0xBA	; 186
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 83       	st	Z, r24
	DIO_s8SETPinVal(LCD_RW_PORT_PIN, LOW); // WRITE
    3b8a:	85 e0       	ldi	r24, 0x05	; 5
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	DIO_s8SETPinVal(LCD_RS_PORT_PIN, LOW); // CMD
    3b92:	84 e0       	ldi	r24, 0x04	; 4
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

#if HLCD_MODE == HLCD_4_BIT_MODE

	Uint8_t loc_u8DataReg = 0;
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	eb 5b       	subi	r30, 0xBB	; 187
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	10 82       	st	Z, r1
	loc_u8DataReg = (u8commandCopy & 0xF0);
    3ba2:	de 01       	movw	r26, r28
    3ba4:	ab 5b       	subi	r26, 0xBB	; 187
    3ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba8:	fe 01       	movw	r30, r28
    3baa:	ea 5b       	subi	r30, 0xBA	; 186
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	80 7f       	andi	r24, 0xF0	; 240
    3bb2:	8c 93       	st	X, r24
	loc_u8DataReg >>= 4;
    3bb4:	de 01       	movw	r26, r28
    3bb6:	ab 5b       	subi	r26, 0xBB	; 187
    3bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bba:	fe 01       	movw	r30, r28
    3bbc:	eb 5b       	subi	r30, 0xBB	; 187
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 81       	ld	r24, Z
    3bc2:	82 95       	swap	r24
    3bc4:	8f 70       	andi	r24, 0x0F	; 15
    3bc6:	8c 93       	st	X, r24

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    3bc8:	fe 01       	movw	r30, r28
    3bca:	ec 5b       	subi	r30, 0xBC	; 188
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	10 82       	st	Z, r1
    3bd0:	2c c0       	rjmp	.+88     	; 0x3c2a <HLCD_vidWritecmd+0xbe>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	ec 5b       	subi	r30, 0xBC	; 188
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	80 81       	ld	r24, Z
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	fc 01       	movw	r30, r24
    3be0:	e3 52       	subi	r30, 0x23	; 35
    3be2:	fd 4f       	sbci	r31, 0xFD	; 253
    3be4:	40 81       	ld	r20, Z
    3be6:	fe 01       	movw	r30, r28
    3be8:	eb 5b       	subi	r30, 0xBB	; 187
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	ec 5b       	subi	r30, 0xBC	; 188
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	80 81       	ld	r24, Z
    3bfa:	88 2f       	mov	r24, r24
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	b9 01       	movw	r22, r18
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <HLCD_vidWritecmd+0x9a>
    3c02:	75 95       	asr	r23
    3c04:	67 95       	ror	r22
    3c06:	8a 95       	dec	r24
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <HLCD_vidWritecmd+0x96>
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	98 2f       	mov	r25, r24
    3c0e:	91 70       	andi	r25, 0x01	; 1
    3c10:	84 2f       	mov	r24, r20
    3c12:	69 2f       	mov	r22, r25
    3c14:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

	Uint8_t loc_u8DataReg = 0;
	loc_u8DataReg = (u8commandCopy & 0xF0);
	loc_u8DataReg >>= 4;

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    3c18:	de 01       	movw	r26, r28
    3c1a:	ac 5b       	subi	r26, 0xBC	; 188
    3c1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ec 5b       	subi	r30, 0xBC	; 188
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	80 81       	ld	r24, Z
    3c26:	8f 5f       	subi	r24, 0xFF	; 255
    3c28:	8c 93       	st	X, r24
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	ec 5b       	subi	r30, 0xBC	; 188
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	80 81       	ld	r24, Z
    3c32:	84 30       	cpi	r24, 0x04	; 4
    3c34:	70 f2       	brcs	.-100    	; 0x3bd2 <HLCD_vidWritecmd+0x66>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
	}

	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
    3c36:	86 e0       	ldi	r24, 0x06	; 6
    3c38:	61 e0       	ldi	r22, 0x01	; 1
    3c3a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ff 96       	adiw	r30, 0x3f	; 63
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	a0 e8       	ldi	r26, 0x80	; 128
    3c48:	bf e3       	ldi	r27, 0x3F	; 63
    3c4a:	80 83       	st	Z, r24
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	a2 83       	std	Z+2, r26	; 0x02
    3c50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c52:	fe 01       	movw	r30, r28
    3c54:	ff 96       	adiw	r30, 0x3f	; 63
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	4a ef       	ldi	r20, 0xFA	; 250
    3c64:	54 e4       	ldi	r21, 0x44	; 68
    3c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	8b af       	std	Y+59, r24	; 0x3b
    3c70:	9c af       	std	Y+60, r25	; 0x3c
    3c72:	ad af       	std	Y+61, r26	; 0x3d
    3c74:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    3c76:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c78:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e8       	ldi	r20, 0x80	; 128
    3c84:	5f e3       	ldi	r21, 0x3F	; 63
    3c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8a:	88 23       	and	r24, r24
    3c8c:	2c f4       	brge	.+10     	; 0x3c98 <HLCD_vidWritecmd+0x12c>
		__ticks = 1;
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	9a af       	std	Y+58, r25	; 0x3a
    3c94:	89 af       	std	Y+57, r24	; 0x39
    3c96:	41 c0       	rjmp	.+130    	; 0x3d1a <HLCD_vidWritecmd+0x1ae>
	else if (__tmp > 65535)
    3c98:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c9a:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	3f ef       	ldi	r19, 0xFF	; 255
    3ca4:	4f e7       	ldi	r20, 0x7F	; 127
    3ca6:	57 e4       	ldi	r21, 0x47	; 71
    3ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cac:	18 16       	cp	r1, r24
    3cae:	5c f5       	brge	.+86     	; 0x3d06 <HLCD_vidWritecmd+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	ff 96       	adiw	r30, 0x3f	; 63
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e2       	ldi	r20, 0x20	; 32
    3cc2:	51 e4       	ldi	r21, 0x41	; 65
    3cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	bc 01       	movw	r22, r24
    3cce:	cd 01       	movw	r24, r26
    3cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	9a af       	std	Y+58, r25	; 0x3a
    3cda:	89 af       	std	Y+57, r24	; 0x39
    3cdc:	0f c0       	rjmp	.+30     	; 0x3cfc <HLCD_vidWritecmd+0x190>
    3cde:	88 ec       	ldi	r24, 0xC8	; 200
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	98 af       	std	Y+56, r25	; 0x38
    3ce4:	8f ab       	std	Y+55, r24	; 0x37
    3ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <HLCD_vidWritecmd+0x17e>
    3cee:	98 af       	std	Y+56, r25	; 0x38
    3cf0:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf2:	89 ad       	ldd	r24, Y+57	; 0x39
    3cf4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	9a af       	std	Y+58, r25	; 0x3a
    3cfa:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfc:	89 ad       	ldd	r24, Y+57	; 0x39
    3cfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	69 f7       	brne	.-38     	; 0x3cde <HLCD_vidWritecmd+0x172>
    3d04:	14 c0       	rjmp	.+40     	; 0x3d2e <HLCD_vidWritecmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d06:	6b ad       	ldd	r22, Y+59	; 0x3b
    3d08:	7c ad       	ldd	r23, Y+60	; 0x3c
    3d0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9a af       	std	Y+58, r25	; 0x3a
    3d18:	89 af       	std	Y+57, r24	; 0x39
    3d1a:	89 ad       	ldd	r24, Y+57	; 0x39
    3d1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d1e:	9e ab       	std	Y+54, r25	; 0x36
    3d20:	8d ab       	std	Y+53, r24	; 0x35
    3d22:	8d a9       	ldd	r24, Y+53	; 0x35
    3d24:	9e a9       	ldd	r25, Y+54	; 0x36
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <HLCD_vidWritecmd+0x1ba>
    3d2a:	9e ab       	std	Y+54, r25	; 0x36
    3d2c:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(1);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
    3d2e:	86 e0       	ldi	r24, 0x06	; 6
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	a8 e4       	ldi	r26, 0x48	; 72
    3d3c:	b3 e4       	ldi	r27, 0x43	; 67
    3d3e:	89 ab       	std	Y+49, r24	; 0x31
    3d40:	9a ab       	std	Y+50, r25	; 0x32
    3d42:	ab ab       	std	Y+51, r26	; 0x33
    3d44:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d46:	69 a9       	ldd	r22, Y+49	; 0x31
    3d48:	7a a9       	ldd	r23, Y+50	; 0x32
    3d4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d4e:	2b ea       	ldi	r18, 0xAB	; 171
    3d50:	3a ea       	ldi	r19, 0xAA	; 170
    3d52:	4a e2       	ldi	r20, 0x2A	; 42
    3d54:	50 e4       	ldi	r21, 0x40	; 64
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	8d a7       	std	Y+45, r24	; 0x2d
    3d60:	9e a7       	std	Y+46, r25	; 0x2e
    3d62:	af a7       	std	Y+47, r26	; 0x2f
    3d64:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3d66:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d68:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e8       	ldi	r20, 0x80	; 128
    3d74:	5f e3       	ldi	r21, 0x3F	; 63
    3d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d7a:	88 23       	and	r24, r24
    3d7c:	1c f4       	brge	.+6      	; 0x3d84 <HLCD_vidWritecmd+0x218>
		__ticks = 1;
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	8c a7       	std	Y+44, r24	; 0x2c
    3d82:	91 c0       	rjmp	.+290    	; 0x3ea6 <HLCD_vidWritecmd+0x33a>
	else if (__tmp > 255)
    3d84:	6d a5       	ldd	r22, Y+45	; 0x2d
    3d86:	7e a5       	ldd	r23, Y+46	; 0x2e
    3d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	53 e4       	ldi	r21, 0x43	; 67
    3d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	0c f0       	brlt	.+2      	; 0x3d9e <HLCD_vidWritecmd+0x232>
    3d9c:	7b c0       	rjmp	.+246    	; 0x3e94 <HLCD_vidWritecmd+0x328>
	{
		_delay_ms(__us / 1000.0);
    3d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3da0:	7a a9       	ldd	r23, Y+50	; 0x32
    3da2:	8b a9       	ldd	r24, Y+51	; 0x33
    3da4:	9c a9       	ldd	r25, Y+52	; 0x34
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a e7       	ldi	r20, 0x7A	; 122
    3dac:	54 e4       	ldi	r21, 0x44	; 68
    3dae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	88 a7       	std	Y+40, r24	; 0x28
    3db8:	99 a7       	std	Y+41, r25	; 0x29
    3dba:	aa a7       	std	Y+42, r26	; 0x2a
    3dbc:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbe:	68 a5       	ldd	r22, Y+40	; 0x28
    3dc0:	79 a5       	ldd	r23, Y+41	; 0x29
    3dc2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3dc4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	4a ef       	ldi	r20, 0xFA	; 250
    3dcc:	54 e4       	ldi	r21, 0x44	; 68
    3dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	8c a3       	std	Y+36, r24	; 0x24
    3dd8:	9d a3       	std	Y+37, r25	; 0x25
    3dda:	ae a3       	std	Y+38, r26	; 0x26
    3ddc:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    3dde:	6c a1       	ldd	r22, Y+36	; 0x24
    3de0:	7d a1       	ldd	r23, Y+37	; 0x25
    3de2:	8e a1       	ldd	r24, Y+38	; 0x26
    3de4:	9f a1       	ldd	r25, Y+39	; 0x27
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e8       	ldi	r20, 0x80	; 128
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df2:	88 23       	and	r24, r24
    3df4:	2c f4       	brge	.+10     	; 0x3e00 <HLCD_vidWritecmd+0x294>
		__ticks = 1;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9b a3       	std	Y+35, r25	; 0x23
    3dfc:	8a a3       	std	Y+34, r24	; 0x22
    3dfe:	3f c0       	rjmp	.+126    	; 0x3e7e <HLCD_vidWritecmd+0x312>
	else if (__tmp > 65535)
    3e00:	6c a1       	ldd	r22, Y+36	; 0x24
    3e02:	7d a1       	ldd	r23, Y+37	; 0x25
    3e04:	8e a1       	ldd	r24, Y+38	; 0x26
    3e06:	9f a1       	ldd	r25, Y+39	; 0x27
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	3f ef       	ldi	r19, 0xFF	; 255
    3e0c:	4f e7       	ldi	r20, 0x7F	; 127
    3e0e:	57 e4       	ldi	r21, 0x47	; 71
    3e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e14:	18 16       	cp	r1, r24
    3e16:	4c f5       	brge	.+82     	; 0x3e6a <HLCD_vidWritecmd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e18:	68 a5       	ldd	r22, Y+40	; 0x28
    3e1a:	79 a5       	ldd	r23, Y+41	; 0x29
    3e1c:	8a a5       	ldd	r24, Y+42	; 0x2a
    3e1e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e2       	ldi	r20, 0x20	; 32
    3e26:	51 e4       	ldi	r21, 0x41	; 65
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	bc 01       	movw	r22, r24
    3e32:	cd 01       	movw	r24, r26
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9b a3       	std	Y+35, r25	; 0x23
    3e3e:	8a a3       	std	Y+34, r24	; 0x22
    3e40:	0f c0       	rjmp	.+30     	; 0x3e60 <HLCD_vidWritecmd+0x2f4>
    3e42:	88 ec       	ldi	r24, 0xC8	; 200
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	99 a3       	std	Y+33, r25	; 0x21
    3e48:	88 a3       	std	Y+32, r24	; 0x20
    3e4a:	88 a1       	ldd	r24, Y+32	; 0x20
    3e4c:	99 a1       	ldd	r25, Y+33	; 0x21
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <HLCD_vidWritecmd+0x2e2>
    3e52:	99 a3       	std	Y+33, r25	; 0x21
    3e54:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e56:	8a a1       	ldd	r24, Y+34	; 0x22
    3e58:	9b a1       	ldd	r25, Y+35	; 0x23
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	9b a3       	std	Y+35, r25	; 0x23
    3e5e:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e60:	8a a1       	ldd	r24, Y+34	; 0x22
    3e62:	9b a1       	ldd	r25, Y+35	; 0x23
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	69 f7       	brne	.-38     	; 0x3e42 <HLCD_vidWritecmd+0x2d6>
    3e68:	24 c0       	rjmp	.+72     	; 0x3eb2 <HLCD_vidWritecmd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6a:	6c a1       	ldd	r22, Y+36	; 0x24
    3e6c:	7d a1       	ldd	r23, Y+37	; 0x25
    3e6e:	8e a1       	ldd	r24, Y+38	; 0x26
    3e70:	9f a1       	ldd	r25, Y+39	; 0x27
    3e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	9b a3       	std	Y+35, r25	; 0x23
    3e7c:	8a a3       	std	Y+34, r24	; 0x22
    3e7e:	8a a1       	ldd	r24, Y+34	; 0x22
    3e80:	9b a1       	ldd	r25, Y+35	; 0x23
    3e82:	9f 8f       	std	Y+31, r25	; 0x1f
    3e84:	8e 8f       	std	Y+30, r24	; 0x1e
    3e86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <HLCD_vidWritecmd+0x31e>
    3e8e:	9f 8f       	std	Y+31, r25	; 0x1f
    3e90:	8e 8f       	std	Y+30, r24	; 0x1e
    3e92:	0f c0       	rjmp	.+30     	; 0x3eb2 <HLCD_vidWritecmd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e94:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e96:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	8c a7       	std	Y+44, r24	; 0x2c
    3ea6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eac:	8a 95       	dec	r24
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <HLCD_vidWritecmd+0x340>
    3eb0:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_us(200);

	loc_u8DataReg = (u8commandCopy & 0x0F);
    3eb2:	de 01       	movw	r26, r28
    3eb4:	ab 5b       	subi	r26, 0xBB	; 187
    3eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ea 5b       	subi	r30, 0xBA	; 186
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8f 70       	andi	r24, 0x0F	; 15
    3ec2:	8c 93       	st	X, r24

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	ed 5b       	subi	r30, 0xBD	; 189
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	10 82       	st	Z, r1
    3ecc:	2c c0       	rjmp	.+88     	; 0x3f26 <HLCD_vidWritecmd+0x3ba>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ed 5b       	subi	r30, 0xBD	; 189
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 81       	ld	r24, Z
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	fc 01       	movw	r30, r24
    3edc:	e3 52       	subi	r30, 0x23	; 35
    3ede:	fd 4f       	sbci	r31, 0xFD	; 253
    3ee0:	40 81       	ld	r20, Z
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	eb 5b       	subi	r30, 0xBB	; 187
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	28 2f       	mov	r18, r24
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	fe 01       	movw	r30, r28
    3ef0:	ed 5b       	subi	r30, 0xBD	; 189
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	80 81       	ld	r24, Z
    3ef6:	88 2f       	mov	r24, r24
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	b9 01       	movw	r22, r18
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <HLCD_vidWritecmd+0x396>
    3efe:	75 95       	asr	r23
    3f00:	67 95       	ror	r22
    3f02:	8a 95       	dec	r24
    3f04:	e2 f7       	brpl	.-8      	; 0x3efe <HLCD_vidWritecmd+0x392>
    3f06:	cb 01       	movw	r24, r22
    3f08:	98 2f       	mov	r25, r24
    3f0a:	91 70       	andi	r25, 0x01	; 1
    3f0c:	84 2f       	mov	r24, r20
    3f0e:	69 2f       	mov	r22, r25
    3f10:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

	_delay_us(200);

	loc_u8DataReg = (u8commandCopy & 0x0F);

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    3f14:	de 01       	movw	r26, r28
    3f16:	ad 5b       	subi	r26, 0xBD	; 189
    3f18:	bf 4f       	sbci	r27, 0xFF	; 255
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	ed 5b       	subi	r30, 0xBD	; 189
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	80 81       	ld	r24, Z
    3f22:	8f 5f       	subi	r24, 0xFF	; 255
    3f24:	8c 93       	st	X, r24
    3f26:	fe 01       	movw	r30, r28
    3f28:	ed 5b       	subi	r30, 0xBD	; 189
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 81       	ld	r24, Z
    3f2e:	84 30       	cpi	r24, 0x04	; 4
    3f30:	70 f2       	brcs	.-100    	; 0x3ece <HLCD_vidWritecmd+0x362>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
	}
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
    3f32:	86 e0       	ldi	r24, 0x06	; 6
    3f34:	61 e0       	ldi	r22, 0x01	; 1
    3f36:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	a0 e8       	ldi	r26, 0x80	; 128
    3f40:	bf e3       	ldi	r27, 0x3F	; 63
    3f42:	89 8f       	std	Y+25, r24	; 0x19
    3f44:	9a 8f       	std	Y+26, r25	; 0x1a
    3f46:	ab 8f       	std	Y+27, r26	; 0x1b
    3f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	4a ef       	ldi	r20, 0xFA	; 250
    3f58:	54 e4       	ldi	r21, 0x44	; 68
    3f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8d 8b       	std	Y+21, r24	; 0x15
    3f64:	9e 8b       	std	Y+22, r25	; 0x16
    3f66:	af 8b       	std	Y+23, r26	; 0x17
    3f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f70:	98 8d       	ldd	r25, Y+24	; 0x18
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e8       	ldi	r20, 0x80	; 128
    3f78:	5f e3       	ldi	r21, 0x3F	; 63
    3f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7e:	88 23       	and	r24, r24
    3f80:	2c f4       	brge	.+10     	; 0x3f8c <HLCD_vidWritecmd+0x420>
		__ticks = 1;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9c 8b       	std	Y+20, r25	; 0x14
    3f88:	8b 8b       	std	Y+19, r24	; 0x13
    3f8a:	3f c0       	rjmp	.+126    	; 0x400a <HLCD_vidWritecmd+0x49e>
	else if (__tmp > 65535)
    3f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f90:	8f 89       	ldd	r24, Y+23	; 0x17
    3f92:	98 8d       	ldd	r25, Y+24	; 0x18
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	3f ef       	ldi	r19, 0xFF	; 255
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	57 e4       	ldi	r21, 0x47	; 71
    3f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	4c f5       	brge	.+82     	; 0x3ff6 <HLCD_vidWritecmd+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e2       	ldi	r20, 0x20	; 32
    3fb2:	51 e4       	ldi	r21, 0x41	; 65
    3fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9c 8b       	std	Y+20, r25	; 0x14
    3fca:	8b 8b       	std	Y+19, r24	; 0x13
    3fcc:	0f c0       	rjmp	.+30     	; 0x3fec <HLCD_vidWritecmd+0x480>
    3fce:	88 ec       	ldi	r24, 0xC8	; 200
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	9a 8b       	std	Y+18, r25	; 0x12
    3fd4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fd6:	89 89       	ldd	r24, Y+17	; 0x11
    3fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <HLCD_vidWritecmd+0x46e>
    3fde:	9a 8b       	std	Y+18, r25	; 0x12
    3fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	9c 8b       	std	Y+20, r25	; 0x14
    3fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fec:	8b 89       	ldd	r24, Y+19	; 0x13
    3fee:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	69 f7       	brne	.-38     	; 0x3fce <HLCD_vidWritecmd+0x462>
    3ff4:	14 c0       	rjmp	.+40     	; 0x401e <HLCD_vidWritecmd+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9c 8b       	std	Y+20, r25	; 0x14
    4008:	8b 8b       	std	Y+19, r24	; 0x13
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	98 8b       	std	Y+16, r25	; 0x10
    4010:	8f 87       	std	Y+15, r24	; 0x0f
    4012:	8f 85       	ldd	r24, Y+15	; 0x0f
    4014:	98 89       	ldd	r25, Y+16	; 0x10
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <HLCD_vidWritecmd+0x4aa>
    401a:	98 8b       	std	Y+16, r25	; 0x10
    401c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
    401e:	86 e0       	ldi	r24, 0x06	; 6
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a0 e0       	ldi	r26, 0x00	; 0
    402c:	b0 e4       	ldi	r27, 0x40	; 64
    402e:	8b 87       	std	Y+11, r24	; 0x0b
    4030:	9c 87       	std	Y+12, r25	; 0x0c
    4032:	ad 87       	std	Y+13, r26	; 0x0d
    4034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4036:	6b 85       	ldd	r22, Y+11	; 0x0b
    4038:	7c 85       	ldd	r23, Y+12	; 0x0c
    403a:	8d 85       	ldd	r24, Y+13	; 0x0d
    403c:	9e 85       	ldd	r25, Y+14	; 0x0e
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	4a ef       	ldi	r20, 0xFA	; 250
    4044:	54 e4       	ldi	r21, 0x44	; 68
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	8f 83       	std	Y+7, r24	; 0x07
    4050:	98 87       	std	Y+8, r25	; 0x08
    4052:	a9 87       	std	Y+9, r26	; 0x09
    4054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4056:	6f 81       	ldd	r22, Y+7	; 0x07
    4058:	78 85       	ldd	r23, Y+8	; 0x08
    405a:	89 85       	ldd	r24, Y+9	; 0x09
    405c:	9a 85       	ldd	r25, Y+10	; 0x0a
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e8       	ldi	r20, 0x80	; 128
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    406a:	88 23       	and	r24, r24
    406c:	2c f4       	brge	.+10     	; 0x4078 <HLCD_vidWritecmd+0x50c>
		__ticks = 1;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9e 83       	std	Y+6, r25	; 0x06
    4074:	8d 83       	std	Y+5, r24	; 0x05
    4076:	3f c0       	rjmp	.+126    	; 0x40f6 <HLCD_vidWritecmd+0x58a>
	else if (__tmp > 65535)
    4078:	6f 81       	ldd	r22, Y+7	; 0x07
    407a:	78 85       	ldd	r23, Y+8	; 0x08
    407c:	89 85       	ldd	r24, Y+9	; 0x09
    407e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	3f ef       	ldi	r19, 0xFF	; 255
    4084:	4f e7       	ldi	r20, 0x7F	; 127
    4086:	57 e4       	ldi	r21, 0x47	; 71
    4088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    408c:	18 16       	cp	r1, r24
    408e:	4c f5       	brge	.+82     	; 0x40e2 <HLCD_vidWritecmd+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4090:	6b 85       	ldd	r22, Y+11	; 0x0b
    4092:	7c 85       	ldd	r23, Y+12	; 0x0c
    4094:	8d 85       	ldd	r24, Y+13	; 0x0d
    4096:	9e 85       	ldd	r25, Y+14	; 0x0e
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e2       	ldi	r20, 0x20	; 32
    409e:	51 e4       	ldi	r21, 0x41	; 65
    40a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	bc 01       	movw	r22, r24
    40aa:	cd 01       	movw	r24, r26
    40ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <HLCD_vidWritecmd+0x56c>
    40ba:	88 ec       	ldi	r24, 0xC8	; 200
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9c 83       	std	Y+4, r25	; 0x04
    40c0:	8b 83       	std	Y+3, r24	; 0x03
    40c2:	8b 81       	ldd	r24, Y+3	; 0x03
    40c4:	9c 81       	ldd	r25, Y+4	; 0x04
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <HLCD_vidWritecmd+0x55a>
    40ca:	9c 83       	std	Y+4, r25	; 0x04
    40cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ce:	8d 81       	ldd	r24, Y+5	; 0x05
    40d0:	9e 81       	ldd	r25, Y+6	; 0x06
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	9e 83       	std	Y+6, r25	; 0x06
    40d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d8:	8d 81       	ldd	r24, Y+5	; 0x05
    40da:	9e 81       	ldd	r25, Y+6	; 0x06
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	69 f7       	brne	.-38     	; 0x40ba <HLCD_vidWritecmd+0x54e>
    40e0:	14 c0       	rjmp	.+40     	; 0x410a <HLCD_vidWritecmd+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	6f 81       	ldd	r22, Y+7	; 0x07
    40e4:	78 85       	ldd	r23, Y+8	; 0x08
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9e 83       	std	Y+6, r25	; 0x06
    40f4:	8d 83       	std	Y+5, r24	; 0x05
    40f6:	8d 81       	ldd	r24, Y+5	; 0x05
    40f8:	9e 81       	ldd	r25, Y+6	; 0x06
    40fa:	9a 83       	std	Y+2, r25	; 0x02
    40fc:	89 83       	std	Y+1, r24	; 0x01
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	9a 81       	ldd	r25, Y+2	; 0x02
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <HLCD_vidWritecmd+0x596>
    4106:	9a 83       	std	Y+2, r25	; 0x02
    4108:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
	_delay_ms(2);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
	_delay_ms(2);
#endif
}
    410a:	ca 5b       	subi	r28, 0xBA	; 186
    410c:	df 4f       	sbci	r29, 0xFF	; 255
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <HLCD_vidWriteChar>:
 * description 	: func to write char on lcd
 * input param 	: u8CharCopy -> take ascii code of char   or   char address on CGROM
 * return		: void
 * */
void HLCD_vidWriteChar(Uint8_t u8CharCopy)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	c6 54       	subi	r28, 0x46	; 70
    4128:	d0 40       	sbci	r29, 0x00	; 0
    412a:	0f b6       	in	r0, 0x3f	; 63
    412c:	f8 94       	cli
    412e:	de bf       	out	0x3e, r29	; 62
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	cd bf       	out	0x3d, r28	; 61
    4134:	fe 01       	movw	r30, r28
    4136:	ea 5b       	subi	r30, 0xBA	; 186
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	80 83       	st	Z, r24
	DIO_s8SETPinVal(LCD_RW_PORT_PIN, LOW); // WRITE
    413c:	85 e0       	ldi	r24, 0x05	; 5
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	DIO_s8SETPinVal(LCD_RS_PORT_PIN, HIGH); // DATA
    4144:	84 e0       	ldi	r24, 0x04	; 4
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

#if HLCD_MODE == HLCD_4_BIT_MODE

	Uint8_t loc_u8DataReg = 0;
    414c:	fe 01       	movw	r30, r28
    414e:	eb 5b       	subi	r30, 0xBB	; 187
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	10 82       	st	Z, r1
	loc_u8DataReg = (u8CharCopy & 0xF0);
    4154:	de 01       	movw	r26, r28
    4156:	ab 5b       	subi	r26, 0xBB	; 187
    4158:	bf 4f       	sbci	r27, 0xFF	; 255
    415a:	fe 01       	movw	r30, r28
    415c:	ea 5b       	subi	r30, 0xBA	; 186
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	80 81       	ld	r24, Z
    4162:	80 7f       	andi	r24, 0xF0	; 240
    4164:	8c 93       	st	X, r24
	loc_u8DataReg >>= 4;
    4166:	de 01       	movw	r26, r28
    4168:	ab 5b       	subi	r26, 0xBB	; 187
    416a:	bf 4f       	sbci	r27, 0xFF	; 255
    416c:	fe 01       	movw	r30, r28
    416e:	eb 5b       	subi	r30, 0xBB	; 187
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	82 95       	swap	r24
    4176:	8f 70       	andi	r24, 0x0F	; 15
    4178:	8c 93       	st	X, r24

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    417a:	fe 01       	movw	r30, r28
    417c:	ec 5b       	subi	r30, 0xBC	; 188
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	10 82       	st	Z, r1
    4182:	2c c0       	rjmp	.+88     	; 0x41dc <HLCD_vidWriteChar+0xbe>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
    4184:	fe 01       	movw	r30, r28
    4186:	ec 5b       	subi	r30, 0xBC	; 188
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	88 2f       	mov	r24, r24
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	fc 01       	movw	r30, r24
    4192:	e3 52       	subi	r30, 0x23	; 35
    4194:	fd 4f       	sbci	r31, 0xFD	; 253
    4196:	40 81       	ld	r20, Z
    4198:	fe 01       	movw	r30, r28
    419a:	eb 5b       	subi	r30, 0xBB	; 187
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	28 2f       	mov	r18, r24
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	fe 01       	movw	r30, r28
    41a6:	ec 5b       	subi	r30, 0xBC	; 188
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	80 81       	ld	r24, Z
    41ac:	88 2f       	mov	r24, r24
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	b9 01       	movw	r22, r18
    41b2:	02 c0       	rjmp	.+4      	; 0x41b8 <HLCD_vidWriteChar+0x9a>
    41b4:	75 95       	asr	r23
    41b6:	67 95       	ror	r22
    41b8:	8a 95       	dec	r24
    41ba:	e2 f7       	brpl	.-8      	; 0x41b4 <HLCD_vidWriteChar+0x96>
    41bc:	cb 01       	movw	r24, r22
    41be:	98 2f       	mov	r25, r24
    41c0:	91 70       	andi	r25, 0x01	; 1
    41c2:	84 2f       	mov	r24, r20
    41c4:	69 2f       	mov	r22, r25
    41c6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

	Uint8_t loc_u8DataReg = 0;
	loc_u8DataReg = (u8CharCopy & 0xF0);
	loc_u8DataReg >>= 4;

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    41ca:	de 01       	movw	r26, r28
    41cc:	ac 5b       	subi	r26, 0xBC	; 188
    41ce:	bf 4f       	sbci	r27, 0xFF	; 255
    41d0:	fe 01       	movw	r30, r28
    41d2:	ec 5b       	subi	r30, 0xBC	; 188
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	80 81       	ld	r24, Z
    41d8:	8f 5f       	subi	r24, 0xFF	; 255
    41da:	8c 93       	st	X, r24
    41dc:	fe 01       	movw	r30, r28
    41de:	ec 5b       	subi	r30, 0xBC	; 188
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	80 81       	ld	r24, Z
    41e4:	84 30       	cpi	r24, 0x04	; 4
    41e6:	70 f2       	brcs	.-100    	; 0x4184 <HLCD_vidWriteChar+0x66>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
	}

	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
    41e8:	86 e0       	ldi	r24, 0x06	; 6
    41ea:	61 e0       	ldi	r22, 0x01	; 1
    41ec:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    41f0:	fe 01       	movw	r30, r28
    41f2:	ff 96       	adiw	r30, 0x3f	; 63
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	a0 e8       	ldi	r26, 0x80	; 128
    41fa:	bf e3       	ldi	r27, 0x3F	; 63
    41fc:	80 83       	st	Z, r24
    41fe:	91 83       	std	Z+1, r25	; 0x01
    4200:	a2 83       	std	Z+2, r26	; 0x02
    4202:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4204:	fe 01       	movw	r30, r28
    4206:	ff 96       	adiw	r30, 0x3f	; 63
    4208:	60 81       	ld	r22, Z
    420a:	71 81       	ldd	r23, Z+1	; 0x01
    420c:	82 81       	ldd	r24, Z+2	; 0x02
    420e:	93 81       	ldd	r25, Z+3	; 0x03
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	4a ef       	ldi	r20, 0xFA	; 250
    4216:	54 e4       	ldi	r21, 0x44	; 68
    4218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421c:	dc 01       	movw	r26, r24
    421e:	cb 01       	movw	r24, r22
    4220:	8b af       	std	Y+59, r24	; 0x3b
    4222:	9c af       	std	Y+60, r25	; 0x3c
    4224:	ad af       	std	Y+61, r26	; 0x3d
    4226:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    4228:	6b ad       	ldd	r22, Y+59	; 0x3b
    422a:	7c ad       	ldd	r23, Y+60	; 0x3c
    422c:	8d ad       	ldd	r24, Y+61	; 0x3d
    422e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e8       	ldi	r20, 0x80	; 128
    4236:	5f e3       	ldi	r21, 0x3F	; 63
    4238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    423c:	88 23       	and	r24, r24
    423e:	2c f4       	brge	.+10     	; 0x424a <HLCD_vidWriteChar+0x12c>
		__ticks = 1;
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	9a af       	std	Y+58, r25	; 0x3a
    4246:	89 af       	std	Y+57, r24	; 0x39
    4248:	41 c0       	rjmp	.+130    	; 0x42cc <HLCD_vidWriteChar+0x1ae>
	else if (__tmp > 65535)
    424a:	6b ad       	ldd	r22, Y+59	; 0x3b
    424c:	7c ad       	ldd	r23, Y+60	; 0x3c
    424e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4250:	9e ad       	ldd	r25, Y+62	; 0x3e
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	3f ef       	ldi	r19, 0xFF	; 255
    4256:	4f e7       	ldi	r20, 0x7F	; 127
    4258:	57 e4       	ldi	r21, 0x47	; 71
    425a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    425e:	18 16       	cp	r1, r24
    4260:	5c f5       	brge	.+86     	; 0x42b8 <HLCD_vidWriteChar+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4262:	fe 01       	movw	r30, r28
    4264:	ff 96       	adiw	r30, 0x3f	; 63
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	40 e2       	ldi	r20, 0x20	; 32
    4274:	51 e4       	ldi	r21, 0x41	; 65
    4276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	bc 01       	movw	r22, r24
    4280:	cd 01       	movw	r24, r26
    4282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	9a af       	std	Y+58, r25	; 0x3a
    428c:	89 af       	std	Y+57, r24	; 0x39
    428e:	0f c0       	rjmp	.+30     	; 0x42ae <HLCD_vidWriteChar+0x190>
    4290:	88 ec       	ldi	r24, 0xC8	; 200
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	98 af       	std	Y+56, r25	; 0x38
    4296:	8f ab       	std	Y+55, r24	; 0x37
    4298:	8f a9       	ldd	r24, Y+55	; 0x37
    429a:	98 ad       	ldd	r25, Y+56	; 0x38
    429c:	01 97       	sbiw	r24, 0x01	; 1
    429e:	f1 f7       	brne	.-4      	; 0x429c <HLCD_vidWriteChar+0x17e>
    42a0:	98 af       	std	Y+56, r25	; 0x38
    42a2:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a4:	89 ad       	ldd	r24, Y+57	; 0x39
    42a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    42a8:	01 97       	sbiw	r24, 0x01	; 1
    42aa:	9a af       	std	Y+58, r25	; 0x3a
    42ac:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ae:	89 ad       	ldd	r24, Y+57	; 0x39
    42b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    42b2:	00 97       	sbiw	r24, 0x00	; 0
    42b4:	69 f7       	brne	.-38     	; 0x4290 <HLCD_vidWriteChar+0x172>
    42b6:	14 c0       	rjmp	.+40     	; 0x42e0 <HLCD_vidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    42ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    42bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    42be:	9e ad       	ldd	r25, Y+62	; 0x3e
    42c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	9a af       	std	Y+58, r25	; 0x3a
    42ca:	89 af       	std	Y+57, r24	; 0x39
    42cc:	89 ad       	ldd	r24, Y+57	; 0x39
    42ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    42d0:	9e ab       	std	Y+54, r25	; 0x36
    42d2:	8d ab       	std	Y+53, r24	; 0x35
    42d4:	8d a9       	ldd	r24, Y+53	; 0x35
    42d6:	9e a9       	ldd	r25, Y+54	; 0x36
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	f1 f7       	brne	.-4      	; 0x42d8 <HLCD_vidWriteChar+0x1ba>
    42dc:	9e ab       	std	Y+54, r25	; 0x36
    42de:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(1);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
    42e0:	86 e0       	ldi	r24, 0x06	; 6
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	a8 e4       	ldi	r26, 0x48	; 72
    42ee:	b3 e4       	ldi	r27, 0x43	; 67
    42f0:	89 ab       	std	Y+49, r24	; 0x31
    42f2:	9a ab       	std	Y+50, r25	; 0x32
    42f4:	ab ab       	std	Y+51, r26	; 0x33
    42f6:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42f8:	69 a9       	ldd	r22, Y+49	; 0x31
    42fa:	7a a9       	ldd	r23, Y+50	; 0x32
    42fc:	8b a9       	ldd	r24, Y+51	; 0x33
    42fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4300:	2b ea       	ldi	r18, 0xAB	; 171
    4302:	3a ea       	ldi	r19, 0xAA	; 170
    4304:	4a e2       	ldi	r20, 0x2A	; 42
    4306:	50 e4       	ldi	r21, 0x40	; 64
    4308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8d a7       	std	Y+45, r24	; 0x2d
    4312:	9e a7       	std	Y+46, r25	; 0x2e
    4314:	af a7       	std	Y+47, r26	; 0x2f
    4316:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    4318:	6d a5       	ldd	r22, Y+45	; 0x2d
    431a:	7e a5       	ldd	r23, Y+46	; 0x2e
    431c:	8f a5       	ldd	r24, Y+47	; 0x2f
    431e:	98 a9       	ldd	r25, Y+48	; 0x30
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	40 e8       	ldi	r20, 0x80	; 128
    4326:	5f e3       	ldi	r21, 0x3F	; 63
    4328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    432c:	88 23       	and	r24, r24
    432e:	1c f4       	brge	.+6      	; 0x4336 <HLCD_vidWriteChar+0x218>
		__ticks = 1;
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	8c a7       	std	Y+44, r24	; 0x2c
    4334:	91 c0       	rjmp	.+290    	; 0x4458 <HLCD_vidWriteChar+0x33a>
	else if (__tmp > 255)
    4336:	6d a5       	ldd	r22, Y+45	; 0x2d
    4338:	7e a5       	ldd	r23, Y+46	; 0x2e
    433a:	8f a5       	ldd	r24, Y+47	; 0x2f
    433c:	98 a9       	ldd	r25, Y+48	; 0x30
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	53 e4       	ldi	r21, 0x43	; 67
    4346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    434a:	18 16       	cp	r1, r24
    434c:	0c f0       	brlt	.+2      	; 0x4350 <HLCD_vidWriteChar+0x232>
    434e:	7b c0       	rjmp	.+246    	; 0x4446 <HLCD_vidWriteChar+0x328>
	{
		_delay_ms(__us / 1000.0);
    4350:	69 a9       	ldd	r22, Y+49	; 0x31
    4352:	7a a9       	ldd	r23, Y+50	; 0x32
    4354:	8b a9       	ldd	r24, Y+51	; 0x33
    4356:	9c a9       	ldd	r25, Y+52	; 0x34
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	4a e7       	ldi	r20, 0x7A	; 122
    435e:	54 e4       	ldi	r21, 0x44	; 68
    4360:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	88 a7       	std	Y+40, r24	; 0x28
    436a:	99 a7       	std	Y+41, r25	; 0x29
    436c:	aa a7       	std	Y+42, r26	; 0x2a
    436e:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4370:	68 a5       	ldd	r22, Y+40	; 0x28
    4372:	79 a5       	ldd	r23, Y+41	; 0x29
    4374:	8a a5       	ldd	r24, Y+42	; 0x2a
    4376:	9b a5       	ldd	r25, Y+43	; 0x2b
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	4a ef       	ldi	r20, 0xFA	; 250
    437e:	54 e4       	ldi	r21, 0x44	; 68
    4380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	8c a3       	std	Y+36, r24	; 0x24
    438a:	9d a3       	std	Y+37, r25	; 0x25
    438c:	ae a3       	std	Y+38, r26	; 0x26
    438e:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    4390:	6c a1       	ldd	r22, Y+36	; 0x24
    4392:	7d a1       	ldd	r23, Y+37	; 0x25
    4394:	8e a1       	ldd	r24, Y+38	; 0x26
    4396:	9f a1       	ldd	r25, Y+39	; 0x27
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	40 e8       	ldi	r20, 0x80	; 128
    439e:	5f e3       	ldi	r21, 0x3F	; 63
    43a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a4:	88 23       	and	r24, r24
    43a6:	2c f4       	brge	.+10     	; 0x43b2 <HLCD_vidWriteChar+0x294>
		__ticks = 1;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	9b a3       	std	Y+35, r25	; 0x23
    43ae:	8a a3       	std	Y+34, r24	; 0x22
    43b0:	3f c0       	rjmp	.+126    	; 0x4430 <HLCD_vidWriteChar+0x312>
	else if (__tmp > 65535)
    43b2:	6c a1       	ldd	r22, Y+36	; 0x24
    43b4:	7d a1       	ldd	r23, Y+37	; 0x25
    43b6:	8e a1       	ldd	r24, Y+38	; 0x26
    43b8:	9f a1       	ldd	r25, Y+39	; 0x27
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	3f ef       	ldi	r19, 0xFF	; 255
    43be:	4f e7       	ldi	r20, 0x7F	; 127
    43c0:	57 e4       	ldi	r21, 0x47	; 71
    43c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c6:	18 16       	cp	r1, r24
    43c8:	4c f5       	brge	.+82     	; 0x441c <HLCD_vidWriteChar+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ca:	68 a5       	ldd	r22, Y+40	; 0x28
    43cc:	79 a5       	ldd	r23, Y+41	; 0x29
    43ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    43d0:	9b a5       	ldd	r25, Y+43	; 0x2b
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e2       	ldi	r20, 0x20	; 32
    43d8:	51 e4       	ldi	r21, 0x41	; 65
    43da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	9b a3       	std	Y+35, r25	; 0x23
    43f0:	8a a3       	std	Y+34, r24	; 0x22
    43f2:	0f c0       	rjmp	.+30     	; 0x4412 <HLCD_vidWriteChar+0x2f4>
    43f4:	88 ec       	ldi	r24, 0xC8	; 200
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	99 a3       	std	Y+33, r25	; 0x21
    43fa:	88 a3       	std	Y+32, r24	; 0x20
    43fc:	88 a1       	ldd	r24, Y+32	; 0x20
    43fe:	99 a1       	ldd	r25, Y+33	; 0x21
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <HLCD_vidWriteChar+0x2e2>
    4404:	99 a3       	std	Y+33, r25	; 0x21
    4406:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4408:	8a a1       	ldd	r24, Y+34	; 0x22
    440a:	9b a1       	ldd	r25, Y+35	; 0x23
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	9b a3       	std	Y+35, r25	; 0x23
    4410:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4412:	8a a1       	ldd	r24, Y+34	; 0x22
    4414:	9b a1       	ldd	r25, Y+35	; 0x23
    4416:	00 97       	sbiw	r24, 0x00	; 0
    4418:	69 f7       	brne	.-38     	; 0x43f4 <HLCD_vidWriteChar+0x2d6>
    441a:	24 c0       	rjmp	.+72     	; 0x4464 <HLCD_vidWriteChar+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441c:	6c a1       	ldd	r22, Y+36	; 0x24
    441e:	7d a1       	ldd	r23, Y+37	; 0x25
    4420:	8e a1       	ldd	r24, Y+38	; 0x26
    4422:	9f a1       	ldd	r25, Y+39	; 0x27
    4424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	9b a3       	std	Y+35, r25	; 0x23
    442e:	8a a3       	std	Y+34, r24	; 0x22
    4430:	8a a1       	ldd	r24, Y+34	; 0x22
    4432:	9b a1       	ldd	r25, Y+35	; 0x23
    4434:	9f 8f       	std	Y+31, r25	; 0x1f
    4436:	8e 8f       	std	Y+30, r24	; 0x1e
    4438:	8e 8d       	ldd	r24, Y+30	; 0x1e
    443a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	f1 f7       	brne	.-4      	; 0x443c <HLCD_vidWriteChar+0x31e>
    4440:	9f 8f       	std	Y+31, r25	; 0x1f
    4442:	8e 8f       	std	Y+30, r24	; 0x1e
    4444:	0f c0       	rjmp	.+30     	; 0x4464 <HLCD_vidWriteChar+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4446:	6d a5       	ldd	r22, Y+45	; 0x2d
    4448:	7e a5       	ldd	r23, Y+46	; 0x2e
    444a:	8f a5       	ldd	r24, Y+47	; 0x2f
    444c:	98 a9       	ldd	r25, Y+48	; 0x30
    444e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	8c a7       	std	Y+44, r24	; 0x2c
    4458:	8c a5       	ldd	r24, Y+44	; 0x2c
    445a:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    445c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    445e:	8a 95       	dec	r24
    4460:	f1 f7       	brne	.-4      	; 0x445e <HLCD_vidWriteChar+0x340>
    4462:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_us(200);

	loc_u8DataReg = (u8CharCopy & 0x0F);
    4464:	de 01       	movw	r26, r28
    4466:	ab 5b       	subi	r26, 0xBB	; 187
    4468:	bf 4f       	sbci	r27, 0xFF	; 255
    446a:	fe 01       	movw	r30, r28
    446c:	ea 5b       	subi	r30, 0xBA	; 186
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	80 81       	ld	r24, Z
    4472:	8f 70       	andi	r24, 0x0F	; 15
    4474:	8c 93       	st	X, r24

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    4476:	fe 01       	movw	r30, r28
    4478:	ed 5b       	subi	r30, 0xBD	; 189
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	10 82       	st	Z, r1
    447e:	2c c0       	rjmp	.+88     	; 0x44d8 <HLCD_vidWriteChar+0x3ba>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
    4480:	fe 01       	movw	r30, r28
    4482:	ed 5b       	subi	r30, 0xBD	; 189
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	80 81       	ld	r24, Z
    4488:	88 2f       	mov	r24, r24
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	fc 01       	movw	r30, r24
    448e:	e3 52       	subi	r30, 0x23	; 35
    4490:	fd 4f       	sbci	r31, 0xFD	; 253
    4492:	40 81       	ld	r20, Z
    4494:	fe 01       	movw	r30, r28
    4496:	eb 5b       	subi	r30, 0xBB	; 187
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	80 81       	ld	r24, Z
    449c:	28 2f       	mov	r18, r24
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	fe 01       	movw	r30, r28
    44a2:	ed 5b       	subi	r30, 0xBD	; 189
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	80 81       	ld	r24, Z
    44a8:	88 2f       	mov	r24, r24
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	b9 01       	movw	r22, r18
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <HLCD_vidWriteChar+0x396>
    44b0:	75 95       	asr	r23
    44b2:	67 95       	ror	r22
    44b4:	8a 95       	dec	r24
    44b6:	e2 f7       	brpl	.-8      	; 0x44b0 <HLCD_vidWriteChar+0x392>
    44b8:	cb 01       	movw	r24, r22
    44ba:	98 2f       	mov	r25, r24
    44bc:	91 70       	andi	r25, 0x01	; 1
    44be:	84 2f       	mov	r24, r20
    44c0:	69 2f       	mov	r22, r25
    44c2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>

	_delay_us(200);

	loc_u8DataReg = (u8CharCopy & 0x0F);

	for (Uint8_t i = 0; i < DATA_PIN_NUMBER; i++)
    44c6:	de 01       	movw	r26, r28
    44c8:	ad 5b       	subi	r26, 0xBD	; 189
    44ca:	bf 4f       	sbci	r27, 0xFF	; 255
    44cc:	fe 01       	movw	r30, r28
    44ce:	ed 5b       	subi	r30, 0xBD	; 189
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	8f 5f       	subi	r24, 0xFF	; 255
    44d6:	8c 93       	st	X, r24
    44d8:	fe 01       	movw	r30, r28
    44da:	ed 5b       	subi	r30, 0xBD	; 189
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	84 30       	cpi	r24, 0x04	; 4
    44e2:	70 f2       	brcs	.-100    	; 0x4480 <HLCD_vidWriteChar+0x362>
	{
		DIO_s8SETPinVal(dataPin[i].en_dataPin, ((loc_u8DataReg >> i)&1) );
	}

	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
    44e4:	86 e0       	ldi	r24, 0x06	; 6
    44e6:	61 e0       	ldi	r22, 0x01	; 1
    44e8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	a0 e8       	ldi	r26, 0x80	; 128
    44f2:	bf e3       	ldi	r27, 0x3F	; 63
    44f4:	89 8f       	std	Y+25, r24	; 0x19
    44f6:	9a 8f       	std	Y+26, r25	; 0x1a
    44f8:	ab 8f       	std	Y+27, r26	; 0x1b
    44fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44fc:	69 8d       	ldd	r22, Y+25	; 0x19
    44fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	4a ef       	ldi	r20, 0xFA	; 250
    450a:	54 e4       	ldi	r21, 0x44	; 68
    450c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	8d 8b       	std	Y+21, r24	; 0x15
    4516:	9e 8b       	std	Y+22, r25	; 0x16
    4518:	af 8b       	std	Y+23, r26	; 0x17
    451a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    451c:	6d 89       	ldd	r22, Y+21	; 0x15
    451e:	7e 89       	ldd	r23, Y+22	; 0x16
    4520:	8f 89       	ldd	r24, Y+23	; 0x17
    4522:	98 8d       	ldd	r25, Y+24	; 0x18
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	40 e8       	ldi	r20, 0x80	; 128
    452a:	5f e3       	ldi	r21, 0x3F	; 63
    452c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4530:	88 23       	and	r24, r24
    4532:	2c f4       	brge	.+10     	; 0x453e <HLCD_vidWriteChar+0x420>
		__ticks = 1;
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	9c 8b       	std	Y+20, r25	; 0x14
    453a:	8b 8b       	std	Y+19, r24	; 0x13
    453c:	3f c0       	rjmp	.+126    	; 0x45bc <HLCD_vidWriteChar+0x49e>
	else if (__tmp > 65535)
    453e:	6d 89       	ldd	r22, Y+21	; 0x15
    4540:	7e 89       	ldd	r23, Y+22	; 0x16
    4542:	8f 89       	ldd	r24, Y+23	; 0x17
    4544:	98 8d       	ldd	r25, Y+24	; 0x18
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	3f ef       	ldi	r19, 0xFF	; 255
    454a:	4f e7       	ldi	r20, 0x7F	; 127
    454c:	57 e4       	ldi	r21, 0x47	; 71
    454e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4552:	18 16       	cp	r1, r24
    4554:	4c f5       	brge	.+82     	; 0x45a8 <HLCD_vidWriteChar+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4556:	69 8d       	ldd	r22, Y+25	; 0x19
    4558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    455a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    455c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e2       	ldi	r20, 0x20	; 32
    4564:	51 e4       	ldi	r21, 0x41	; 65
    4566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	bc 01       	movw	r22, r24
    4570:	cd 01       	movw	r24, r26
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	9c 8b       	std	Y+20, r25	; 0x14
    457c:	8b 8b       	std	Y+19, r24	; 0x13
    457e:	0f c0       	rjmp	.+30     	; 0x459e <HLCD_vidWriteChar+0x480>
    4580:	88 ec       	ldi	r24, 0xC8	; 200
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	9a 8b       	std	Y+18, r25	; 0x12
    4586:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4588:	89 89       	ldd	r24, Y+17	; 0x11
    458a:	9a 89       	ldd	r25, Y+18	; 0x12
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	f1 f7       	brne	.-4      	; 0x458c <HLCD_vidWriteChar+0x46e>
    4590:	9a 8b       	std	Y+18, r25	; 0x12
    4592:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4594:	8b 89       	ldd	r24, Y+19	; 0x13
    4596:	9c 89       	ldd	r25, Y+20	; 0x14
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	9c 8b       	std	Y+20, r25	; 0x14
    459c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459e:	8b 89       	ldd	r24, Y+19	; 0x13
    45a0:	9c 89       	ldd	r25, Y+20	; 0x14
    45a2:	00 97       	sbiw	r24, 0x00	; 0
    45a4:	69 f7       	brne	.-38     	; 0x4580 <HLCD_vidWriteChar+0x462>
    45a6:	14 c0       	rjmp	.+40     	; 0x45d0 <HLCD_vidWriteChar+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a8:	6d 89       	ldd	r22, Y+21	; 0x15
    45aa:	7e 89       	ldd	r23, Y+22	; 0x16
    45ac:	8f 89       	ldd	r24, Y+23	; 0x17
    45ae:	98 8d       	ldd	r25, Y+24	; 0x18
    45b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b4:	dc 01       	movw	r26, r24
    45b6:	cb 01       	movw	r24, r22
    45b8:	9c 8b       	std	Y+20, r25	; 0x14
    45ba:	8b 8b       	std	Y+19, r24	; 0x13
    45bc:	8b 89       	ldd	r24, Y+19	; 0x13
    45be:	9c 89       	ldd	r25, Y+20	; 0x14
    45c0:	98 8b       	std	Y+16, r25	; 0x10
    45c2:	8f 87       	std	Y+15, r24	; 0x0f
    45c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c6:	98 89       	ldd	r25, Y+16	; 0x10
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	f1 f7       	brne	.-4      	; 0x45c8 <HLCD_vidWriteChar+0x4aa>
    45cc:	98 8b       	std	Y+16, r25	; 0x10
    45ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
    45d0:	86 e0       	ldi	r24, 0x06	; 6
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	a0 e0       	ldi	r26, 0x00	; 0
    45de:	b0 e4       	ldi	r27, 0x40	; 64
    45e0:	8b 87       	std	Y+11, r24	; 0x0b
    45e2:	9c 87       	std	Y+12, r25	; 0x0c
    45e4:	ad 87       	std	Y+13, r26	; 0x0d
    45e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4a ef       	ldi	r20, 0xFA	; 250
    45f6:	54 e4       	ldi	r21, 0x44	; 68
    45f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	8f 83       	std	Y+7, r24	; 0x07
    4602:	98 87       	std	Y+8, r25	; 0x08
    4604:	a9 87       	std	Y+9, r26	; 0x09
    4606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4608:	6f 81       	ldd	r22, Y+7	; 0x07
    460a:	78 85       	ldd	r23, Y+8	; 0x08
    460c:	89 85       	ldd	r24, Y+9	; 0x09
    460e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	40 e8       	ldi	r20, 0x80	; 128
    4616:	5f e3       	ldi	r21, 0x3F	; 63
    4618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    461c:	88 23       	and	r24, r24
    461e:	2c f4       	brge	.+10     	; 0x462a <HLCD_vidWriteChar+0x50c>
		__ticks = 1;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	9e 83       	std	Y+6, r25	; 0x06
    4626:	8d 83       	std	Y+5, r24	; 0x05
    4628:	3f c0       	rjmp	.+126    	; 0x46a8 <HLCD_vidWriteChar+0x58a>
	else if (__tmp > 65535)
    462a:	6f 81       	ldd	r22, Y+7	; 0x07
    462c:	78 85       	ldd	r23, Y+8	; 0x08
    462e:	89 85       	ldd	r24, Y+9	; 0x09
    4630:	9a 85       	ldd	r25, Y+10	; 0x0a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	3f ef       	ldi	r19, 0xFF	; 255
    4636:	4f e7       	ldi	r20, 0x7F	; 127
    4638:	57 e4       	ldi	r21, 0x47	; 71
    463a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    463e:	18 16       	cp	r1, r24
    4640:	4c f5       	brge	.+82     	; 0x4694 <HLCD_vidWriteChar+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4642:	6b 85       	ldd	r22, Y+11	; 0x0b
    4644:	7c 85       	ldd	r23, Y+12	; 0x0c
    4646:	8d 85       	ldd	r24, Y+13	; 0x0d
    4648:	9e 85       	ldd	r25, Y+14	; 0x0e
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	40 e2       	ldi	r20, 0x20	; 32
    4650:	51 e4       	ldi	r21, 0x41	; 65
    4652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	9e 83       	std	Y+6, r25	; 0x06
    4668:	8d 83       	std	Y+5, r24	; 0x05
    466a:	0f c0       	rjmp	.+30     	; 0x468a <HLCD_vidWriteChar+0x56c>
    466c:	88 ec       	ldi	r24, 0xC8	; 200
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	9c 83       	std	Y+4, r25	; 0x04
    4672:	8b 83       	std	Y+3, r24	; 0x03
    4674:	8b 81       	ldd	r24, Y+3	; 0x03
    4676:	9c 81       	ldd	r25, Y+4	; 0x04
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	f1 f7       	brne	.-4      	; 0x4678 <HLCD_vidWriteChar+0x55a>
    467c:	9c 83       	std	Y+4, r25	; 0x04
    467e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4680:	8d 81       	ldd	r24, Y+5	; 0x05
    4682:	9e 81       	ldd	r25, Y+6	; 0x06
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	9e 81       	ldd	r25, Y+6	; 0x06
    468e:	00 97       	sbiw	r24, 0x00	; 0
    4690:	69 f7       	brne	.-38     	; 0x466c <HLCD_vidWriteChar+0x54e>
    4692:	14 c0       	rjmp	.+40     	; 0x46bc <HLCD_vidWriteChar+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4694:	6f 81       	ldd	r22, Y+7	; 0x07
    4696:	78 85       	ldd	r23, Y+8	; 0x08
    4698:	89 85       	ldd	r24, Y+9	; 0x09
    469a:	9a 85       	ldd	r25, Y+10	; 0x0a
    469c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	9e 83       	std	Y+6, r25	; 0x06
    46a6:	8d 83       	std	Y+5, r24	; 0x05
    46a8:	8d 81       	ldd	r24, Y+5	; 0x05
    46aa:	9e 81       	ldd	r25, Y+6	; 0x06
    46ac:	9a 83       	std	Y+2, r25	; 0x02
    46ae:	89 83       	std	Y+1, r24	; 0x01
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	9a 81       	ldd	r25, Y+2	; 0x02
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <HLCD_vidWriteChar+0x596>
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, HIGH); //ENABLE high
	_delay_ms(2);
	DIO_s8SETPinVal(LCD_EN_PORT_PIN, LOW); //ENABLE low
#endif

}
    46bc:	ca 5b       	subi	r28, 0xBA	; 186
    46be:	df 4f       	sbci	r29, 0xFF	; 255
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	cd bf       	out	0x3d, r28	; 61
    46ca:	cf 91       	pop	r28
    46cc:	df 91       	pop	r29
    46ce:	08 95       	ret

000046d0 <HLCD_ClrDisplay>:
 * description 	: func to clear anything on lcd
 * input param 	: void
 * return		: void
 * */
void HLCD_ClrDisplay(void)
{
    46d0:	df 93       	push	r29
    46d2:	cf 93       	push	r28
    46d4:	cd b7       	in	r28, 0x3d	; 61
    46d6:	de b7       	in	r29, 0x3e	; 62
    46d8:	6c 97       	sbiw	r28, 0x1c	; 28
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	f8 94       	cli
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	0f be       	out	0x3f, r0	; 63
    46e2:	cd bf       	out	0x3d, r28	; 61
	HLCD_vidWritecmd(HLCD_CLEAR_DISPLAY);
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	a0 e8       	ldi	r26, 0x80	; 128
    46f0:	b0 e4       	ldi	r27, 0x40	; 64
    46f2:	89 8f       	std	Y+25, r24	; 0x19
    46f4:	9a 8f       	std	Y+26, r25	; 0x1a
    46f6:	ab 8f       	std	Y+27, r26	; 0x1b
    46f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fa:	69 8d       	ldd	r22, Y+25	; 0x19
    46fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	4a ef       	ldi	r20, 0xFA	; 250
    4708:	54 e4       	ldi	r21, 0x44	; 68
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	8d 8b       	std	Y+21, r24	; 0x15
    4714:	9e 8b       	std	Y+22, r25	; 0x16
    4716:	af 8b       	std	Y+23, r26	; 0x17
    4718:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    471a:	6d 89       	ldd	r22, Y+21	; 0x15
    471c:	7e 89       	ldd	r23, Y+22	; 0x16
    471e:	8f 89       	ldd	r24, Y+23	; 0x17
    4720:	98 8d       	ldd	r25, Y+24	; 0x18
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	40 e8       	ldi	r20, 0x80	; 128
    4728:	5f e3       	ldi	r21, 0x3F	; 63
    472a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    472e:	88 23       	and	r24, r24
    4730:	2c f4       	brge	.+10     	; 0x473c <HLCD_ClrDisplay+0x6c>
		__ticks = 1;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9c 8b       	std	Y+20, r25	; 0x14
    4738:	8b 8b       	std	Y+19, r24	; 0x13
    473a:	3f c0       	rjmp	.+126    	; 0x47ba <HLCD_ClrDisplay+0xea>
	else if (__tmp > 65535)
    473c:	6d 89       	ldd	r22, Y+21	; 0x15
    473e:	7e 89       	ldd	r23, Y+22	; 0x16
    4740:	8f 89       	ldd	r24, Y+23	; 0x17
    4742:	98 8d       	ldd	r25, Y+24	; 0x18
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	3f ef       	ldi	r19, 0xFF	; 255
    4748:	4f e7       	ldi	r20, 0x7F	; 127
    474a:	57 e4       	ldi	r21, 0x47	; 71
    474c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4750:	18 16       	cp	r1, r24
    4752:	4c f5       	brge	.+82     	; 0x47a6 <HLCD_ClrDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4754:	69 8d       	ldd	r22, Y+25	; 0x19
    4756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    475a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e2       	ldi	r20, 0x20	; 32
    4762:	51 e4       	ldi	r21, 0x41	; 65
    4764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	bc 01       	movw	r22, r24
    476e:	cd 01       	movw	r24, r26
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9c 8b       	std	Y+20, r25	; 0x14
    477a:	8b 8b       	std	Y+19, r24	; 0x13
    477c:	0f c0       	rjmp	.+30     	; 0x479c <HLCD_ClrDisplay+0xcc>
    477e:	88 ec       	ldi	r24, 0xC8	; 200
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	9a 8b       	std	Y+18, r25	; 0x12
    4784:	89 8b       	std	Y+17, r24	; 0x11
    4786:	89 89       	ldd	r24, Y+17	; 0x11
    4788:	9a 89       	ldd	r25, Y+18	; 0x12
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <HLCD_ClrDisplay+0xba>
    478e:	9a 8b       	std	Y+18, r25	; 0x12
    4790:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	8b 89       	ldd	r24, Y+19	; 0x13
    4794:	9c 89       	ldd	r25, Y+20	; 0x14
    4796:	01 97       	sbiw	r24, 0x01	; 1
    4798:	9c 8b       	std	Y+20, r25	; 0x14
    479a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479c:	8b 89       	ldd	r24, Y+19	; 0x13
    479e:	9c 89       	ldd	r25, Y+20	; 0x14
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	69 f7       	brne	.-38     	; 0x477e <HLCD_ClrDisplay+0xae>
    47a4:	14 c0       	rjmp	.+40     	; 0x47ce <HLCD_ClrDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a6:	6d 89       	ldd	r22, Y+21	; 0x15
    47a8:	7e 89       	ldd	r23, Y+22	; 0x16
    47aa:	8f 89       	ldd	r24, Y+23	; 0x17
    47ac:	98 8d       	ldd	r25, Y+24	; 0x18
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	9c 8b       	std	Y+20, r25	; 0x14
    47b8:	8b 8b       	std	Y+19, r24	; 0x13
    47ba:	8b 89       	ldd	r24, Y+19	; 0x13
    47bc:	9c 89       	ldd	r25, Y+20	; 0x14
    47be:	98 8b       	std	Y+16, r25	; 0x10
    47c0:	8f 87       	std	Y+15, r24	; 0x0f
    47c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    47c4:	98 89       	ldd	r25, Y+16	; 0x10
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <HLCD_ClrDisplay+0xf6>
    47ca:	98 8b       	std	Y+16, r25	; 0x10
    47cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4);
	HLCD_vidWritecmd(HLCD_CURSOR_HOME);
    47ce:	82 e0       	ldi	r24, 0x02	; 2
    47d0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	a0 e8       	ldi	r26, 0x80	; 128
    47da:	b0 e4       	ldi	r27, 0x40	; 64
    47dc:	8b 87       	std	Y+11, r24	; 0x0b
    47de:	9c 87       	std	Y+12, r25	; 0x0c
    47e0:	ad 87       	std	Y+13, r26	; 0x0d
    47e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	4a ef       	ldi	r20, 0xFA	; 250
    47f2:	54 e4       	ldi	r21, 0x44	; 68
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	8f 83       	std	Y+7, r24	; 0x07
    47fe:	98 87       	std	Y+8, r25	; 0x08
    4800:	a9 87       	std	Y+9, r26	; 0x09
    4802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4804:	6f 81       	ldd	r22, Y+7	; 0x07
    4806:	78 85       	ldd	r23, Y+8	; 0x08
    4808:	89 85       	ldd	r24, Y+9	; 0x09
    480a:	9a 85       	ldd	r25, Y+10	; 0x0a
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	40 e8       	ldi	r20, 0x80	; 128
    4812:	5f e3       	ldi	r21, 0x3F	; 63
    4814:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4818:	88 23       	and	r24, r24
    481a:	2c f4       	brge	.+10     	; 0x4826 <HLCD_ClrDisplay+0x156>
		__ticks = 1;
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9e 83       	std	Y+6, r25	; 0x06
    4822:	8d 83       	std	Y+5, r24	; 0x05
    4824:	3f c0       	rjmp	.+126    	; 0x48a4 <HLCD_ClrDisplay+0x1d4>
	else if (__tmp > 65535)
    4826:	6f 81       	ldd	r22, Y+7	; 0x07
    4828:	78 85       	ldd	r23, Y+8	; 0x08
    482a:	89 85       	ldd	r24, Y+9	; 0x09
    482c:	9a 85       	ldd	r25, Y+10	; 0x0a
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	3f ef       	ldi	r19, 0xFF	; 255
    4832:	4f e7       	ldi	r20, 0x7F	; 127
    4834:	57 e4       	ldi	r21, 0x47	; 71
    4836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483a:	18 16       	cp	r1, r24
    483c:	4c f5       	brge	.+82     	; 0x4890 <HLCD_ClrDisplay+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4840:	7c 85       	ldd	r23, Y+12	; 0x0c
    4842:	8d 85       	ldd	r24, Y+13	; 0x0d
    4844:	9e 85       	ldd	r25, Y+14	; 0x0e
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	40 e2       	ldi	r20, 0x20	; 32
    484c:	51 e4       	ldi	r21, 0x41	; 65
    484e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
    4866:	0f c0       	rjmp	.+30     	; 0x4886 <HLCD_ClrDisplay+0x1b6>
    4868:	88 ec       	ldi	r24, 0xC8	; 200
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9c 83       	std	Y+4, r25	; 0x04
    486e:	8b 83       	std	Y+3, r24	; 0x03
    4870:	8b 81       	ldd	r24, Y+3	; 0x03
    4872:	9c 81       	ldd	r25, Y+4	; 0x04
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	f1 f7       	brne	.-4      	; 0x4874 <HLCD_ClrDisplay+0x1a4>
    4878:	9c 83       	std	Y+4, r25	; 0x04
    487a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	9e 81       	ldd	r25, Y+6	; 0x06
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	9e 83       	std	Y+6, r25	; 0x06
    4884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4886:	8d 81       	ldd	r24, Y+5	; 0x05
    4888:	9e 81       	ldd	r25, Y+6	; 0x06
    488a:	00 97       	sbiw	r24, 0x00	; 0
    488c:	69 f7       	brne	.-38     	; 0x4868 <HLCD_ClrDisplay+0x198>
    488e:	14 c0       	rjmp	.+40     	; 0x48b8 <HLCD_ClrDisplay+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4890:	6f 81       	ldd	r22, Y+7	; 0x07
    4892:	78 85       	ldd	r23, Y+8	; 0x08
    4894:	89 85       	ldd	r24, Y+9	; 0x09
    4896:	9a 85       	ldd	r25, Y+10	; 0x0a
    4898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	9e 83       	std	Y+6, r25	; 0x06
    48a2:	8d 83       	std	Y+5, r24	; 0x05
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	9a 83       	std	Y+2, r25	; 0x02
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	9a 81       	ldd	r25, Y+2	; 0x02
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	f1 f7       	brne	.-4      	; 0x48b0 <HLCD_ClrDisplay+0x1e0>
    48b4:	9a 83       	std	Y+2, r25	; 0x02
    48b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

}
    48b8:	6c 96       	adiw	r28, 0x1c	; 28
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	cf 91       	pop	r28
    48c6:	df 91       	pop	r29
    48c8:	08 95       	ret

000048ca <HLCD_ShiftLeft>:
 * description 	: func to shift the lcd display from right to left
 * input param 	: void
 * return		: void
 * */
void HLCD_ShiftLeft(void)
{
    48ca:	df 93       	push	r29
    48cc:	cf 93       	push	r28
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	2e 97       	sbiw	r28, 0x0e	; 14
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
	HLCD_vidWritecmd(HLCD_DISPLAY_SHIFT_LEFT);
    48de:	88 e1       	ldi	r24, 0x18	; 24
    48e0:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	a0 e8       	ldi	r26, 0x80	; 128
    48ea:	bf e3       	ldi	r27, 0x3F	; 63
    48ec:	8b 87       	std	Y+11, r24	; 0x0b
    48ee:	9c 87       	std	Y+12, r25	; 0x0c
    48f0:	ad 87       	std	Y+13, r26	; 0x0d
    48f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	4a ef       	ldi	r20, 0xFA	; 250
    4902:	54 e4       	ldi	r21, 0x44	; 68
    4904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	8f 83       	std	Y+7, r24	; 0x07
    490e:	98 87       	std	Y+8, r25	; 0x08
    4910:	a9 87       	std	Y+9, r26	; 0x09
    4912:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4914:	6f 81       	ldd	r22, Y+7	; 0x07
    4916:	78 85       	ldd	r23, Y+8	; 0x08
    4918:	89 85       	ldd	r24, Y+9	; 0x09
    491a:	9a 85       	ldd	r25, Y+10	; 0x0a
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	40 e8       	ldi	r20, 0x80	; 128
    4922:	5f e3       	ldi	r21, 0x3F	; 63
    4924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4928:	88 23       	and	r24, r24
    492a:	2c f4       	brge	.+10     	; 0x4936 <HLCD_ShiftLeft+0x6c>
		__ticks = 1;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	9e 83       	std	Y+6, r25	; 0x06
    4932:	8d 83       	std	Y+5, r24	; 0x05
    4934:	3f c0       	rjmp	.+126    	; 0x49b4 <HLCD_ShiftLeft+0xea>
	else if (__tmp > 65535)
    4936:	6f 81       	ldd	r22, Y+7	; 0x07
    4938:	78 85       	ldd	r23, Y+8	; 0x08
    493a:	89 85       	ldd	r24, Y+9	; 0x09
    493c:	9a 85       	ldd	r25, Y+10	; 0x0a
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	3f ef       	ldi	r19, 0xFF	; 255
    4942:	4f e7       	ldi	r20, 0x7F	; 127
    4944:	57 e4       	ldi	r21, 0x47	; 71
    4946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494a:	18 16       	cp	r1, r24
    494c:	4c f5       	brge	.+82     	; 0x49a0 <HLCD_ShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4950:	7c 85       	ldd	r23, Y+12	; 0x0c
    4952:	8d 85       	ldd	r24, Y+13	; 0x0d
    4954:	9e 85       	ldd	r25, Y+14	; 0x0e
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e2       	ldi	r20, 0x20	; 32
    495c:	51 e4       	ldi	r21, 0x41	; 65
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9e 83       	std	Y+6, r25	; 0x06
    4974:	8d 83       	std	Y+5, r24	; 0x05
    4976:	0f c0       	rjmp	.+30     	; 0x4996 <HLCD_ShiftLeft+0xcc>
    4978:	88 ec       	ldi	r24, 0xC8	; 200
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	9c 83       	std	Y+4, r25	; 0x04
    497e:	8b 83       	std	Y+3, r24	; 0x03
    4980:	8b 81       	ldd	r24, Y+3	; 0x03
    4982:	9c 81       	ldd	r25, Y+4	; 0x04
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <HLCD_ShiftLeft+0xba>
    4988:	9c 83       	std	Y+4, r25	; 0x04
    498a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498c:	8d 81       	ldd	r24, Y+5	; 0x05
    498e:	9e 81       	ldd	r25, Y+6	; 0x06
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	9e 83       	std	Y+6, r25	; 0x06
    4994:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4996:	8d 81       	ldd	r24, Y+5	; 0x05
    4998:	9e 81       	ldd	r25, Y+6	; 0x06
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	69 f7       	brne	.-38     	; 0x4978 <HLCD_ShiftLeft+0xae>
    499e:	14 c0       	rjmp	.+40     	; 0x49c8 <HLCD_ShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a0:	6f 81       	ldd	r22, Y+7	; 0x07
    49a2:	78 85       	ldd	r23, Y+8	; 0x08
    49a4:	89 85       	ldd	r24, Y+9	; 0x09
    49a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	9e 83       	std	Y+6, r25	; 0x06
    49b2:	8d 83       	std	Y+5, r24	; 0x05
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <HLCD_ShiftLeft+0xf6>
    49c4:	9a 83       	std	Y+2, r25	; 0x02
    49c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    49c8:	2e 96       	adiw	r28, 0x0e	; 14
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	de bf       	out	0x3e, r29	; 62
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	cd bf       	out	0x3d, r28	; 61
    49d4:	cf 91       	pop	r28
    49d6:	df 91       	pop	r29
    49d8:	08 95       	ret

000049da <HLCD_gotoXY>:
 * 				  row -> take row number 0 or 1
 * 				  pos -> take colom number from 0 ~ 16
 * return		: void
 * */
void HLCD_gotoXY(Uint8_t row, Uint8_t pos)
{
    49da:	df 93       	push	r29
    49dc:	cf 93       	push	r28
    49de:	00 d0       	rcall	.+0      	; 0x49e0 <HLCD_gotoXY+0x6>
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	89 83       	std	Y+1, r24	; 0x01
    49e6:	6a 83       	std	Y+2, r22	; 0x02
	if (row==0 && pos < 16)
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	88 23       	and	r24, r24
    49ec:	49 f4       	brne	.+18     	; 0x4a00 <HLCD_gotoXY+0x26>
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	80 31       	cpi	r24, 0x10	; 16
    49f2:	30 f4       	brcc	.+12     	; 0x4a00 <HLCD_gotoXY+0x26>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0x80);
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	8f 70       	andi	r24, 0x0F	; 15
    49f8:	80 68       	ori	r24, 0x80	; 128
    49fa:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    49fe:	0b c0       	rjmp	.+22     	; 0x4a16 <HLCD_gotoXY+0x3c>
	}
	else if (row==1 && pos < 16)
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	81 30       	cpi	r24, 0x01	; 1
    4a04:	41 f4       	brne	.+16     	; 0x4a16 <HLCD_gotoXY+0x3c>
    4a06:	8a 81       	ldd	r24, Y+2	; 0x02
    4a08:	80 31       	cpi	r24, 0x10	; 16
    4a0a:	28 f4       	brcc	.+10     	; 0x4a16 <HLCD_gotoXY+0x3c>
	{
		HLCD_vidWritecmd((pos & 0x0F)| 0xC0);
    4a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0e:	8f 70       	andi	r24, 0x0F	; 15
    4a10:	80 6c       	ori	r24, 0xC0	; 192
    4a12:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
	}
}
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	cf 91       	pop	r28
    4a1c:	df 91       	pop	r29
    4a1e:	08 95       	ret

00004a20 <HLCD_WriteString>:
 * description 	: func to write string on lcd
 * input param 	: str --> which take string as argument
 * return		: void
 * */
void HLCD_WriteString(Uint8_t* str)
{
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	00 d0       	rcall	.+0      	; 0x4a26 <HLCD_WriteString+0x6>
    4a26:	00 d0       	rcall	.+0      	; 0x4a28 <HLCD_WriteString+0x8>
    4a28:	0f 92       	push	r0
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	9d 83       	std	Y+5, r25	; 0x05
    4a30:	8c 83       	std	Y+4, r24	; 0x04
	Uint16_t count = 0;
    4a32:	1b 82       	std	Y+3, r1	; 0x03
    4a34:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t string = str[count];
    4a36:	2c 81       	ldd	r18, Y+4	; 0x04
    4a38:	3d 81       	ldd	r19, Y+5	; 0x05
    4a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a3e:	f9 01       	movw	r30, r18
    4a40:	e8 0f       	add	r30, r24
    4a42:	f9 1f       	adc	r31, r25
    4a44:	80 81       	ld	r24, Z
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	11 c0       	rjmp	.+34     	; 0x4a6c <HLCD_WriteString+0x4c>
	while(string)
	{
		HLCD_vidWriteChar(string);
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	0e 94 8f 20 	call	0x411e	; 0x411e <HLCD_vidWriteChar>
		string = str[++count];
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	9b 81       	ldd	r25, Y+3	; 0x03
    4a54:	01 96       	adiw	r24, 0x01	; 1
    4a56:	9b 83       	std	Y+3, r25	; 0x03
    4a58:	8a 83       	std	Y+2, r24	; 0x02
    4a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    4a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    4a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a60:	9b 81       	ldd	r25, Y+3	; 0x03
    4a62:	f9 01       	movw	r30, r18
    4a64:	e8 0f       	add	r30, r24
    4a66:	f9 1f       	adc	r31, r25
    4a68:	80 81       	ld	r24, Z
    4a6a:	89 83       	std	Y+1, r24	; 0x01
 * */
void HLCD_WriteString(Uint8_t* str)
{
	Uint16_t count = 0;
	Uint8_t string = str[count];
	while(string)
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	88 23       	and	r24, r24
    4a70:	61 f7       	brne	.-40     	; 0x4a4a <HLCD_WriteString+0x2a>
	{
		HLCD_vidWriteChar(string);
		string = str[++count];
	}
}
    4a72:	0f 90       	pop	r0
    4a74:	0f 90       	pop	r0
    4a76:	0f 90       	pop	r0
    4a78:	0f 90       	pop	r0
    4a7a:	0f 90       	pop	r0
    4a7c:	cf 91       	pop	r28
    4a7e:	df 91       	pop	r29
    4a80:	08 95       	ret

00004a82 <HLCD_WriteInt>:
 * description 	: func to write integer number on lcd
 * input param 	: number --> which take number as argument
 * return		: void
 * */
void HLCD_WriteInt(Uint32_t number)
{
    4a82:	df 93       	push	r29
    4a84:	cf 93       	push	r28
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	2e 97       	sbiw	r28, 0x0e	; 14
    4a8c:	0f b6       	in	r0, 0x3f	; 63
    4a8e:	f8 94       	cli
    4a90:	de bf       	out	0x3e, r29	; 62
    4a92:	0f be       	out	0x3f, r0	; 63
    4a94:	cd bf       	out	0x3d, r28	; 61
    4a96:	6b 87       	std	Y+11, r22	; 0x0b
    4a98:	7c 87       	std	Y+12, r23	; 0x0c
    4a9a:	8d 87       	std	Y+13, r24	; 0x0d
    4a9c:	9e 87       	std	Y+14, r25	; 0x0e
	Uint8_t STR[INDEX];
	itoa(number, STR, 10);
    4a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aa2:	9e 01       	movw	r18, r28
    4aa4:	2f 5f       	subi	r18, 0xFF	; 255
    4aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa8:	b9 01       	movw	r22, r18
    4aaa:	4a e0       	ldi	r20, 0x0A	; 10
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	0e 94 0c 2a 	call	0x5418	; 0x5418 <itoa>
	HLCD_WriteString(STR);
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	0e 94 10 25 	call	0x4a20	; 0x4a20 <HLCD_WriteString>
}
    4aba:	2e 96       	adiw	r28, 0x0e	; 14
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	cf 91       	pop	r28
    4ac8:	df 91       	pop	r29
    4aca:	08 95       	ret

00004acc <HLCD_WriteArabic>:
 * description 	: func to write Arabic string on lcd
 * input param 	: u8ArCharCopy --> which take string as argument
 * return		: void
 * */
void HLCD_WriteArabic(Uint8_t u8ArCharCopy)
{
    4acc:	df 93       	push	r29
    4ace:	cf 93       	push	r28
    4ad0:	0f 92       	push	r0
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	89 83       	std	Y+1, r24	; 0x01
	HLCD_vidWritecmd(0x04);
    4ad8:	84 e0       	ldi	r24, 0x04	; 4
    4ada:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
	HLCD_vidWriteChar(u8ArCharCopy);
    4ade:	89 81       	ldd	r24, Y+1	; 0x01
    4ae0:	0e 94 8f 20 	call	0x411e	; 0x411e <HLCD_vidWriteChar>
}
    4ae4:	0f 90       	pop	r0
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <HLCD_vidCreatCustomChar>:
 * 				  pu8custom  -> take pointer to array which having LCD Custom Character Generated data ### take only 8 characters
 * 				  u8Location -> determine location on CGRAM [0 ~ 8]
 * return		: void
 * */
void HLCD_vidCreatCustomChar(Uint8_t* pu8custom, Uint8_t u8Location)
{
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	62 97       	sbiw	r28, 0x12	; 18
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	99 8b       	std	Y+17, r25	; 0x11
    4b02:	88 8b       	std	Y+16, r24	; 0x10
    4b04:	6a 8b       	std	Y+18, r22	; 0x12
	if (u8Location < 8)  // CGRAM only store 8 characters
    4b06:	8a 89       	ldd	r24, Y+18	; 0x12
    4b08:	88 30       	cpi	r24, 0x08	; 8
    4b0a:	08 f0       	brcs	.+2      	; 0x4b0e <HLCD_vidCreatCustomChar+0x22>
    4b0c:	91 c0       	rjmp	.+290    	; 0x4c30 <HLCD_vidCreatCustomChar+0x144>
	{
		HLCD_vidWritecmd(LCD_SET_CGRAM_ADDR_CMD + (u8Location*8));
    4b0e:	8a 89       	ldd	r24, Y+18	; 0x12
    4b10:	88 2f       	mov	r24, r24
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	08 96       	adiw	r24, 0x08	; 8
    4b16:	88 0f       	add	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	88 0f       	add	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <HLCD_vidWritecmd>
    4b26:	80 e0       	ldi	r24, 0x00	; 0
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	a0 e8       	ldi	r26, 0x80	; 128
    4b2c:	bf e3       	ldi	r27, 0x3F	; 63
    4b2e:	8b 87       	std	Y+11, r24	; 0x0b
    4b30:	9c 87       	std	Y+12, r25	; 0x0c
    4b32:	ad 87       	std	Y+13, r26	; 0x0d
    4b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	4a ef       	ldi	r20, 0xFA	; 250
    4b44:	54 e4       	ldi	r21, 0x44	; 68
    4b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	8f 83       	std	Y+7, r24	; 0x07
    4b50:	98 87       	std	Y+8, r25	; 0x08
    4b52:	a9 87       	std	Y+9, r26	; 0x09
    4b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b56:	6f 81       	ldd	r22, Y+7	; 0x07
    4b58:	78 85       	ldd	r23, Y+8	; 0x08
    4b5a:	89 85       	ldd	r24, Y+9	; 0x09
    4b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	40 e8       	ldi	r20, 0x80	; 128
    4b64:	5f e3       	ldi	r21, 0x3F	; 63
    4b66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b6a:	88 23       	and	r24, r24
    4b6c:	2c f4       	brge	.+10     	; 0x4b78 <HLCD_vidCreatCustomChar+0x8c>
		__ticks = 1;
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	9e 83       	std	Y+6, r25	; 0x06
    4b74:	8d 83       	std	Y+5, r24	; 0x05
    4b76:	3f c0       	rjmp	.+126    	; 0x4bf6 <HLCD_vidCreatCustomChar+0x10a>
	else if (__tmp > 65535)
    4b78:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7a:	78 85       	ldd	r23, Y+8	; 0x08
    4b7c:	89 85       	ldd	r24, Y+9	; 0x09
    4b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	3f ef       	ldi	r19, 0xFF	; 255
    4b84:	4f e7       	ldi	r20, 0x7F	; 127
    4b86:	57 e4       	ldi	r21, 0x47	; 71
    4b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8c:	18 16       	cp	r1, r24
    4b8e:	4c f5       	brge	.+82     	; 0x4be2 <HLCD_vidCreatCustomChar+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e2       	ldi	r20, 0x20	; 32
    4b9e:	51 e4       	ldi	r21, 0x41	; 65
    4ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	bc 01       	movw	r22, r24
    4baa:	cd 01       	movw	r24, r26
    4bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	9e 83       	std	Y+6, r25	; 0x06
    4bb6:	8d 83       	std	Y+5, r24	; 0x05
    4bb8:	0f c0       	rjmp	.+30     	; 0x4bd8 <HLCD_vidCreatCustomChar+0xec>
    4bba:	88 ec       	ldi	r24, 0xC8	; 200
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	9c 83       	std	Y+4, r25	; 0x04
    4bc0:	8b 83       	std	Y+3, r24	; 0x03
    4bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <HLCD_vidCreatCustomChar+0xda>
    4bca:	9c 83       	std	Y+4, r25	; 0x04
    4bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bce:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	9e 83       	std	Y+6, r25	; 0x06
    4bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bda:	9e 81       	ldd	r25, Y+6	; 0x06
    4bdc:	00 97       	sbiw	r24, 0x00	; 0
    4bde:	69 f7       	brne	.-38     	; 0x4bba <HLCD_vidCreatCustomChar+0xce>
    4be0:	14 c0       	rjmp	.+40     	; 0x4c0a <HLCD_vidCreatCustomChar+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be2:	6f 81       	ldd	r22, Y+7	; 0x07
    4be4:	78 85       	ldd	r23, Y+8	; 0x08
    4be6:	89 85       	ldd	r24, Y+9	; 0x09
    4be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bee:	dc 01       	movw	r26, r24
    4bf0:	cb 01       	movw	r24, r22
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
    4bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfa:	9a 83       	std	Y+2, r25	; 0x02
    4bfc:	89 83       	std	Y+1, r24	; 0x01
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	9a 81       	ldd	r25, Y+2	; 0x02
    4c02:	01 97       	sbiw	r24, 0x01	; 1
    4c04:	f1 f7       	brne	.-4      	; 0x4c02 <HLCD_vidCreatCustomChar+0x116>
    4c06:	9a 83       	std	Y+2, r25	; 0x02
    4c08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		for (Uint8_t i = 0; i < 8 ; i++)
    4c0a:	1f 86       	std	Y+15, r1	; 0x0f
    4c0c:	0e c0       	rjmp	.+28     	; 0x4c2a <HLCD_vidCreatCustomChar+0x13e>
		{
			HLCD_vidWriteChar(pu8custom[i]);
    4c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c10:	28 2f       	mov	r18, r24
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	88 89       	ldd	r24, Y+16	; 0x10
    4c16:	99 89       	ldd	r25, Y+17	; 0x11
    4c18:	fc 01       	movw	r30, r24
    4c1a:	e2 0f       	add	r30, r18
    4c1c:	f3 1f       	adc	r31, r19
    4c1e:	80 81       	ld	r24, Z
    4c20:	0e 94 8f 20 	call	0x411e	; 0x411e <HLCD_vidWriteChar>
{
	if (u8Location < 8)  // CGRAM only store 8 characters
	{
		HLCD_vidWritecmd(LCD_SET_CGRAM_ADDR_CMD + (u8Location*8));
		_delay_ms(1);
		for (Uint8_t i = 0; i < 8 ; i++)
    4c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c26:	8f 5f       	subi	r24, 0xFF	; 255
    4c28:	8f 87       	std	Y+15, r24	; 0x0f
    4c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c2c:	88 30       	cpi	r24, 0x08	; 8
    4c2e:	78 f3       	brcs	.-34     	; 0x4c0e <HLCD_vidCreatCustomChar+0x122>
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
    4c30:	62 96       	adiw	r28, 0x12	; 18
    4c32:	0f b6       	in	r0, 0x3f	; 63
    4c34:	f8 94       	cli
    4c36:	de bf       	out	0x3e, r29	; 62
    4c38:	0f be       	out	0x3f, r0	; 63
    4c3a:	cd bf       	out	0x3d, r28	; 61
    4c3c:	cf 91       	pop	r28
    4c3e:	df 91       	pop	r29
    4c40:	08 95       	ret

00004c42 <HExtInt_enInit>:


ptr_func cbf = NULL;

enu_HExtIntError_t HExtInt_enInit(enu_int_type_t enExtint, enu_sns_ctrl_t snsCtrl)
{
    4c42:	df 93       	push	r29
    4c44:	cf 93       	push	r28
    4c46:	00 d0       	rcall	.+0      	; 0x4c48 <HExtInt_enInit+0x6>
    4c48:	0f 92       	push	r0
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
    4c4e:	8a 83       	std	Y+2, r24	; 0x02
    4c50:	6b 83       	std	Y+3, r22	; 0x03
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8SETPinVal(DIO_PIND_2, HIGH);
    4c56:	8a e1       	ldi	r24, 0x1A	; 26
    4c58:	61 e0       	ldi	r22, 0x01	; 1
    4c5a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
	vidExtInt_init(enExtint , snsCtrl );
    4c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c60:	6b 81       	ldd	r22, Y+3	; 0x03
    4c62:	0e 94 b7 12 	call	0x256e	; 0x256e <vidExtInt_init>

	return errorStatus;
    4c66:	89 81       	ldd	r24, Y+1	; 0x01

}
    4c68:	0f 90       	pop	r0
    4c6a:	0f 90       	pop	r0
    4c6c:	0f 90       	pop	r0
    4c6e:	cf 91       	pop	r28
    4c70:	df 91       	pop	r29
    4c72:	08 95       	ret

00004c74 <HExtInt_enCBF>:

enu_HExtIntError_t HExtInt_enCBF(ptr_func pFunc)
{
    4c74:	df 93       	push	r29
    4c76:	cf 93       	push	r28
    4c78:	00 d0       	rcall	.+0      	; 0x4c7a <HExtInt_enCBF+0x6>
    4c7a:	0f 92       	push	r0
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    4c80:	9b 83       	std	Y+3, r25	; 0x03
    4c82:	8a 83       	std	Y+2, r24	; 0x02
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	89 83       	std	Y+1, r24	; 0x01

	if (pFunc != NULL)
    4c88:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	29 f0       	breq	.+10     	; 0x4c9a <HExtInt_enCBF+0x26>
	{
		MEXTINT_vidCallBackFunc(pFunc);
    4c90:	8a 81       	ldd	r24, Y+2	; 0x02
    4c92:	9b 81       	ldd	r25, Y+3	; 0x03
    4c94:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <MEXTINT_vidCallBackFunc>
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <HExtInt_enCBF+0x28>
	}
	else
	{
		errorStatus = HEXTINT_NOK;
    4c9a:	19 82       	std	Y+1, r1	; 0x01
	}


	return errorStatus;
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01

}
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	cf 91       	pop	r28
    4ca6:	df 91       	pop	r29
    4ca8:	08 95       	ret

00004caa <HExtInt_enCBFInt1>:

enu_HExtIntError_t HExtInt_enCBFInt1(ptr_func pFunc)
{
    4caa:	df 93       	push	r29
    4cac:	cf 93       	push	r28
    4cae:	00 d0       	rcall	.+0      	; 0x4cb0 <HExtInt_enCBFInt1+0x6>
    4cb0:	0f 92       	push	r0
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	9b 83       	std	Y+3, r25	; 0x03
    4cb8:	8a 83       	std	Y+2, r24	; 0x02
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	89 83       	std	Y+1, r24	; 0x01

	if (pFunc != NULL)
    4cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc2:	00 97       	sbiw	r24, 0x00	; 0
    4cc4:	29 f0       	breq	.+10     	; 0x4cd0 <HExtInt_enCBFInt1+0x26>
	{
		MEXTINT_vidCallBackFuncInt1(pFunc);
    4cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cca:	0e 94 02 14 	call	0x2804	; 0x2804 <MEXTINT_vidCallBackFuncInt1>
    4cce:	01 c0       	rjmp	.+2      	; 0x4cd2 <HExtInt_enCBFInt1+0x28>
	}
	else
	{
		errorStatus = HEXTINT_NOK;
    4cd0:	19 82       	std	Y+1, r1	; 0x01
	}


	return errorStatus;
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	cf 91       	pop	r28
    4cdc:	df 91       	pop	r29
    4cde:	08 95       	ret

00004ce0 <eeprom_init>:
#define EEPROM_ADDRESS		0b01010000



void eeprom_init(void)
{
    4ce0:	df 93       	push	r29
    4ce2:	cf 93       	push	r28
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
	i2c_init_master();
    4ce8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <i2c_init_master>
}
    4cec:	cf 91       	pop	r28
    4cee:	df 91       	pop	r29
    4cf0:	08 95       	ret

00004cf2 <eeprom_write_byte>:


void eeprom_write_byte(Uint16_t address, Uint8_t data)  // address is 10 bit
{
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	00 d0       	rcall	.+0      	; 0x4cf8 <eeprom_write_byte+0x6>
    4cf8:	00 d0       	rcall	.+0      	; 0x4cfa <eeprom_write_byte+0x8>
    4cfa:	0f 92       	push	r0
    4cfc:	cd b7       	in	r28, 0x3d	; 61
    4cfe:	de b7       	in	r29, 0x3e	; 62
    4d00:	9c 83       	std	Y+4, r25	; 0x04
    4d02:	8b 83       	std	Y+3, r24	; 0x03
    4d04:	6d 83       	std	Y+5, r22	; 0x05
	Uint8_t deviceAddress;
	Uint8_t dataAddress;

	deviceAddress = EEPROM_ADDRESS | ((address >> 8) & 0x0003);
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	89 2f       	mov	r24, r25
    4d0c:	99 27       	eor	r25, r25
    4d0e:	83 70       	andi	r24, 0x03	; 3
    4d10:	80 65       	ori	r24, 0x50	; 80
    4d12:	8a 83       	std	Y+2, r24	; 0x02
//	dataAddress = (address & 0b0011111111);

	/* Send start condition */
	i2c_start();
    4d14:	0e 94 22 11 	call	0x2244	; 0x2244 <i2c_start>
	/* Send slave address */
	i2c_send_slave_address_with_write_req(deviceAddress);     // i2c_write_byte(0x50 | (address >> 8) & 0x00000111 );
    4d18:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1a:	0e 94 56 11 	call	0x22ac	; 0x22ac <i2c_send_slave_address_with_write_req>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  // 520 = 0b 01010 0  0  1   1 01110 11
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  //                A2 P1 P2  B7      B0
	/* Send data location */
	i2c_write_byte((Uint8_t) address); // or i2c_write_byte(dataAddress);
    4d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d20:	0e 94 9e 11 	call	0x233c	; 0x233c <i2c_write_byte>
	/* Send data */
	i2c_write_byte(data);
    4d24:	8d 81       	ldd	r24, Y+5	; 0x05
    4d26:	0e 94 9e 11 	call	0x233c	; 0x233c <i2c_write_byte>
	/* Send Stop Condition */
	i2c_stop();
    4d2a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <i2c_stop>
}
    4d2e:	0f 90       	pop	r0
    4d30:	0f 90       	pop	r0
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	cf 91       	pop	r28
    4d3a:	df 91       	pop	r29
    4d3c:	08 95       	ret

00004d3e <eeprom_read_byte>:


Uint8_t eeprom_read_byte(Uint16_t address)
{
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	00 d0       	rcall	.+0      	; 0x4d44 <eeprom_read_byte+0x6>
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <eeprom_read_byte+0x8>
    4d46:	0f 92       	push	r0
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	9d 83       	std	Y+5, r25	; 0x05
    4d4e:	8c 83       	std	Y+4, r24	; 0x04
	Uint8_t deviceAddress;
	Uint8_t dataAddress;
	Uint8_t data;
	deviceAddress = EEPROM_ADDRESS | ((address >> 8) & 0x0003);
    4d50:	8c 81       	ldd	r24, Y+4	; 0x04
    4d52:	9d 81       	ldd	r25, Y+5	; 0x05
    4d54:	89 2f       	mov	r24, r25
    4d56:	99 27       	eor	r25, r25
    4d58:	83 70       	andi	r24, 0x03	; 3
    4d5a:	80 65       	ori	r24, 0x50	; 80
    4d5c:	8b 83       	std	Y+3, r24	; 0x03

	/* Send start condition */
	i2c_start();
    4d5e:	0e 94 22 11 	call	0x2244	; 0x2244 <i2c_start>
	/* Send slave address with write request*/
	i2c_send_slave_address_with_write_req(deviceAddress);
    4d62:	8b 81       	ldd	r24, Y+3	; 0x03
    4d64:	0e 94 56 11 	call	0x22ac	; 0x22ac <i2c_send_slave_address_with_write_req>
	/* Send Data location*/
	i2c_write_byte((Uint8_t) address);
    4d68:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6a:	0e 94 9e 11 	call	0x233c	; 0x233c <i2c_write_byte>
	/* Send Repeated Start Condition*/
	i2c_repeated_start();
    4d6e:	0e 94 3c 11 	call	0x2278	; 0x2278 <i2c_repeated_start>
	/* Send slave address with read request*/
	i2c_send_slave_address_with_read_req(deviceAddress);
    4d72:	8b 81       	ldd	r24, Y+3	; 0x03
    4d74:	0e 94 7f 11 	call	0x22fe	; 0x22fe <i2c_send_slave_address_with_read_req>
	/*Read Received Byte*/
	data = i2c_read_byte();
    4d78:	0e 94 c9 11 	call	0x2392	; 0x2392 <i2c_read_byte>
    4d7c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Stop Condition */
	i2c_stop();
    4d7e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <i2c_stop>

	return data;
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	0f 90       	pop	r0
    4d8a:	0f 90       	pop	r0
    4d8c:	0f 90       	pop	r0
    4d8e:	cf 91       	pop	r28
    4d90:	df 91       	pop	r29
    4d92:	08 95       	ret

00004d94 <eeprom_write_string>:



void eeprom_write_string(Uint16_t Copy_u8Address, const Uint8_t* str)
{
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	cd b7       	in	r28, 0x3d	; 61
    4d9a:	de b7       	in	r29, 0x3e	; 62
    4d9c:	27 97       	sbiw	r28, 0x07	; 7
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	f8 94       	cli
    4da2:	de bf       	out	0x3e, r29	; 62
    4da4:	0f be       	out	0x3f, r0	; 63
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	9d 83       	std	Y+5, r25	; 0x05
    4daa:	8c 83       	std	Y+4, r24	; 0x04
    4dac:	7f 83       	std	Y+7, r23	; 0x07
    4dae:	6e 83       	std	Y+6, r22	; 0x06
	Uint8_t sendedAddress;
	Uint8_t dataAddress;
	Uint8_t count = 0;
    4db0:	19 82       	std	Y+1, r1	; 0x01
    4db2:	03 c0       	rjmp	.+6      	; 0x4dba <eeprom_write_string+0x26>

	while(str[count] != '\0')
	{
		count++;
    4db4:	89 81       	ldd	r24, Y+1	; 0x01
    4db6:	8f 5f       	subi	r24, 0xFF	; 255
    4db8:	89 83       	std	Y+1, r24	; 0x01
{
	Uint8_t sendedAddress;
	Uint8_t dataAddress;
	Uint8_t count = 0;

	while(str[count] != '\0')
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	e2 0f       	add	r30, r18
    4dc8:	f3 1f       	adc	r31, r19
    4dca:	80 81       	ld	r24, Z
    4dcc:	88 23       	and	r24, r24
    4dce:	91 f7       	brne	.-28     	; 0x4db4 <eeprom_write_string+0x20>
	{
		count++;

	}
	sendedAddress = EEPROM_ADDRESS | ((Copy_u8Address >> 8) & 0x0003);
    4dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    4dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    4dd4:	89 2f       	mov	r24, r25
    4dd6:	99 27       	eor	r25, r25
    4dd8:	83 70       	andi	r24, 0x03	; 3
    4dda:	80 65       	ori	r24, 0x50	; 80
    4ddc:	8b 83       	std	Y+3, r24	; 0x03
	dataAddress = (Uint8_t)Copy_u8Address;
    4dde:	8c 81       	ldd	r24, Y+4	; 0x04
    4de0:	8a 83       	std	Y+2, r24	; 0x02
	i2c_start();
    4de2:	0e 94 22 11 	call	0x2244	; 0x2244 <i2c_start>

	i2c_send_slave_address_with_write_req(sendedAddress);
    4de6:	8b 81       	ldd	r24, Y+3	; 0x03
    4de8:	0e 94 56 11 	call	0x22ac	; 0x22ac <i2c_send_slave_address_with_write_req>
	i2c_write_byte((Uint8_t) dataAddress);
    4dec:	8a 81       	ldd	r24, Y+2	; 0x02
    4dee:	0e 94 9e 11 	call	0x233c	; 0x233c <i2c_write_byte>
    4df2:	0a c0       	rjmp	.+20     	; 0x4e08 <eeprom_write_string+0x74>

//    i2c_write_byte(count);

	while(*str != '\0')
	{
		i2c_write_byte(*str);
    4df4:	ee 81       	ldd	r30, Y+6	; 0x06
    4df6:	ff 81       	ldd	r31, Y+7	; 0x07
    4df8:	80 81       	ld	r24, Z
    4dfa:	0e 94 9e 11 	call	0x233c	; 0x233c <i2c_write_byte>
		str++;
    4dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    4e00:	9f 81       	ldd	r25, Y+7	; 0x07
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	9f 83       	std	Y+7, r25	; 0x07
    4e06:	8e 83       	std	Y+6, r24	; 0x06
	i2c_send_slave_address_with_write_req(sendedAddress);
	i2c_write_byte((Uint8_t) dataAddress);

//    i2c_write_byte(count);

	while(*str != '\0')
    4e08:	ee 81       	ldd	r30, Y+6	; 0x06
    4e0a:	ff 81       	ldd	r31, Y+7	; 0x07
    4e0c:	80 81       	ld	r24, Z
    4e0e:	88 23       	and	r24, r24
    4e10:	89 f7       	brne	.-30     	; 0x4df4 <eeprom_write_string+0x60>
//	    {
//		    i2c_write_byte(*str++);
//	    }
	   // i2c_write_byte('\0');

		i2c_stop();
    4e12:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <i2c_stop>
}
    4e16:	27 96       	adiw	r28, 0x07	; 7
    4e18:	0f b6       	in	r0, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	de bf       	out	0x3e, r29	; 62
    4e1e:	0f be       	out	0x3f, r0	; 63
    4e20:	cd bf       	out	0x3d, r28	; 61
    4e22:	cf 91       	pop	r28
    4e24:	df 91       	pop	r29
    4e26:	08 95       	ret

00004e28 <eeprom_read_string>:



void eeprom_read_string(Uint16_t Copy_u8Address, Uint16_t copy_address_PAN_length_size, Uint8_t* str)
{
    4e28:	0f 93       	push	r16
    4e2a:	1f 93       	push	r17
    4e2c:	df 93       	push	r29
    4e2e:	cf 93       	push	r28
    4e30:	cd b7       	in	r28, 0x3d	; 61
    4e32:	de b7       	in	r29, 0x3e	; 62
    4e34:	29 97       	sbiw	r28, 0x09	; 9
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	f8 94       	cli
    4e3a:	de bf       	out	0x3e, r29	; 62
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	cd bf       	out	0x3d, r28	; 61
    4e40:	9d 83       	std	Y+5, r25	; 0x05
    4e42:	8c 83       	std	Y+4, r24	; 0x04
    4e44:	7f 83       	std	Y+7, r23	; 0x07
    4e46:	6e 83       	std	Y+6, r22	; 0x06
    4e48:	59 87       	std	Y+9, r21	; 0x09
    4e4a:	48 87       	std	Y+8, r20	; 0x08
	Uint8_t len ,count = 0;
    4e4c:	1a 82       	std	Y+2, r1	; 0x02
	len = eeprom_read_byte(copy_address_PAN_length_size);
    4e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e50:	9f 81       	ldd	r25, Y+7	; 0x07
    4e52:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <eeprom_read_byte>
    4e56:	8b 83       	std	Y+3, r24	; 0x03

	 for(Uint8_t i=0;i<len;i++)
    4e58:	19 82       	std	Y+1, r1	; 0x01
    4e5a:	1a c0       	rjmp	.+52     	; 0x4e90 <eeprom_read_string+0x68>
	 {
		 str[count++] = eeprom_read_byte(Copy_u8Address++);;
    4e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5e:	28 2f       	mov	r18, r24
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	88 85       	ldd	r24, Y+8	; 0x08
    4e64:	99 85       	ldd	r25, Y+9	; 0x09
    4e66:	8c 01       	movw	r16, r24
    4e68:	02 0f       	add	r16, r18
    4e6a:	13 1f       	adc	r17, r19
    4e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    4e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    4e70:	8c 81       	ldd	r24, Y+4	; 0x04
    4e72:	9d 81       	ldd	r25, Y+5	; 0x05
    4e74:	01 96       	adiw	r24, 0x01	; 1
    4e76:	9d 83       	std	Y+5, r25	; 0x05
    4e78:	8c 83       	std	Y+4, r24	; 0x04
    4e7a:	c9 01       	movw	r24, r18
    4e7c:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <eeprom_read_byte>
    4e80:	f8 01       	movw	r30, r16
    4e82:	80 83       	st	Z, r24
    4e84:	8a 81       	ldd	r24, Y+2	; 0x02
    4e86:	8f 5f       	subi	r24, 0xFF	; 255
    4e88:	8a 83       	std	Y+2, r24	; 0x02
void eeprom_read_string(Uint16_t Copy_u8Address, Uint16_t copy_address_PAN_length_size, Uint8_t* str)
{
	Uint8_t len ,count = 0;
	len = eeprom_read_byte(copy_address_PAN_length_size);

	 for(Uint8_t i=0;i<len;i++)
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	8f 5f       	subi	r24, 0xFF	; 255
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	99 81       	ldd	r25, Y+1	; 0x01
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	98 17       	cp	r25, r24
    4e96:	10 f3       	brcs	.-60     	; 0x4e5c <eeprom_read_string+0x34>
	 {
		 str[count++] = eeprom_read_byte(Copy_u8Address++);;
	 }

	 str[count] = '\0';
    4e98:	8a 81       	ldd	r24, Y+2	; 0x02
    4e9a:	28 2f       	mov	r18, r24
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	88 85       	ldd	r24, Y+8	; 0x08
    4ea0:	99 85       	ldd	r25, Y+9	; 0x09
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	e2 0f       	add	r30, r18
    4ea6:	f3 1f       	adc	r31, r19
    4ea8:	10 82       	st	Z, r1
}
    4eaa:	29 96       	adiw	r28, 0x09	; 9
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	de bf       	out	0x3e, r29	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	cd bf       	out	0x3d, r28	; 61
    4eb6:	cf 91       	pop	r28
    4eb8:	df 91       	pop	r29
    4eba:	1f 91       	pop	r17
    4ebc:	0f 91       	pop	r16
    4ebe:	08 95       	ret

00004ec0 <HButton_Init>:
* FUNCTION			: HButton_Init
* DESCRIPTION		: Initialize specified pin as input and pull up
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_Init(enu_pin en_pinx)
{
    4ec0:	df 93       	push	r29
    4ec2:	cf 93       	push	r28
    4ec4:	00 d0       	rcall	.+0      	; 0x4ec6 <HButton_Init+0x6>
    4ec6:	cd b7       	in	r28, 0x3d	; 61
    4ec8:	de b7       	in	r29, 0x3e	; 62
    4eca:	8a 83       	std	Y+2, r24	; 0x02
	enu_buttonError_t errorStatus = BUTTON_OK;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    4ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed2:	80 32       	cpi	r24, 0x20	; 32
    4ed4:	48 f4       	brcc	.+18     	; 0x4ee8 <HButton_Init+0x28>
	{
		DIO_s8SETPinDir(en_pinx, INPUT);
    4ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed8:	60 e0       	ldi	r22, 0x00	; 0
    4eda:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_s8SETPinDir>
		DIO_s8SETPinVal(en_pinx, HIGH);
    4ede:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee0:	61 e0       	ldi	r22, 0x01	; 1
    4ee2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <HButton_Init+0x2c>
	}
	else
	{
		errorStatus = BUTTON_OK;
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
}
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	08 95       	ret

00004ef8 <HButton_ExtIntInit>:
* FUNCTION			: HButton_ExtIntInit
* DESCRIPTION		: Initialize specified as pull up for external interrupt
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
    4ef8:	df 93       	push	r29
    4efa:	cf 93       	push	r28
    4efc:	00 d0       	rcall	.+0      	; 0x4efe <HButton_ExtIntInit+0x6>
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	8a 83       	std	Y+2, r24	; 0x02
	enu_buttonError_t errorStatus = BUTTON_OK;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    4f08:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0a:	80 32       	cpi	r24, 0x20	; 32
    4f0c:	28 f4       	brcc	.+10     	; 0x4f18 <HButton_ExtIntInit+0x20>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
    4f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f10:	61 e0       	ldi	r22, 0x01	; 1
    4f12:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <DIO_s8SETPinVal>
    4f16:	02 c0       	rjmp	.+4      	; 0x4f1c <HButton_ExtIntInit+0x24>
	}
	else
	{
		errorStatus = BUTTON_OK;
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f1e:	0f 90       	pop	r0
    4f20:	0f 90       	pop	r0
    4f22:	cf 91       	pop	r28
    4f24:	df 91       	pop	r29
    4f26:	08 95       	ret

00004f28 <HButton_getPinVal>:
* FUNCTION			: HButton_getPinVal
* DESCRIPTION		: Get pin status if it is high or low
* RETURN			: enu_buttonError_t {BUTTON_NOK, BUTTON_OK}
*/
enu_buttonError_t HButton_getPinVal(enu_pin en_pinx,  Uint8_t* pu8_refVal )
{
    4f28:	df 93       	push	r29
    4f2a:	cf 93       	push	r28
    4f2c:	00 d0       	rcall	.+0      	; 0x4f2e <HButton_getPinVal+0x6>
    4f2e:	00 d0       	rcall	.+0      	; 0x4f30 <HButton_getPinVal+0x8>
    4f30:	cd b7       	in	r28, 0x3d	; 61
    4f32:	de b7       	in	r29, 0x3e	; 62
    4f34:	8a 83       	std	Y+2, r24	; 0x02
    4f36:	7c 83       	std	Y+4, r23	; 0x04
    4f38:	6b 83       	std	Y+3, r22	; 0x03
	enu_buttonError_t errorStatus = BUTTON_OK;
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID && pu8_refVal != NULL )
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	80 32       	cpi	r24, 0x20	; 32
    4f42:	58 f4       	brcc	.+22     	; 0x4f5a <HButton_getPinVal+0x32>
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	9c 81       	ldd	r25, Y+4	; 0x04
    4f48:	00 97       	sbiw	r24, 0x00	; 0
    4f4a:	39 f0       	breq	.+14     	; 0x4f5a <HButton_getPinVal+0x32>
	{
		(void)DIO_s8GETPinVal(en_pinx, pu8_refVal);
    4f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    4f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	b9 01       	movw	r22, r18
    4f54:	0e 94 56 16 	call	0x2cac	; 0x2cac <DIO_s8GETPinVal>
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <HButton_getPinVal+0x36>
	}
	else
	{
		errorStatus = BUTTON_OK;
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4f60:	0f 90       	pop	r0
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	cf 91       	pop	r28
    4f6a:	df 91       	pop	r29
    4f6c:	08 95       	ret

00004f6e <resetFunc>:
Uint8_t myMode = PROGRAMMING_MODE;

Uint8_t gl_reset_is_set = 0;

void resetFunc(void)
{
    4f6e:	df 93       	push	r29
    4f70:	cf 93       	push	r28
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
    gl_reset_is_set = 1;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	80 93 f3 02 	sts	0x02F3, r24
    myMode = NO_MODE;
    4f7c:	10 92 e1 02 	sts	0x02E1, r1
}
    4f80:	cf 91       	pop	r28
    4f82:	df 91       	pop	r29
    4f84:	08 95       	ret

00004f86 <vid_appInit>:




void vid_appInit(void)
{
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62
	(void) HUART_enInit(9600);
    4f8e:	60 e8       	ldi	r22, 0x80	; 128
    4f90:	75 e2       	ldi	r23, 0x25	; 37
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	0e 94 95 18 	call	0x312a	; 0x312a <HUART_enInit>
	eeprom_init();
    4f9a:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <eeprom_init>
	(void) HTimer_enInit();
    4f9e:	0e 94 08 19 	call	0x3210	; 0x3210 <HTimer_enInit>
	(void) HSPI_enMasterInit(SPI_PRE_16);
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	0e 94 60 19 	call	0x32c0	; 0x32c0 <HSPI_enMasterInit>
	(void) HExtInt_enInit(INT_0, FALL_EDGE);
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	62 e0       	ldi	r22, 0x02	; 2
    4fac:	0e 94 21 26 	call	0x4c42	; 0x4c42 <HExtInt_enInit>
	(void) HExtInt_enCBF(resetFunc);
    4fb0:	87 eb       	ldi	r24, 0xB7	; 183
    4fb2:	97 e2       	ldi	r25, 0x27	; 39
    4fb4:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <HExtInt_enCBF>
	HLed_Init(DIO_PINB_0); // For Trigger
    4fb8:	88 e0       	ldi	r24, 0x08	; 8
    4fba:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <HLed_Init>
}
    4fbe:	cf 91       	pop	r28
    4fc0:	df 91       	pop	r29
    4fc2:	08 95       	ret

00004fc4 <vid_appStart>:

void vid_appStart(void)
{
    4fc4:	df 93       	push	r29
    4fc6:	cf 93       	push	r28
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
    4fcc:	cd 56       	subi	r28, 0x6D	; 109
    4fce:	d0 40       	sbci	r29, 0x00	; 0
    4fd0:	0f b6       	in	r0, 0x3f	; 63
    4fd2:	f8 94       	cli
    4fd4:	de bf       	out	0x3e, r29	; 62
    4fd6:	0f be       	out	0x3f, r0	; 63
    4fd8:	cd bf       	out	0x3d, r28	; 61
	Uint8_t  is_ok = 0 , flag = 0, rePIN_status = 0 , once = 0 , ch;
    4fda:	18 86       	std	Y+8, r1	; 0x08
    4fdc:	1f 82       	std	Y+7, r1	; 0x07
    4fde:	1e 82       	std	Y+6, r1	; 0x06
    4fe0:	1d 82       	std	Y+5, r1	; 0x05
	Uint8_t selection , PAN_size = 0, PIN_size = 0;
    4fe2:	1b 82       	std	Y+3, r1	; 0x03
    4fe4:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t read_string_from_eeprom[50] , read_pin_from_eeprom[10];


	while(1)
	{
		if (once == 0)
    4fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe8:	88 23       	and	r24, r24
    4fea:	39 f5       	brne	.+78     	; 0x503a <vid_appStart+0x76>
		{
			if (eeprom_read_byte(0x0060) == 0xAA && gl_reset_is_set == 0)
    4fec:	80 e6       	ldi	r24, 0x60	; 96
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <eeprom_read_byte>
    4ff4:	8a 3a       	cpi	r24, 0xAA	; 170
    4ff6:	71 f4       	brne	.+28     	; 0x5014 <vid_appStart+0x50>
    4ff8:	80 91 f3 02 	lds	r24, 0x02F3
    4ffc:	88 23       	and	r24, r24
    4ffe:	51 f4       	brne	.+20     	; 0x5014 <vid_appStart+0x50>
			{
				HTimer_vidDelayMs(30);
    5000:	6e e1       	ldi	r22, 0x1E	; 30
    5002:	70 e0       	ldi	r23, 0x00	; 0
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
				myMode = USER_MODE;
    500c:	82 e0       	ldi	r24, 0x02	; 2
    500e:	80 93 e1 02 	sts	0x02E1, r24
    5012:	13 c0       	rjmp	.+38     	; 0x503a <vid_appStart+0x76>
			}
			else if (eeprom_read_byte(0x0060) != 0xAA && gl_reset_is_set == 0)
    5014:	80 e6       	ldi	r24, 0x60	; 96
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <eeprom_read_byte>
    501c:	8a 3a       	cpi	r24, 0xAA	; 170
    501e:	69 f0       	breq	.+26     	; 0x503a <vid_appStart+0x76>
    5020:	80 91 f3 02 	lds	r24, 0x02F3
    5024:	88 23       	and	r24, r24
    5026:	49 f4       	brne	.+18     	; 0x503a <vid_appStart+0x76>
			{
				HTimer_vidDelayMs(30);
    5028:	6e e1       	ldi	r22, 0x1E	; 30
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
				myMode = PROGRAMMING_MODE;
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	80 93 e1 02 	sts	0x02E1, r24
		else
		{
			/* do nothing */
		}

		if ( NO_MODE == myMode)
    503a:	80 91 e1 02 	lds	r24, 0x02E1
    503e:	88 23       	and	r24, r24
    5040:	19 f5       	brne	.+70     	; 0x5088 <vid_appStart+0xc4>
		{
			HUART_sendSTRING( (Uint8_t* ) "Hello! please Enter Mode \r\n" );
    5042:	88 e6       	ldi	r24, 0x68	; 104
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HUART_sendSTRING( (Uint8_t* ) "PROGRAMMING MODE press 1 \r\n" );
    504a:	84 e8       	ldi	r24, 0x84	; 132
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HUART_sendSTRING( (Uint8_t* ) "USER MODE 		press 2 \r\n" );
    5052:	80 ea       	ldi	r24, 0xA0	; 160
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HUART_sendSTRING( (Uint8_t* ) ">> " );
    505a:	87 eb       	ldi	r24, 0xB7	; 183
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			(void)HUART_enRecieveData( &selection );
    5062:	ce 01       	movw	r24, r28
    5064:	09 96       	adiw	r24, 0x09	; 9
    5066:	0e 94 c4 18 	call	0x3188	; 0x3188 <HUART_enRecieveData>

			if( selection == '1' )
    506a:	89 85       	ldd	r24, Y+9	; 0x09
    506c:	81 33       	cpi	r24, 0x31	; 49
    506e:	21 f4       	brne	.+8      	; 0x5078 <vid_appStart+0xb4>
			{
				myMode = PROGRAMMING_MODE;
    5070:	81 e0       	ldi	r24, 0x01	; 1
    5072:	80 93 e1 02 	sts	0x02E1, r24
    5076:	b7 cf       	rjmp	.-146    	; 0x4fe6 <vid_appStart+0x22>
			}
			else if(selection == '2')
    5078:	89 85       	ldd	r24, Y+9	; 0x09
    507a:	82 33       	cpi	r24, 0x32	; 50
    507c:	09 f0       	breq	.+2      	; 0x5080 <vid_appStart+0xbc>
    507e:	b3 cf       	rjmp	.-154    	; 0x4fe6 <vid_appStart+0x22>
			{
				myMode = USER_MODE;
    5080:	82 e0       	ldi	r24, 0x02	; 2
    5082:	80 93 e1 02 	sts	0x02E1, r24
    5086:	af cf       	rjmp	.-162    	; 0x4fe6 <vid_appStart+0x22>


			//HTimer_vidDelayMs(1000);

		}
		else if (PROGRAMMING_MODE == myMode )
    5088:	80 91 e1 02 	lds	r24, 0x02E1
    508c:	81 30       	cpi	r24, 0x01	; 1
    508e:	09 f0       	breq	.+2      	; 0x5092 <vid_appStart+0xce>
    5090:	db c0       	rjmp	.+438    	; 0x5248 <vid_appStart+0x284>
		{
			HUART_sendSTRING( (Uint8_t* ) "\r Please Enter Your Card PAN \r\n" );
    5092:	8b eb       	ldi	r24, 0xBB	; 187
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HUART_sendSTRING( (Uint8_t* ) ">>  " );
    509a:	8b ed       	ldi	r24, 0xDB	; 219
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HUART_receiveSTRING(PAN_buffer, MAX_BUFFER);
    50a2:	ce 01       	movw	r24, r28
    50a4:	0a 96       	adiw	r24, 0x0a	; 10
    50a6:	64 e1       	ldi	r22, 0x14	; 20
    50a8:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <HUART_receiveSTRING>

			//HUART_sendSTRING( PAN_buffer );
			PAN_size = strlen( (Uint8_t*) PAN_buffer);
    50ac:	ce 01       	movw	r24, r28
    50ae:	0a 96       	adiw	r24, 0x0a	; 10
    50b0:	0e 94 03 2a 	call	0x5406	; 0x5406 <strlen>
    50b4:	8b 83       	std	Y+3, r24	; 0x03

			if ( PAN_size == 16 )
    50b6:	8b 81       	ldd	r24, Y+3	; 0x03
    50b8:	80 31       	cpi	r24, 0x10	; 16
    50ba:	09 f0       	breq	.+2      	; 0x50be <vid_appStart+0xfa>
    50bc:	94 cf       	rjmp	.-216    	; 0x4fe6 <vid_appStart+0x22>
			{
				eeprom_write_byte(0x0000, PAN_size) ;
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	6b 81       	ldd	r22, Y+3	; 0x03
    50c4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <eeprom_write_byte>
				HTimer_vidDelayMs(30);
    50c8:	6e e1       	ldi	r22, 0x1E	; 30
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
				eeprom_write_string(0x0010, PAN_buffer);
    50d4:	9e 01       	movw	r18, r28
    50d6:	26 5f       	subi	r18, 0xF6	; 246
    50d8:	3f 4f       	sbci	r19, 0xFF	; 255
    50da:	80 e1       	ldi	r24, 0x10	; 16
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	b9 01       	movw	r22, r18
    50e0:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <eeprom_write_string>

				HTimer_vidDelayMs(30);
    50e4:	6e e1       	ldi	r22, 0x1E	; 30
    50e6:	70 e0       	ldi	r23, 0x00	; 0
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
    50f0:	5d c0       	rjmp	.+186    	; 0x51ac <vid_appStart+0x1e8>
				//data = eeprom_read_byte(0x0010);
				//HUART_enSendData( data );
				while (PIN_size != 4)
				{
					HUART_sendSTRING( (Uint8_t* ) "\r Please Enter Your PIN of 4 Numeric Digit \r\n" );
    50f2:	80 ee       	ldi	r24, 0xE0	; 224
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
					HUART_sendSTRING( (Uint8_t* ) ">>  " );
    50fa:	8b ed       	ldi	r24, 0xDB	; 219
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
					HUART_receiveSTRING(PIN_buffer, PIN_BUFFER);
    5102:	ce 01       	movw	r24, r28
    5104:	4e 96       	adiw	r24, 0x1e	; 30
    5106:	6a e0       	ldi	r22, 0x0A	; 10
    5108:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <HUART_receiveSTRING>
					PIN_size = strlen(PIN_buffer);
    510c:	ce 01       	movw	r24, r28
    510e:	4e 96       	adiw	r24, 0x1e	; 30
    5110:	0e 94 03 2a 	call	0x5406	; 0x5406 <strlen>
    5114:	8a 83       	std	Y+2, r24	; 0x02
					if(PIN_size == 4)
    5116:	8a 81       	ldd	r24, Y+2	; 0x02
    5118:	84 30       	cpi	r24, 0x04	; 4
    511a:	09 f0       	breq	.+2      	; 0x511e <vid_appStart+0x15a>
    511c:	43 c0       	rjmp	.+134    	; 0x51a4 <vid_appStart+0x1e0>
    511e:	3d c0       	rjmp	.+122    	; 0x519a <vid_appStart+0x1d6>
					{
						while(is_ok == 0)
						{
							for (Uint8_t i = 0; i < PIN_size; i++)
    5120:	19 82       	std	Y+1, r1	; 0x01
    5122:	1b c0       	rjmp	.+54     	; 0x515a <vid_appStart+0x196>
							{
								if(PIN_buffer[i] >= '0' && PIN_buffer[i] <= '9')
    5124:	89 81       	ldd	r24, Y+1	; 0x01
    5126:	28 2f       	mov	r18, r24
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	ce 01       	movw	r24, r28
    512c:	4e 96       	adiw	r24, 0x1e	; 30
    512e:	fc 01       	movw	r30, r24
    5130:	e2 0f       	add	r30, r18
    5132:	f3 1f       	adc	r31, r19
    5134:	80 81       	ld	r24, Z
    5136:	80 33       	cpi	r24, 0x30	; 48
    5138:	58 f0       	brcs	.+22     	; 0x5150 <vid_appStart+0x18c>
    513a:	89 81       	ldd	r24, Y+1	; 0x01
    513c:	28 2f       	mov	r18, r24
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	ce 01       	movw	r24, r28
    5142:	4e 96       	adiw	r24, 0x1e	; 30
    5144:	fc 01       	movw	r30, r24
    5146:	e2 0f       	add	r30, r18
    5148:	f3 1f       	adc	r31, r19
    514a:	80 81       	ld	r24, Z
    514c:	8a 33       	cpi	r24, 0x3A	; 58
    514e:	10 f0       	brcs	.+4      	; 0x5154 <vid_appStart+0x190>
								{

								}
								else
								{
									flag = 1;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	8f 83       	std	Y+7, r24	; 0x07
					PIN_size = strlen(PIN_buffer);
					if(PIN_size == 4)
					{
						while(is_ok == 0)
						{
							for (Uint8_t i = 0; i < PIN_size; i++)
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	8f 5f       	subi	r24, 0xFF	; 255
    5158:	89 83       	std	Y+1, r24	; 0x01
    515a:	99 81       	ldd	r25, Y+1	; 0x01
    515c:	8a 81       	ldd	r24, Y+2	; 0x02
    515e:	98 17       	cp	r25, r24
    5160:	08 f3       	brcs	.-62     	; 0x5124 <vid_appStart+0x160>
								{
									flag = 1;
								}
							}

							if (flag == 0)
    5162:	8f 81       	ldd	r24, Y+7	; 0x07
    5164:	88 23       	and	r24, r24
    5166:	19 f4       	brne	.+6      	; 0x516e <vid_appStart+0x1aa>
							{
								is_ok = 1;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	88 87       	std	Y+8, r24	; 0x08
    516c:	16 c0       	rjmp	.+44     	; 0x519a <vid_appStart+0x1d6>
							}
							else if(flag == 1)
    516e:	8f 81       	ldd	r24, Y+7	; 0x07
    5170:	81 30       	cpi	r24, 0x01	; 1
    5172:	99 f4       	brne	.+38     	; 0x519a <vid_appStart+0x1d6>
							{
								flag = 0;
    5174:	1f 82       	std	Y+7, r1	; 0x07
								HUART_sendSTRING( (Uint8_t* ) "\r Please Enter Numeric Digit \r\n" );
    5176:	8e e0       	ldi	r24, 0x0E	; 14
    5178:	91 e0       	ldi	r25, 0x01	; 1
    517a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
								HUART_sendSTRING( (Uint8_t* ) ">>  " );
    517e:	8b ed       	ldi	r24, 0xDB	; 219
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
								HUART_receiveSTRING(PIN_buffer, PIN_BUFFER);
    5186:	ce 01       	movw	r24, r28
    5188:	4e 96       	adiw	r24, 0x1e	; 30
    518a:	6a e0       	ldi	r22, 0x0A	; 10
    518c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <HUART_receiveSTRING>
								PIN_size = strlen(PIN_buffer);
    5190:	ce 01       	movw	r24, r28
    5192:	4e 96       	adiw	r24, 0x1e	; 30
    5194:	0e 94 03 2a 	call	0x5406	; 0x5406 <strlen>
    5198:	8a 83       	std	Y+2, r24	; 0x02
					HUART_sendSTRING( (Uint8_t* ) ">>  " );
					HUART_receiveSTRING(PIN_buffer, PIN_BUFFER);
					PIN_size = strlen(PIN_buffer);
					if(PIN_size == 4)
					{
						while(is_ok == 0)
    519a:	88 85       	ldd	r24, Y+8	; 0x08
    519c:	88 23       	and	r24, r24
    519e:	09 f4       	brne	.+2      	; 0x51a2 <vid_appStart+0x1de>
    51a0:	bf cf       	rjmp	.-130    	; 0x5120 <vid_appStart+0x15c>
    51a2:	04 c0       	rjmp	.+8      	; 0x51ac <vid_appStart+0x1e8>
							}
						}
					}
					else
					{
						HUART_sendSTRING( (Uint8_t* ) "\r Please Enter 4 Digit \r\n" );
    51a4:	8e e2       	ldi	r24, 0x2E	; 46
    51a6:	91 e0       	ldi	r25, 0x01	; 1
    51a8:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
				eeprom_write_string(0x0010, PAN_buffer);

				HTimer_vidDelayMs(30);
				//data = eeprom_read_byte(0x0010);
				//HUART_enSendData( data );
				while (PIN_size != 4)
    51ac:	8a 81       	ldd	r24, Y+2	; 0x02
    51ae:	84 30       	cpi	r24, 0x04	; 4
    51b0:	09 f0       	breq	.+2      	; 0x51b4 <vid_appStart+0x1f0>
    51b2:	9f cf       	rjmp	.-194    	; 0x50f2 <vid_appStart+0x12e>
    51b4:	3a c0       	rjmp	.+116    	; 0x522a <vid_appStart+0x266>
				}


				while (rePIN_status != 1)
				{
					HUART_sendSTRING( (Uint8_t* ) "\r retype your pin \r\n" );
    51b6:	88 e4       	ldi	r24, 0x48	; 72
    51b8:	91 e0       	ldi	r25, 0x01	; 1
    51ba:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
					HUART_sendSTRING( (Uint8_t* ) ">>  " );
    51be:	8b ed       	ldi	r24, 0xDB	; 219
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
					HUART_receiveSTRING(RE_PIN_buffer, PIN_BUFFER);
    51c6:	ce 01       	movw	r24, r28
    51c8:	88 96       	adiw	r24, 0x28	; 40
    51ca:	6a e0       	ldi	r22, 0x0A	; 10
    51cc:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <HUART_receiveSTRING>

					if ( strcmp(PIN_buffer, RE_PIN_buffer) == 0 )
    51d0:	ce 01       	movw	r24, r28
    51d2:	4e 96       	adiw	r24, 0x1e	; 30
    51d4:	9e 01       	movw	r18, r28
    51d6:	28 5d       	subi	r18, 0xD8	; 216
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	b9 01       	movw	r22, r18
    51dc:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <strcmp>
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	f9 f4       	brne	.+62     	; 0x5222 <vid_appStart+0x25e>
					{
						eeprom_write_byte(0x0030, PIN_size) ;
    51e4:	80 e3       	ldi	r24, 0x30	; 48
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	6a 81       	ldd	r22, Y+2	; 0x02
    51ea:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <eeprom_write_byte>
						HTimer_vidDelayMs(30);
    51ee:	6e e1       	ldi	r22, 0x1E	; 30
    51f0:	70 e0       	ldi	r23, 0x00	; 0
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
						eeprom_write_string(0x0040, PIN_buffer);
    51fa:	9e 01       	movw	r18, r28
    51fc:	22 5e       	subi	r18, 0xE2	; 226
    51fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5200:	80 e4       	ldi	r24, 0x40	; 64
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	b9 01       	movw	r22, r18
    5206:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <eeprom_write_string>
						HTimer_vidDelayMs(30);
    520a:	6e e1       	ldi	r22, 0x1E	; 30
    520c:	70 e0       	ldi	r23, 0x00	; 0
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
						myMode = USER_MODE ;
    5216:	82 e0       	ldi	r24, 0x02	; 2
    5218:	80 93 e1 02 	sts	0x02E1, r24
						rePIN_status = 1;
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	8e 83       	std	Y+6, r24	; 0x06
    5220:	04 c0       	rjmp	.+8      	; 0x522a <vid_appStart+0x266>
					}
					else
					{
						HUART_sendSTRING( (Uint8_t* ) "\r try again \r\n" );
    5222:	8d e5       	ldi	r24, 0x5D	; 93
    5224:	91 e0       	ldi	r25, 0x01	; 1
    5226:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
						HUART_sendSTRING( (Uint8_t* ) "\r Please Enter 4 Digit \r\n" );
					}
				}


				while (rePIN_status != 1)
    522a:	8e 81       	ldd	r24, Y+6	; 0x06
    522c:	81 30       	cpi	r24, 0x01	; 1
    522e:	19 f6       	brne	.-122    	; 0x51b6 <vid_appStart+0x1f2>
						HUART_sendSTRING( (Uint8_t* ) "\r try again \r\n" );
					}
				}


				eeprom_write_byte(0x0060, 0xAA) ;
    5230:	80 e6       	ldi	r24, 0x60	; 96
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	6a ea       	ldi	r22, 0xAA	; 170
    5236:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <eeprom_write_byte>
				HTimer_vidDelayMs(30);
    523a:	6e e1       	ldi	r22, 0x1E	; 30
    523c:	70 e0       	ldi	r23, 0x00	; 0
    523e:	80 e0       	ldi	r24, 0x00	; 0
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
    5246:	cf ce       	rjmp	.-610    	; 0x4fe6 <vid_appStart+0x22>
			}
		}
		else if(USER_MODE == myMode)
    5248:	80 91 e1 02 	lds	r24, 0x02E1
    524c:	82 30       	cpi	r24, 0x02	; 2
    524e:	09 f0       	breq	.+2      	; 0x5252 <vid_appStart+0x28e>
    5250:	ca ce       	rjmp	.-620    	; 0x4fe6 <vid_appStart+0x22>
		{
			HUART_sendSTRING( (Uint8_t* ) "\r Hello Bassel \r\n" );
    5252:	8c e6       	ldi	r24, 0x6C	; 108
    5254:	91 e0       	ldi	r25, 0x01	; 1
    5256:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			//HTimer_vidDelayMs(500);

			//HTimer_vidDelayMs(500);

			HLed_on(DIO_PINB_0);
    525a:	88 e0       	ldi	r24, 0x08	; 8
    525c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HLed_on>
			HTimer_vidDelayMs(100);
    5260:	64 e6       	ldi	r22, 0x64	; 100
    5262:	70 e0       	ldi	r23, 0x00	; 0
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	0e 94 1b 19 	call	0x3236	; 0x3236 <HTimer_vidDelayMs>
			HLed_off(DIO_PINB_0);
    526c:	88 e0       	ldi	r24, 0x08	; 8
    526e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <HLed_off>

//			HSPI_vidTransmitString((Uint8_t*) " Hello " );
//			HSPI_vidTransmitChar('z');
//			eeprom_read_string(0x0010, read_string_from_eeprom);
			eeprom_read_string(0x0010, 0x0000, read_string_from_eeprom);
    5272:	9e 01       	movw	r18, r28
    5274:	2e 5c       	subi	r18, 0xCE	; 206
    5276:	3f 4f       	sbci	r19, 0xFF	; 255
    5278:	80 e1       	ldi	r24, 0x10	; 16
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	60 e0       	ldi	r22, 0x00	; 0
    527e:	70 e0       	ldi	r23, 0x00	; 0
    5280:	a9 01       	movw	r20, r18
    5282:	0e 94 14 27 	call	0x4e28	; 0x4e28 <eeprom_read_string>
			HUART_sendSTRING( (Uint8_t* ) read_string_from_eeprom );
    5286:	ce 01       	movw	r24, r28
    5288:	c2 96       	adiw	r24, 0x32	; 50
    528a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HSPI_vidTransmitString( read_string_from_eeprom );
    528e:	ce 01       	movw	r24, r28
    5290:	c2 96       	adiw	r24, 0x32	; 50
    5292:	0e 94 de 19 	call	0x33bc	; 0x33bc <HSPI_vidTransmitString>
//			HTimer_vidDelayMs(100);
			HUART_sendSTRING( (Uint8_t* ) "\r\n" );
    5296:	8e e7       	ldi	r24, 0x7E	; 126
    5298:	91 e0       	ldi	r25, 0x01	; 1
    529a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			eeprom_read_string(0x0040, 0x0030, read_pin_from_eeprom);
    529e:	9e 01       	movw	r18, r28
    52a0:	2c 59       	subi	r18, 0x9C	; 156
    52a2:	3f 4f       	sbci	r19, 0xFF	; 255
    52a4:	80 e4       	ldi	r24, 0x40	; 64
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	60 e3       	ldi	r22, 0x30	; 48
    52aa:	70 e0       	ldi	r23, 0x00	; 0
    52ac:	a9 01       	movw	r20, r18
    52ae:	0e 94 14 27 	call	0x4e28	; 0x4e28 <eeprom_read_string>
			HUART_sendSTRING( (Uint8_t* ) read_pin_from_eeprom );
    52b2:	ce 01       	movw	r24, r28
    52b4:	8c 59       	subi	r24, 0x9C	; 156
    52b6:	9f 4f       	sbci	r25, 0xFF	; 255
    52b8:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>
			HSPI_vidTransmitString( read_pin_from_eeprom );
    52bc:	ce 01       	movw	r24, r28
    52be:	8c 59       	subi	r24, 0x9C	; 156
    52c0:	9f 4f       	sbci	r25, 0xFF	; 255
    52c2:	0e 94 de 19 	call	0x33bc	; 0x33bc <HSPI_vidTransmitString>

			HUART_sendSTRING( (Uint8_t* ) "\r bye Bassel \r\n" );
    52c6:	81 e8       	ldi	r24, 0x81	; 129
    52c8:	91 e0       	ldi	r25, 0x01	; 1
    52ca:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <HUART_sendSTRING>

			once = 1;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	8d 83       	std	Y+5, r24	; 0x05
			myMode = WAITING_MODE ;
    52d2:	83 e0       	ldi	r24, 0x03	; 3
    52d4:	80 93 e1 02 	sts	0x02E1, r24
    52d8:	86 ce       	rjmp	.-756    	; 0x4fe6 <vid_appStart+0x22>

000052da <main>:
 *      Author: hp
 */

#include "APP/app.h"
int main()
{
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
	vid_appInit();
    52e2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <vid_appInit>
	vid_appStart();
    52e6:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <vid_appStart>

	return 0;
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	90 e0       	ldi	r25, 0x00	; 0
}
    52ee:	cf 91       	pop	r28
    52f0:	df 91       	pop	r29
    52f2:	08 95       	ret

000052f4 <__divmodhi4>:
    52f4:	97 fb       	bst	r25, 7
    52f6:	09 2e       	mov	r0, r25
    52f8:	07 26       	eor	r0, r23
    52fa:	0a d0       	rcall	.+20     	; 0x5310 <__divmodhi4_neg1>
    52fc:	77 fd       	sbrc	r23, 7
    52fe:	04 d0       	rcall	.+8      	; 0x5308 <__divmodhi4_neg2>
    5300:	2e d0       	rcall	.+92     	; 0x535e <__udivmodhi4>
    5302:	06 d0       	rcall	.+12     	; 0x5310 <__divmodhi4_neg1>
    5304:	00 20       	and	r0, r0
    5306:	1a f4       	brpl	.+6      	; 0x530e <__divmodhi4_exit>

00005308 <__divmodhi4_neg2>:
    5308:	70 95       	com	r23
    530a:	61 95       	neg	r22
    530c:	7f 4f       	sbci	r23, 0xFF	; 255

0000530e <__divmodhi4_exit>:
    530e:	08 95       	ret

00005310 <__divmodhi4_neg1>:
    5310:	f6 f7       	brtc	.-4      	; 0x530e <__divmodhi4_exit>
    5312:	90 95       	com	r25
    5314:	81 95       	neg	r24
    5316:	9f 4f       	sbci	r25, 0xFF	; 255
    5318:	08 95       	ret

0000531a <__udivmodsi4>:
    531a:	a1 e2       	ldi	r26, 0x21	; 33
    531c:	1a 2e       	mov	r1, r26
    531e:	aa 1b       	sub	r26, r26
    5320:	bb 1b       	sub	r27, r27
    5322:	fd 01       	movw	r30, r26
    5324:	0d c0       	rjmp	.+26     	; 0x5340 <__udivmodsi4_ep>

00005326 <__udivmodsi4_loop>:
    5326:	aa 1f       	adc	r26, r26
    5328:	bb 1f       	adc	r27, r27
    532a:	ee 1f       	adc	r30, r30
    532c:	ff 1f       	adc	r31, r31
    532e:	a2 17       	cp	r26, r18
    5330:	b3 07       	cpc	r27, r19
    5332:	e4 07       	cpc	r30, r20
    5334:	f5 07       	cpc	r31, r21
    5336:	20 f0       	brcs	.+8      	; 0x5340 <__udivmodsi4_ep>
    5338:	a2 1b       	sub	r26, r18
    533a:	b3 0b       	sbc	r27, r19
    533c:	e4 0b       	sbc	r30, r20
    533e:	f5 0b       	sbc	r31, r21

00005340 <__udivmodsi4_ep>:
    5340:	66 1f       	adc	r22, r22
    5342:	77 1f       	adc	r23, r23
    5344:	88 1f       	adc	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	1a 94       	dec	r1
    534a:	69 f7       	brne	.-38     	; 0x5326 <__udivmodsi4_loop>
    534c:	60 95       	com	r22
    534e:	70 95       	com	r23
    5350:	80 95       	com	r24
    5352:	90 95       	com	r25
    5354:	9b 01       	movw	r18, r22
    5356:	ac 01       	movw	r20, r24
    5358:	bd 01       	movw	r22, r26
    535a:	cf 01       	movw	r24, r30
    535c:	08 95       	ret

0000535e <__udivmodhi4>:
    535e:	aa 1b       	sub	r26, r26
    5360:	bb 1b       	sub	r27, r27
    5362:	51 e1       	ldi	r21, 0x11	; 17
    5364:	07 c0       	rjmp	.+14     	; 0x5374 <__udivmodhi4_ep>

00005366 <__udivmodhi4_loop>:
    5366:	aa 1f       	adc	r26, r26
    5368:	bb 1f       	adc	r27, r27
    536a:	a6 17       	cp	r26, r22
    536c:	b7 07       	cpc	r27, r23
    536e:	10 f0       	brcs	.+4      	; 0x5374 <__udivmodhi4_ep>
    5370:	a6 1b       	sub	r26, r22
    5372:	b7 0b       	sbc	r27, r23

00005374 <__udivmodhi4_ep>:
    5374:	88 1f       	adc	r24, r24
    5376:	99 1f       	adc	r25, r25
    5378:	5a 95       	dec	r21
    537a:	a9 f7       	brne	.-22     	; 0x5366 <__udivmodhi4_loop>
    537c:	80 95       	com	r24
    537e:	90 95       	com	r25
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	08 95       	ret

00005386 <__prologue_saves__>:
    5386:	2f 92       	push	r2
    5388:	3f 92       	push	r3
    538a:	4f 92       	push	r4
    538c:	5f 92       	push	r5
    538e:	6f 92       	push	r6
    5390:	7f 92       	push	r7
    5392:	8f 92       	push	r8
    5394:	9f 92       	push	r9
    5396:	af 92       	push	r10
    5398:	bf 92       	push	r11
    539a:	cf 92       	push	r12
    539c:	df 92       	push	r13
    539e:	ef 92       	push	r14
    53a0:	ff 92       	push	r15
    53a2:	0f 93       	push	r16
    53a4:	1f 93       	push	r17
    53a6:	cf 93       	push	r28
    53a8:	df 93       	push	r29
    53aa:	cd b7       	in	r28, 0x3d	; 61
    53ac:	de b7       	in	r29, 0x3e	; 62
    53ae:	ca 1b       	sub	r28, r26
    53b0:	db 0b       	sbc	r29, r27
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	09 94       	ijmp

000053be <__epilogue_restores__>:
    53be:	2a 88       	ldd	r2, Y+18	; 0x12
    53c0:	39 88       	ldd	r3, Y+17	; 0x11
    53c2:	48 88       	ldd	r4, Y+16	; 0x10
    53c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    53c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    53c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    53ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    53cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    53ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    53d0:	b9 84       	ldd	r11, Y+9	; 0x09
    53d2:	c8 84       	ldd	r12, Y+8	; 0x08
    53d4:	df 80       	ldd	r13, Y+7	; 0x07
    53d6:	ee 80       	ldd	r14, Y+6	; 0x06
    53d8:	fd 80       	ldd	r15, Y+5	; 0x05
    53da:	0c 81       	ldd	r16, Y+4	; 0x04
    53dc:	1b 81       	ldd	r17, Y+3	; 0x03
    53de:	aa 81       	ldd	r26, Y+2	; 0x02
    53e0:	b9 81       	ldd	r27, Y+1	; 0x01
    53e2:	ce 0f       	add	r28, r30
    53e4:	d1 1d       	adc	r29, r1
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	cd bf       	out	0x3d, r28	; 61
    53f0:	ed 01       	movw	r28, r26
    53f2:	08 95       	ret

000053f4 <strcmp>:
    53f4:	fb 01       	movw	r30, r22
    53f6:	dc 01       	movw	r26, r24
    53f8:	8d 91       	ld	r24, X+
    53fa:	01 90       	ld	r0, Z+
    53fc:	80 19       	sub	r24, r0
    53fe:	01 10       	cpse	r0, r1
    5400:	d9 f3       	breq	.-10     	; 0x53f8 <strcmp+0x4>
    5402:	99 0b       	sbc	r25, r25
    5404:	08 95       	ret

00005406 <strlen>:
    5406:	fc 01       	movw	r30, r24
    5408:	01 90       	ld	r0, Z+
    540a:	00 20       	and	r0, r0
    540c:	e9 f7       	brne	.-6      	; 0x5408 <strlen+0x2>
    540e:	80 95       	com	r24
    5410:	90 95       	com	r25
    5412:	8e 0f       	add	r24, r30
    5414:	9f 1f       	adc	r25, r31
    5416:	08 95       	ret

00005418 <itoa>:
    5418:	fb 01       	movw	r30, r22
    541a:	9f 01       	movw	r18, r30
    541c:	e8 94       	clt
    541e:	42 30       	cpi	r20, 0x02	; 2
    5420:	c4 f0       	brlt	.+48     	; 0x5452 <itoa+0x3a>
    5422:	45 32       	cpi	r20, 0x25	; 37
    5424:	b4 f4       	brge	.+44     	; 0x5452 <itoa+0x3a>
    5426:	4a 30       	cpi	r20, 0x0A	; 10
    5428:	29 f4       	brne	.+10     	; 0x5434 <itoa+0x1c>
    542a:	97 fb       	bst	r25, 7
    542c:	1e f4       	brtc	.+6      	; 0x5434 <itoa+0x1c>
    542e:	90 95       	com	r25
    5430:	81 95       	neg	r24
    5432:	9f 4f       	sbci	r25, 0xFF	; 255
    5434:	64 2f       	mov	r22, r20
    5436:	77 27       	eor	r23, r23
    5438:	0e 94 af 29 	call	0x535e	; 0x535e <__udivmodhi4>
    543c:	80 5d       	subi	r24, 0xD0	; 208
    543e:	8a 33       	cpi	r24, 0x3A	; 58
    5440:	0c f0       	brlt	.+2      	; 0x5444 <itoa+0x2c>
    5442:	89 5d       	subi	r24, 0xD9	; 217
    5444:	81 93       	st	Z+, r24
    5446:	cb 01       	movw	r24, r22
    5448:	00 97       	sbiw	r24, 0x00	; 0
    544a:	a1 f7       	brne	.-24     	; 0x5434 <itoa+0x1c>
    544c:	16 f4       	brtc	.+4      	; 0x5452 <itoa+0x3a>
    544e:	5d e2       	ldi	r21, 0x2D	; 45
    5450:	51 93       	st	Z+, r21
    5452:	10 82       	st	Z, r1
    5454:	c9 01       	movw	r24, r18
    5456:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <strrev>

0000545a <strrev>:
    545a:	dc 01       	movw	r26, r24
    545c:	fc 01       	movw	r30, r24
    545e:	67 2f       	mov	r22, r23
    5460:	71 91       	ld	r23, Z+
    5462:	77 23       	and	r23, r23
    5464:	e1 f7       	brne	.-8      	; 0x545e <strrev+0x4>
    5466:	32 97       	sbiw	r30, 0x02	; 2
    5468:	04 c0       	rjmp	.+8      	; 0x5472 <strrev+0x18>
    546a:	7c 91       	ld	r23, X
    546c:	6d 93       	st	X+, r22
    546e:	70 83       	st	Z, r23
    5470:	62 91       	ld	r22, -Z
    5472:	ae 17       	cp	r26, r30
    5474:	bf 07       	cpc	r27, r31
    5476:	c8 f3       	brcs	.-14     	; 0x546a <strrev+0x10>
    5478:	08 95       	ret

0000547a <_exit>:
    547a:	f8 94       	cli

0000547c <__stop_program>:
    547c:	ff cf       	rjmp	.-2      	; 0x547c <__stop_program>
